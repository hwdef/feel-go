"main" {
    # "./project/package path" package. #
    "fmt" fmt.
}

main(->) {
    testGo()
    test(1, "2")
    testJudge()
    testLoop()
    m = man{}
    testProtocol(m?)
    testLambda( (a int -> b str) {
        <- ""
    })
}

pi : 3.14
eight int : 8

num1 = 1
num2 num = 12.345678

work => (str->)
# doWork -> (str->) #

test(x int, y str -> r1 str, r2 int) {
    a = x * 3
    b int = 2
    <- "hello", a + b
}

testJudge(->) {
    ? 1 + 1 == 2 {

    } 2 * 3 == 6 {

    } _ {

    }
    a = 5
    a ? 1 {
        a += 1
    } 2, 3, 4 {
        a += 2
    } _ {
        a += 0
    }
}

testLoop(->) {
    a = 0
    arr = []int{1,2,3,4,5}
    arr @ i {
        a += i
    }
    arr @ [i]v {
        a += i + v
    }
    dic = [str]int{["1"]1,["2"]2}
    dic @ i {
        a += i
    }
    [0 <= 10] @ i {
        a += i
        ? i == 7 {
            -> @
        }
    }
    [5 > 0] @ i {
        a += i
    }
    @ a > 0 {
        a -= 1
    }
    @ {
        <- @
    }
}

human -> {
    name str
}

me ?human -> {
    sayName(-> n str) {
        <- me.name
    }
} 

man -> {
    _ human
    age int
}

me ?man -> {
    doSomething(work str ->) {
        Println(work)
    }
}

person <- {
    sayName(-> n str)
}

worker <- {
    _ person
    doSomething(work str ->)
}

testProtocol(w worker -> i any) {
    w.doSomething("protocol")
    <- w
}

testGo(-> v int) {
    async = (->) {
        Println("async")
    }
    async() <~
    channel = <[->]int>(1)
    channel[<-] = 2
    <- channel[<-]
}

testLambda(fn (int->str) ->) {
    fn(1)
}