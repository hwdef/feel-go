// Code generated from LiteParser.g4 by ANTLR 4.7.2. DO NOT EDIT.

package parser // LiteParser

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 94, 1887,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9,
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65,
	4, 66, 9, 66, 4, 67, 9, 67, 4, 68, 9, 68, 4, 69, 9, 69, 4, 70, 9, 70, 4,
	71, 9, 71, 4, 72, 9, 72, 4, 73, 9, 73, 4, 74, 9, 74, 4, 75, 9, 75, 4, 76,
	9, 76, 4, 77, 9, 77, 4, 78, 9, 78, 4, 79, 9, 79, 4, 80, 9, 80, 4, 81, 9,
	81, 4, 82, 9, 82, 4, 83, 9, 83, 4, 84, 9, 84, 4, 85, 9, 85, 4, 86, 9, 86,
	4, 87, 9, 87, 4, 88, 9, 88, 4, 89, 9, 89, 4, 90, 9, 90, 4, 91, 9, 91, 4,
	92, 9, 92, 4, 93, 9, 93, 4, 94, 9, 94, 4, 95, 9, 95, 4, 96, 9, 96, 4, 97,
	9, 97, 4, 98, 9, 98, 4, 99, 9, 99, 4, 100, 9, 100, 4, 101, 9, 101, 4, 102,
	9, 102, 4, 103, 9, 103, 4, 104, 9, 104, 4, 105, 9, 105, 4, 106, 9, 106,
	4, 107, 9, 107, 4, 108, 9, 108, 4, 109, 9, 109, 4, 110, 9, 110, 4, 111,
	9, 111, 4, 112, 9, 112, 4, 113, 9, 113, 4, 114, 9, 114, 4, 115, 9, 115,
	4, 116, 9, 116, 4, 117, 9, 117, 4, 118, 9, 118, 4, 119, 9, 119, 4, 120,
	9, 120, 4, 121, 9, 121, 4, 122, 9, 122, 4, 123, 9, 123, 4, 124, 9, 124,
	4, 125, 9, 125, 4, 126, 9, 126, 4, 127, 9, 127, 4, 128, 9, 128, 4, 129,
	9, 129, 4, 130, 9, 130, 4, 131, 9, 131, 4, 132, 9, 132, 4, 133, 9, 133,
	4, 134, 9, 134, 4, 135, 9, 135, 4, 136, 9, 136, 4, 137, 9, 137, 4, 138,
	9, 138, 4, 139, 9, 139, 4, 140, 9, 140, 4, 141, 9, 141, 4, 142, 9, 142,
	4, 143, 9, 143, 4, 144, 9, 144, 4, 145, 9, 145, 4, 146, 9, 146, 4, 147,
	9, 147, 4, 148, 9, 148, 4, 149, 9, 149, 4, 150, 9, 150, 4, 151, 9, 151,
	4, 152, 9, 152, 4, 153, 9, 153, 4, 154, 9, 154, 4, 155, 9, 155, 3, 2, 6,
	2, 312, 10, 2, 13, 2, 14, 2, 313, 3, 3, 7, 3, 317, 10, 3, 12, 3, 14, 3,
	320, 11, 3, 3, 3, 5, 3, 323, 10, 3, 3, 3, 3, 3, 7, 3, 327, 10, 3, 12, 3,
	14, 3, 330, 11, 3, 3, 3, 7, 3, 333, 10, 3, 12, 3, 14, 3, 336, 11, 3, 3,
	4, 3, 4, 3, 4, 3, 4, 7, 4, 342, 10, 4, 12, 4, 14, 4, 345, 11, 4, 3, 4,
	3, 4, 3, 4, 3, 5, 5, 5, 351, 10, 5, 3, 5, 3, 5, 3, 5, 5, 5, 356, 10, 5,
	5, 5, 358, 10, 5, 3, 5, 3, 5, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6,
	3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 5, 6, 375, 10, 6, 3, 7, 3, 7, 3, 7,
	3, 7, 3, 7, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 9, 5, 9, 388, 10, 9, 3, 9,
	3, 9, 3, 9, 7, 9, 393, 10, 9, 12, 9, 14, 9, 396, 11, 9, 3, 9, 3, 9, 3,
	9, 7, 9, 401, 10, 9, 12, 9, 14, 9, 404, 11, 9, 3, 9, 3, 9, 3, 9, 3, 10,
	3, 10, 3, 10, 5, 10, 412, 10, 10, 3, 10, 5, 10, 415, 10, 10, 3, 10, 3,
	10, 3, 11, 5, 11, 420, 10, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11,
	3, 11, 5, 11, 429, 10, 11, 5, 11, 431, 10, 11, 3, 11, 3, 11, 3, 12, 5,
	12, 436, 10, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 5, 12, 443, 10, 12,
	3, 12, 3, 12, 6, 12, 447, 10, 12, 13, 12, 14, 12, 448, 3, 12, 3, 12, 3,
	12, 3, 13, 5, 13, 455, 10, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13,
	5, 13, 463, 10, 13, 3, 13, 3, 13, 3, 13, 3, 14, 5, 14, 469, 10, 14, 3,
	14, 3, 14, 5, 14, 473, 10, 14, 3, 14, 3, 14, 3, 14, 3, 14, 7, 14, 479,
	10, 14, 12, 14, 14, 14, 482, 11, 14, 3, 14, 3, 14, 3, 14, 3, 14, 7, 14,
	488, 10, 14, 12, 14, 14, 14, 491, 11, 14, 3, 14, 3, 14, 3, 14, 3, 15, 5,
	15, 497, 10, 15, 3, 15, 3, 15, 5, 15, 501, 10, 15, 3, 15, 3, 15, 3, 15,
	7, 15, 506, 10, 15, 12, 15, 14, 15, 509, 11, 15, 3, 15, 3, 15, 3, 15, 3,
	16, 3, 16, 3, 16, 3, 16, 5, 16, 518, 10, 16, 3, 17, 3, 17, 3, 17, 3, 17,
	3, 18, 5, 18, 525, 10, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3,
	18, 3, 18, 5, 18, 535, 10, 18, 3, 18, 3, 18, 5, 18, 539, 10, 18, 3, 18,
	3, 18, 7, 18, 543, 10, 18, 12, 18, 14, 18, 546, 11, 18, 3, 18, 3, 18, 3,
	19, 5, 19, 551, 10, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19,
	5, 19, 560, 10, 19, 5, 19, 562, 10, 19, 3, 19, 3, 19, 3, 20, 3, 20, 3,
	20, 3, 20, 3, 20, 5, 20, 571, 10, 20, 3, 20, 3, 20, 6, 20, 575, 10, 20,
	13, 20, 14, 20, 576, 3, 20, 3, 20, 3, 20, 3, 21, 3, 21, 3, 21, 3, 21, 3,
	21, 3, 21, 3, 21, 3, 21, 3, 22, 3, 22, 3, 22, 5, 22, 593, 10, 22, 3, 22,
	7, 22, 596, 10, 22, 12, 22, 14, 22, 599, 11, 22, 3, 22, 3, 22, 7, 22, 603,
	10, 22, 12, 22, 14, 22, 606, 11, 22, 3, 22, 3, 22, 3, 22, 3, 23, 3, 23,
	3, 23, 5, 23, 614, 10, 23, 3, 24, 5, 24, 617, 10, 24, 3, 24, 5, 24, 620,
	10, 24, 3, 24, 3, 24, 5, 24, 624, 10, 24, 3, 24, 3, 24, 3, 24, 3, 24, 7,
	24, 630, 10, 24, 12, 24, 14, 24, 633, 11, 24, 3, 24, 3, 24, 3, 24, 3, 24,
	7, 24, 639, 10, 24, 12, 24, 14, 24, 642, 11, 24, 3, 24, 3, 24, 3, 24, 3,
	25, 5, 25, 648, 10, 25, 3, 25, 5, 25, 651, 10, 25, 3, 25, 3, 25, 3, 25,
	3, 25, 3, 25, 6, 25, 658, 10, 25, 13, 25, 14, 25, 659, 3, 25, 3, 25, 3,
	25, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 7, 26, 671, 10, 26, 12, 26,
	14, 26, 674, 11, 26, 3, 26, 3, 26, 7, 26, 678, 10, 26, 12, 26, 14, 26,
	681, 11, 26, 3, 26, 3, 26, 3, 26, 3, 27, 3, 27, 3, 27, 5, 27, 689, 10,
	27, 3, 28, 5, 28, 692, 10, 28, 3, 28, 5, 28, 695, 10, 28, 3, 28, 3, 28,
	5, 28, 699, 10, 28, 3, 28, 3, 28, 3, 28, 3, 28, 7, 28, 705, 10, 28, 12,
	28, 14, 28, 708, 11, 28, 3, 28, 3, 28, 3, 28, 3, 28, 7, 28, 714, 10, 28,
	12, 28, 14, 28, 717, 11, 28, 3, 28, 3, 28, 3, 28, 3, 29, 5, 29, 723, 10,
	29, 3, 29, 5, 29, 726, 10, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 6, 29,
	733, 10, 29, 13, 29, 14, 29, 734, 3, 29, 3, 29, 3, 29, 3, 30, 5, 30, 741,
	10, 30, 3, 30, 3, 30, 5, 30, 745, 10, 30, 3, 30, 3, 30, 3, 30, 7, 30, 750,
	10, 30, 12, 30, 14, 30, 753, 11, 30, 3, 30, 3, 30, 3, 30, 3, 31, 3, 31,
	3, 31, 3, 31, 5, 31, 762, 10, 31, 3, 32, 5, 32, 765, 10, 32, 3, 32, 3,
	32, 3, 32, 3, 32, 3, 32, 7, 32, 772, 10, 32, 12, 32, 14, 32, 775, 11, 32,
	3, 32, 3, 32, 3, 32, 3, 33, 3, 33, 3, 34, 5, 34, 783, 10, 34, 3, 34, 3,
	34, 5, 34, 787, 10, 34, 3, 34, 3, 34, 3, 34, 3, 34, 7, 34, 793, 10, 34,
	12, 34, 14, 34, 796, 11, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 35, 3, 35,
	5, 35, 804, 10, 35, 3, 35, 3, 35, 3, 35, 3, 35, 7, 35, 810, 10, 35, 12,
	35, 14, 35, 813, 11, 35, 3, 35, 3, 35, 3, 35, 3, 35, 7, 35, 819, 10, 35,
	12, 35, 14, 35, 822, 11, 35, 3, 35, 3, 35, 3, 35, 3, 36, 3, 36, 5, 36,
	829, 10, 36, 3, 36, 3, 36, 3, 37, 5, 37, 834, 10, 37, 3, 37, 3, 37, 3,
	37, 7, 37, 839, 10, 37, 12, 37, 14, 37, 842, 11, 37, 3, 38, 5, 38, 845,
	10, 38, 3, 38, 3, 38, 3, 38, 7, 38, 850, 10, 38, 12, 38, 14, 38, 853, 11,
	38, 3, 39, 3, 39, 3, 39, 3, 39, 3, 40, 5, 40, 860, 10, 40, 3, 40, 3, 40,
	3, 40, 3, 40, 3, 40, 5, 40, 867, 10, 40, 3, 41, 3, 41, 3, 41, 3, 41, 3,
	41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41,
	3, 41, 3, 41, 3, 41, 3, 41, 5, 41, 888, 10, 41, 3, 42, 3, 42, 3, 42, 6,
	42, 893, 10, 42, 13, 42, 14, 42, 894, 3, 42, 3, 42, 3, 43, 3, 43, 3, 43,
	3, 43, 7, 43, 903, 10, 43, 12, 43, 14, 43, 906, 11, 43, 3, 43, 3, 43, 7,
	43, 910, 10, 43, 12, 43, 14, 43, 913, 11, 43, 3, 43, 3, 43, 3, 44, 3, 44,
	3, 44, 5, 44, 920, 10, 44, 3, 44, 3, 44, 5, 44, 924, 10, 44, 3, 45, 3,
	45, 7, 45, 928, 10, 45, 12, 45, 14, 45, 931, 11, 45, 3, 45, 3, 45, 3, 45,
	3, 45, 3, 45, 7, 45, 938, 10, 45, 12, 45, 14, 45, 941, 11, 45, 3, 45, 3,
	45, 5, 45, 945, 10, 45, 3, 46, 3, 46, 3, 46, 7, 46, 950, 10, 46, 12, 46,
	14, 46, 953, 11, 46, 3, 46, 3, 46, 3, 47, 3, 47, 3, 47, 3, 47, 7, 47, 961,
	10, 47, 12, 47, 14, 47, 964, 11, 47, 3, 47, 3, 47, 3, 48, 3, 48, 3, 48,
	7, 48, 971, 10, 48, 12, 48, 14, 48, 974, 11, 48, 3, 48, 3, 48, 3, 49, 3,
	49, 3, 49, 3, 49, 3, 49, 7, 49, 983, 10, 49, 12, 49, 14, 49, 986, 11, 49,
	3, 49, 3, 49, 3, 49, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 5, 50, 997,
	10, 50, 3, 50, 3, 50, 3, 50, 7, 50, 1002, 10, 50, 12, 50, 14, 50, 1005,
	11, 50, 3, 50, 3, 50, 3, 50, 3, 51, 3, 51, 3, 51, 3, 51, 7, 51, 1014, 10,
	51, 12, 51, 14, 51, 1017, 11, 51, 3, 51, 3, 51, 3, 51, 3, 52, 3, 52, 3,
	52, 7, 52, 1025, 10, 52, 12, 52, 14, 52, 1028, 11, 52, 3, 52, 3, 52, 3,
	52, 3, 53, 3, 53, 3, 53, 3, 53, 3, 54, 3, 54, 3, 54, 3, 54, 3, 55, 3, 55,
	3, 55, 7, 55, 1044, 10, 55, 12, 55, 14, 55, 1047, 11, 55, 3, 55, 3, 55,
	7, 55, 1051, 10, 55, 12, 55, 14, 55, 1054, 11, 55, 3, 55, 3, 55, 3, 55,
	3, 55, 3, 55, 3, 55, 7, 55, 1062, 10, 55, 12, 55, 14, 55, 1065, 11, 55,
	3, 55, 3, 55, 6, 55, 1069, 10, 55, 13, 55, 14, 55, 1070, 3, 55, 3, 55,
	5, 55, 1075, 10, 55, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56, 5, 56, 1082, 10,
	56, 3, 56, 3, 56, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 5, 57, 1091, 10, 57,
	3, 57, 3, 57, 7, 57, 1095, 10, 57, 12, 57, 14, 57, 1098, 11, 57, 3, 57,
	3, 57, 3, 58, 3, 58, 3, 58, 7, 58, 1105, 10, 58, 12, 58, 14, 58, 1108,
	11, 58, 3, 58, 3, 58, 3, 59, 3, 59, 3, 59, 5, 59, 1115, 10, 59, 3, 59,
	3, 59, 3, 59, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 3,
	60, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 5, 60, 1134, 10, 60, 3, 61, 3, 61,
	3, 61, 3, 61, 3, 61, 3, 61, 5, 61, 1142, 10, 61, 3, 61, 3, 61, 3, 61, 3,
	62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63,
	3, 63, 3, 63, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 65, 3, 65, 3, 65, 3,
	66, 3, 66, 5, 66, 1170, 10, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66,
	5, 66, 1178, 10, 66, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3,
	67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 5, 67,
	1197, 10, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3,
	67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67,
	3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3,
	67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 7, 67, 1235, 10, 67, 12,
	67, 14, 67, 1238, 11, 67, 3, 68, 3, 68, 5, 68, 1242, 10, 68, 3, 68, 3,
	68, 5, 68, 1246, 10, 68, 3, 68, 3, 68, 3, 68, 5, 68, 1251, 10, 68, 3, 69,
	3, 69, 3, 69, 3, 69, 3, 69, 7, 69, 1258, 10, 69, 12, 69, 14, 69, 1261,
	11, 69, 5, 69, 1263, 10, 69, 3, 69, 3, 69, 3, 70, 3, 70, 3, 70, 3, 70,
	7, 70, 1271, 10, 70, 12, 70, 14, 70, 1274, 11, 70, 3, 71, 3, 71, 5, 71,
	1278, 10, 71, 3, 72, 3, 72, 3, 72, 3, 72, 5, 72, 1284, 10, 72, 3, 72, 3,
	72, 3, 72, 3, 73, 3, 73, 3, 73, 3, 73, 7, 73, 1293, 10, 73, 12, 73, 14,
	73, 1296, 11, 73, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 7, 74, 1304,
	10, 74, 12, 74, 14, 74, 1307, 11, 74, 3, 74, 3, 74, 5, 74, 1311, 10, 74,
	3, 75, 3, 75, 3, 75, 5, 75, 1316, 10, 75, 3, 75, 3, 75, 3, 76, 3, 76, 5,
	76, 1322, 10, 76, 3, 77, 3, 77, 3, 77, 3, 77, 3, 78, 3, 78, 3, 78, 5, 78,
	1331, 10, 78, 3, 78, 3, 78, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 5,
	79, 1341, 10, 79, 3, 79, 3, 79, 3, 80, 3, 80, 3, 80, 3, 80, 3, 80, 5, 80,
	1350, 10, 80, 3, 80, 5, 80, 1353, 10, 80, 3, 80, 5, 80, 1356, 10, 80, 3,
	80, 3, 80, 3, 81, 3, 81, 3, 81, 3, 81, 3, 81, 5, 81, 1365, 10, 81, 3, 81,
	3, 81, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 83, 3, 83, 3, 83, 3, 83, 7,
	83, 1378, 10, 83, 12, 83, 14, 83, 1381, 11, 83, 3, 84, 3, 84, 3, 84, 3,
	84, 3, 85, 3, 85, 3, 85, 3, 85, 7, 85, 1391, 10, 85, 12, 85, 14, 85, 1394,
	11, 85, 3, 86, 3, 86, 3, 86, 3, 86, 3, 86, 3, 86, 3, 86, 3, 86, 7, 86,
	1404, 10, 86, 12, 86, 14, 86, 1407, 11, 86, 3, 87, 3, 87, 3, 87, 3, 87,
	7, 87, 1413, 10, 87, 12, 87, 14, 87, 1416, 11, 87, 3, 88, 3, 88, 3, 88,
	3, 89, 3, 89, 3, 89, 3, 89, 3, 89, 7, 89, 1426, 10, 89, 12, 89, 14, 89,
	1429, 11, 89, 3, 89, 3, 89, 3, 90, 3, 90, 3, 90, 3, 90, 3, 90, 3, 90, 3,
	90, 3, 90, 3, 90, 7, 90, 1442, 10, 90, 12, 90, 14, 90, 1445, 11, 90, 3,
	90, 3, 90, 3, 91, 3, 91, 3, 91, 3, 91, 3, 91, 7, 91, 1454, 10, 91, 12,
	91, 14, 91, 1457, 11, 91, 3, 91, 3, 91, 3, 92, 3, 92, 3, 92, 3, 92, 3,
	92, 3, 93, 3, 93, 3, 93, 5, 93, 1469, 10, 93, 3, 94, 3, 94, 3, 94, 3, 94,
	3, 95, 3, 95, 3, 95, 3, 96, 3, 96, 3, 96, 3, 97, 3, 97, 3, 97, 5, 97, 1484,
	10, 97, 7, 97, 1486, 10, 97, 12, 97, 14, 97, 1489, 11, 97, 3, 97, 3, 97,
	3, 98, 3, 98, 3, 98, 5, 98, 1496, 10, 98, 3, 98, 3, 98, 7, 98, 1500, 10,
	98, 12, 98, 14, 98, 1503, 11, 98, 3, 99, 3, 99, 3, 99, 3, 99, 3, 99, 7,
	99, 1510, 10, 99, 12, 99, 14, 99, 1513, 11, 99, 3, 99, 3, 99, 3, 100, 3,
	100, 3, 100, 5, 100, 1520, 10, 100, 3, 101, 3, 101, 3, 101, 3, 101, 3,
	101, 7, 101, 1527, 10, 101, 12, 101, 14, 101, 1530, 11, 101, 3, 101, 3,
	101, 3, 102, 3, 102, 5, 102, 1536, 10, 102, 3, 102, 3, 102, 7, 102, 1540,
	10, 102, 12, 102, 14, 102, 1543, 11, 102, 3, 102, 3, 102, 3, 102, 3, 102,
	3, 102, 5, 102, 1550, 10, 102, 3, 102, 3, 102, 7, 102, 1554, 10, 102, 12,
	102, 14, 102, 1557, 11, 102, 3, 102, 7, 102, 1560, 10, 102, 12, 102, 14,
	102, 1563, 11, 102, 3, 102, 3, 102, 5, 102, 1567, 10, 102, 3, 103, 3, 103,
	3, 103, 3, 103, 7, 103, 1573, 10, 103, 12, 103, 14, 103, 1576, 11, 103,
	3, 104, 3, 104, 3, 105, 3, 105, 3, 105, 3, 105, 3, 105, 7, 105, 1585, 10,
	105, 12, 105, 14, 105, 1588, 11, 105, 3, 105, 3, 105, 3, 106, 3, 106, 3,
	106, 3, 106, 3, 107, 3, 107, 3, 107, 3, 107, 7, 107, 1600, 10, 107, 12,
	107, 14, 107, 1603, 11, 107, 3, 107, 3, 107, 3, 107, 3, 107, 7, 107, 1609,
	10, 107, 12, 107, 14, 107, 1612, 11, 107, 3, 107, 3, 107, 3, 108, 3, 108,
	3, 108, 3, 108, 3, 108, 7, 108, 1621, 10, 108, 12, 108, 14, 108, 1624,
	11, 108, 3, 108, 3, 108, 3, 109, 3, 109, 3, 109, 3, 110, 3, 110, 3, 110,
	3, 111, 3, 111, 5, 111, 1636, 10, 111, 3, 111, 3, 111, 3, 111, 5, 111,
	1641, 10, 111, 3, 111, 6, 111, 1644, 10, 111, 13, 111, 14, 111, 1645, 3,
	111, 3, 111, 5, 111, 1650, 10, 111, 3, 111, 3, 111, 3, 112, 3, 112, 5,
	112, 1656, 10, 112, 3, 112, 3, 112, 5, 112, 1660, 10, 112, 3, 113, 3, 113,
	5, 113, 1664, 10, 113, 3, 114, 3, 114, 3, 115, 3, 115, 3, 116, 3, 116,
	6, 116, 1672, 10, 116, 13, 116, 14, 116, 1673, 3, 117, 3, 117, 3, 117,
	3, 118, 3, 118, 3, 118, 3, 118, 3, 118, 3, 118, 3, 118, 3, 118, 5, 118,
	1687, 10, 118, 3, 119, 3, 119, 3, 119, 3, 119, 3, 120, 3, 120, 3, 121,
	3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121,
	5, 121, 1705, 10, 121, 3, 122, 3, 122, 3, 122, 5, 122, 1710, 10, 122, 3,
	123, 3, 123, 3, 123, 3, 124, 3, 124, 3, 124, 5, 124, 1718, 10, 124, 3,
	125, 3, 125, 3, 125, 3, 125, 3, 125, 6, 125, 1725, 10, 125, 13, 125, 14,
	125, 1726, 3, 125, 3, 125, 3, 126, 3, 126, 3, 126, 3, 126, 3, 126, 3, 127,
	3, 127, 3, 127, 3, 127, 3, 128, 3, 128, 3, 128, 3, 128, 3, 129, 3, 129,
	3, 129, 3, 129, 3, 129, 3, 130, 3, 130, 3, 130, 3, 130, 3, 130, 3, 131,
	3, 131, 5, 131, 1756, 10, 131, 3, 132, 3, 132, 3, 132, 3, 132, 7, 132,
	1762, 10, 132, 12, 132, 14, 132, 1765, 11, 132, 3, 132, 3, 132, 3, 132,
	3, 133, 3, 133, 3, 134, 5, 134, 1773, 10, 134, 3, 134, 3, 134, 3, 134,
	7, 134, 1778, 10, 134, 12, 134, 14, 134, 1781, 11, 134, 3, 135, 3, 135,
	3, 135, 3, 135, 3, 135, 3, 135, 3, 135, 3, 135, 3, 135, 3, 135, 3, 135,
	3, 135, 3, 135, 3, 135, 3, 135, 3, 135, 5, 135, 1799, 10, 135, 3, 136,
	3, 136, 3, 137, 3, 137, 5, 137, 1805, 10, 137, 3, 138, 3, 138, 3, 138,
	3, 139, 3, 139, 5, 139, 1812, 10, 139, 3, 140, 3, 140, 5, 140, 1816, 10,
	140, 3, 141, 3, 141, 5, 141, 1820, 10, 141, 3, 142, 3, 142, 5, 142, 1824,
	10, 142, 3, 143, 3, 143, 5, 143, 1828, 10, 143, 3, 144, 3, 144, 5, 144,
	1832, 10, 144, 3, 145, 3, 145, 3, 146, 3, 146, 3, 147, 3, 147, 3, 147,
	3, 147, 5, 147, 1842, 10, 147, 3, 148, 3, 148, 3, 149, 3, 149, 7, 149,
	1848, 10, 149, 12, 149, 14, 149, 1851, 11, 149, 3, 150, 3, 150, 7, 150,
	1855, 10, 150, 12, 150, 14, 150, 1858, 11, 150, 3, 151, 7, 151, 1861, 10,
	151, 12, 151, 14, 151, 1864, 11, 151, 3, 151, 3, 151, 3, 152, 3, 152, 3,
	153, 3, 153, 3, 154, 3, 154, 7, 154, 1874, 10, 154, 12, 154, 14, 154, 1877,
	11, 154, 3, 155, 7, 155, 1880, 10, 155, 12, 155, 14, 155, 1883, 11, 155,
	3, 155, 3, 155, 3, 155, 2, 3, 132, 156, 2, 4, 6, 8, 10, 12, 14, 16, 18,
	20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54,
	56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90,
	92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120,
	122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150,
	152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180,
	182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210,
	212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240,
	242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270,
	272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300,
	302, 304, 306, 308, 2, 14, 4, 2, 35, 35, 37, 37, 4, 2, 27, 28, 40, 41,
	3, 2, 4, 5, 3, 2, 4, 16, 4, 2, 26, 26, 29, 29, 5, 2, 26, 29, 40, 41, 61,
	62, 4, 2, 20, 24, 39, 39, 3, 2, 55, 56, 3, 2, 57, 59, 3, 2, 17, 19, 3,
	2, 87, 88, 4, 2, 42, 42, 93, 93, 2, 2024, 2, 311, 3, 2, 2, 2, 4, 318, 3,
	2, 2, 2, 6, 337, 3, 2, 2, 2, 8, 350, 3, 2, 2, 2, 10, 374, 3, 2, 2, 2, 12,
	376, 3, 2, 2, 2, 14, 381, 3, 2, 2, 2, 16, 387, 3, 2, 2, 2, 18, 408, 3,
	2, 2, 2, 20, 419, 3, 2, 2, 2, 22, 435, 3, 2, 2, 2, 24, 454, 3, 2, 2, 2,
	26, 468, 3, 2, 2, 2, 28, 496, 3, 2, 2, 2, 30, 517, 3, 2, 2, 2, 32, 519,
	3, 2, 2, 2, 34, 524, 3, 2, 2, 2, 36, 550, 3, 2, 2, 2, 38, 565, 3, 2, 2,
	2, 40, 581, 3, 2, 2, 2, 42, 589, 3, 2, 2, 2, 44, 613, 3, 2, 2, 2, 46, 616,
	3, 2, 2, 2, 48, 647, 3, 2, 2, 2, 50, 664, 3, 2, 2, 2, 52, 688, 3, 2, 2,
	2, 54, 691, 3, 2, 2, 2, 56, 722, 3, 2, 2, 2, 58, 740, 3, 2, 2, 2, 60, 761,
	3, 2, 2, 2, 62, 764, 3, 2, 2, 2, 64, 779, 3, 2, 2, 2, 66, 782, 3, 2, 2,
	2, 68, 801, 3, 2, 2, 2, 70, 826, 3, 2, 2, 2, 72, 833, 3, 2, 2, 2, 74, 844,
	3, 2, 2, 2, 76, 854, 3, 2, 2, 2, 78, 859, 3, 2, 2, 2, 80, 887, 3, 2, 2,
	2, 82, 889, 3, 2, 2, 2, 84, 898, 3, 2, 2, 2, 86, 923, 3, 2, 2, 2, 88, 944,
	3, 2, 2, 2, 90, 946, 3, 2, 2, 2, 92, 956, 3, 2, 2, 2, 94, 967, 3, 2, 2,
	2, 96, 977, 3, 2, 2, 2, 98, 990, 3, 2, 2, 2, 100, 1009, 3, 2, 2, 2, 102,
	1021, 3, 2, 2, 2, 104, 1032, 3, 2, 2, 2, 106, 1036, 3, 2, 2, 2, 108, 1074,
	3, 2, 2, 2, 110, 1076, 3, 2, 2, 2, 112, 1090, 3, 2, 2, 2, 114, 1101, 3,
	2, 2, 2, 116, 1111, 3, 2, 2, 2, 118, 1133, 3, 2, 2, 2, 120, 1135, 3, 2,
	2, 2, 122, 1146, 3, 2, 2, 2, 124, 1151, 3, 2, 2, 2, 126, 1159, 3, 2, 2,
	2, 128, 1164, 3, 2, 2, 2, 130, 1177, 3, 2, 2, 2, 132, 1196, 3, 2, 2, 2,
	134, 1239, 3, 2, 2, 2, 136, 1252, 3, 2, 2, 2, 138, 1266, 3, 2, 2, 2, 140,
	1275, 3, 2, 2, 2, 142, 1279, 3, 2, 2, 2, 144, 1288, 3, 2, 2, 2, 146, 1297,
	3, 2, 2, 2, 148, 1315, 3, 2, 2, 2, 150, 1321, 3, 2, 2, 2, 152, 1323, 3,
	2, 2, 2, 154, 1327, 3, 2, 2, 2, 156, 1334, 3, 2, 2, 2, 158, 1344, 3, 2,
	2, 2, 160, 1359, 3, 2, 2, 2, 162, 1368, 3, 2, 2, 2, 164, 1373, 3, 2, 2,
	2, 166, 1382, 3, 2, 2, 2, 168, 1386, 3, 2, 2, 2, 170, 1395, 3, 2, 2, 2,
	172, 1408, 3, 2, 2, 2, 174, 1417, 3, 2, 2, 2, 176, 1420, 3, 2, 2, 2, 178,
	1432, 3, 2, 2, 2, 180, 1448, 3, 2, 2, 2, 182, 1460, 3, 2, 2, 2, 184, 1468,
	3, 2, 2, 2, 186, 1470, 3, 2, 2, 2, 188, 1474, 3, 2, 2, 2, 190, 1477, 3,
	2, 2, 2, 192, 1487, 3, 2, 2, 2, 194, 1492, 3, 2, 2, 2, 196, 1504, 3, 2,
	2, 2, 198, 1516, 3, 2, 2, 2, 200, 1521, 3, 2, 2, 2, 202, 1566, 3, 2, 2,
	2, 204, 1568, 3, 2, 2, 2, 206, 1577, 3, 2, 2, 2, 208, 1579, 3, 2, 2, 2,
	210, 1591, 3, 2, 2, 2, 212, 1595, 3, 2, 2, 2, 214, 1615, 3, 2, 2, 2, 216,
	1627, 3, 2, 2, 2, 218, 1630, 3, 2, 2, 2, 220, 1633, 3, 2, 2, 2, 222, 1653,
	3, 2, 2, 2, 224, 1663, 3, 2, 2, 2, 226, 1665, 3, 2, 2, 2, 228, 1667, 3,
	2, 2, 2, 230, 1669, 3, 2, 2, 2, 232, 1675, 3, 2, 2, 2, 234, 1686, 3, 2,
	2, 2, 236, 1688, 3, 2, 2, 2, 238, 1692, 3, 2, 2, 2, 240, 1704, 3, 2, 2,
	2, 242, 1706, 3, 2, 2, 2, 244, 1711, 3, 2, 2, 2, 246, 1717, 3, 2, 2, 2,
	248, 1719, 3, 2, 2, 2, 250, 1730, 3, 2, 2, 2, 252, 1735, 3, 2, 2, 2, 254,
	1739, 3, 2, 2, 2, 256, 1743, 3, 2, 2, 2, 258, 1748, 3, 2, 2, 2, 260, 1753,
	3, 2, 2, 2, 262, 1757, 3, 2, 2, 2, 264, 1769, 3, 2, 2, 2, 266, 1772, 3,
	2, 2, 2, 268, 1798, 3, 2, 2, 2, 270, 1800, 3, 2, 2, 2, 272, 1804, 3, 2,
	2, 2, 274, 1806, 3, 2, 2, 2, 276, 1809, 3, 2, 2, 2, 278, 1813, 3, 2, 2,
	2, 280, 1817, 3, 2, 2, 2, 282, 1821, 3, 2, 2, 2, 284, 1825, 3, 2, 2, 2,
	286, 1829, 3, 2, 2, 2, 288, 1833, 3, 2, 2, 2, 290, 1835, 3, 2, 2, 2, 292,
	1841, 3, 2, 2, 2, 294, 1843, 3, 2, 2, 2, 296, 1845, 3, 2, 2, 2, 298, 1852,
	3, 2, 2, 2, 300, 1862, 3, 2, 2, 2, 302, 1867, 3, 2, 2, 2, 304, 1869, 3,
	2, 2, 2, 306, 1871, 3, 2, 2, 2, 308, 1881, 3, 2, 2, 2, 310, 312, 5, 4,
	3, 2, 311, 310, 3, 2, 2, 2, 312, 313, 3, 2, 2, 2, 313, 311, 3, 2, 2, 2,
	313, 314, 3, 2, 2, 2, 314, 3, 3, 2, 2, 2, 315, 317, 7, 93, 2, 2, 316, 315,
	3, 2, 2, 2, 317, 320, 3, 2, 2, 2, 318, 316, 3, 2, 2, 2, 318, 319, 3, 2,
	2, 2, 319, 322, 3, 2, 2, 2, 320, 318, 3, 2, 2, 2, 321, 323, 5, 140, 71,
	2, 322, 321, 3, 2, 2, 2, 322, 323, 3, 2, 2, 2, 323, 324, 3, 2, 2, 2, 324,
	328, 5, 6, 4, 2, 325, 327, 7, 93, 2, 2, 326, 325, 3, 2, 2, 2, 327, 330,
	3, 2, 2, 2, 328, 326, 3, 2, 2, 2, 328, 329, 3, 2, 2, 2, 329, 334, 3, 2,
	2, 2, 330, 328, 3, 2, 2, 2, 331, 333, 5, 10, 6, 2, 332, 331, 3, 2, 2, 2,
	333, 336, 3, 2, 2, 2, 334, 332, 3, 2, 2, 2, 334, 335, 3, 2, 2, 2, 335,
	5, 3, 2, 2, 2, 336, 334, 3, 2, 2, 2, 337, 338, 7, 85, 2, 2, 338, 343, 5,
	298, 150, 2, 339, 342, 5, 8, 5, 2, 340, 342, 7, 93, 2, 2, 341, 339, 3,
	2, 2, 2, 341, 340, 3, 2, 2, 2, 342, 345, 3, 2, 2, 2, 343, 341, 3, 2, 2,
	2, 343, 344, 3, 2, 2, 2, 344, 346, 3, 2, 2, 2, 345, 343, 3, 2, 2, 2, 346,
	347, 5, 300, 151, 2, 347, 348, 5, 294, 148, 2, 348, 7, 3, 2, 2, 2, 349,
	351, 5, 140, 71, 2, 350, 349, 3, 2, 2, 2, 350, 351, 3, 2, 2, 2, 351, 352,
	3, 2, 2, 2, 352, 357, 7, 85, 2, 2, 353, 355, 5, 290, 146, 2, 354, 356,
	5, 286, 144, 2, 355, 354, 3, 2, 2, 2, 355, 356, 3, 2, 2, 2, 356, 358, 3,
	2, 2, 2, 357, 353, 3, 2, 2, 2, 357, 358, 3, 2, 2, 2, 358, 359, 3, 2, 2,
	2, 359, 360, 5, 294, 148, 2, 360, 9, 3, 2, 2, 2, 361, 375, 5, 20, 11, 2,
	362, 375, 5, 22, 12, 2, 363, 375, 5, 26, 14, 2, 364, 375, 5, 24, 13, 2,
	365, 375, 5, 28, 15, 2, 366, 375, 5, 58, 30, 2, 367, 375, 5, 42, 22, 2,
	368, 375, 5, 50, 26, 2, 369, 375, 5, 34, 18, 2, 370, 375, 5, 16, 9, 2,
	371, 375, 5, 12, 7, 2, 372, 375, 5, 14, 8, 2, 373, 375, 7, 93, 2, 2, 374,
	361, 3, 2, 2, 2, 374, 362, 3, 2, 2, 2, 374, 363, 3, 2, 2, 2, 374, 364,
	3, 2, 2, 2, 374, 365, 3, 2, 2, 2, 374, 366, 3, 2, 2, 2, 374, 367, 3, 2,
	2, 2, 374, 368, 3, 2, 2, 2, 374, 369, 3, 2, 2, 2, 374, 370, 3, 2, 2, 2,
	374, 371, 3, 2, 2, 2, 374, 372, 3, 2, 2, 2, 374, 373, 3, 2, 2, 2, 375,
	11, 3, 2, 2, 2, 376, 377, 5, 290, 146, 2, 377, 378, 7, 34, 2, 2, 378, 379,
	5, 246, 124, 2, 379, 380, 5, 294, 148, 2, 380, 13, 3, 2, 2, 2, 381, 382,
	5, 290, 146, 2, 382, 383, 7, 35, 2, 2, 383, 384, 5, 246, 124, 2, 384, 385,
	5, 294, 148, 2, 385, 15, 3, 2, 2, 2, 386, 388, 5, 140, 71, 2, 387, 386,
	3, 2, 2, 2, 387, 388, 3, 2, 2, 2, 388, 389, 3, 2, 2, 2, 389, 390, 5, 290,
	146, 2, 390, 394, 7, 35, 2, 2, 391, 393, 7, 93, 2, 2, 392, 391, 3, 2, 2,
	2, 393, 396, 3, 2, 2, 2, 394, 392, 3, 2, 2, 2, 394, 395, 3, 2, 2, 2, 395,
	397, 3, 2, 2, 2, 396, 394, 3, 2, 2, 2, 397, 398, 5, 246, 124, 2, 398, 402,
	5, 306, 154, 2, 399, 401, 5, 18, 10, 2, 400, 399, 3, 2, 2, 2, 401, 404,
	3, 2, 2, 2, 402, 400, 3, 2, 2, 2, 402, 403, 3, 2, 2, 2, 403, 405, 3, 2,
	2, 2, 404, 402, 3, 2, 2, 2, 405, 406, 5, 308, 155, 2, 406, 407, 5, 294,
	148, 2, 407, 17, 3, 2, 2, 2, 408, 414, 5, 290, 146, 2, 409, 411, 7, 39,
	2, 2, 410, 412, 5, 280, 141, 2, 411, 410, 3, 2, 2, 2, 411, 412, 3, 2, 2,
	2, 412, 413, 3, 2, 2, 2, 413, 415, 5, 238, 120, 2, 414, 409, 3, 2, 2, 2,
	414, 415, 3, 2, 2, 2, 415, 416, 3, 2, 2, 2, 416, 417, 5, 294, 148, 2, 417,
	19, 3, 2, 2, 2, 418, 420, 5, 140, 71, 2, 419, 418, 3, 2, 2, 2, 419, 420,
	3, 2, 2, 2, 420, 421, 3, 2, 2, 2, 421, 430, 5, 290, 146, 2, 422, 423, 7,
	25, 2, 2, 423, 431, 5, 132, 67, 2, 424, 425, 7, 50, 2, 2, 425, 428, 5,
	246, 124, 2, 426, 427, 7, 39, 2, 2, 427, 429, 5, 132, 67, 2, 428, 426,
	3, 2, 2, 2, 428, 429, 3, 2, 2, 2, 429, 431, 3, 2, 2, 2, 430, 422, 3, 2,
	2, 2, 430, 424, 3, 2, 2, 2, 431, 432, 3, 2, 2, 2, 432, 433, 5, 294, 148,
	2, 433, 21, 3, 2, 2, 2, 434, 436, 5, 140, 71, 2, 435, 434, 3, 2, 2, 2,
	435, 436, 3, 2, 2, 2, 436, 437, 3, 2, 2, 2, 437, 438, 5, 290, 146, 2, 438,
	439, 7, 50, 2, 2, 439, 442, 5, 246, 124, 2, 440, 441, 7, 39, 2, 2, 441,
	443, 5, 132, 67, 2, 442, 440, 3, 2, 2, 2, 442, 443, 3, 2, 2, 2, 443, 444,
	3, 2, 2, 2, 444, 446, 5, 298, 150, 2, 445, 447, 5, 38, 20, 2, 446, 445,
	3, 2, 2, 2, 447, 448, 3, 2, 2, 2, 448, 446, 3, 2, 2, 2, 448, 449, 3, 2,
	2, 2, 449, 450, 3, 2, 2, 2, 450, 451, 5, 300, 151, 2, 451, 452, 5, 294,
	148, 2, 452, 23, 3, 2, 2, 2, 453, 455, 5, 140, 71, 2, 454, 453, 3, 2, 2,
	2, 454, 455, 3, 2, 2, 2, 455, 456, 3, 2, 2, 2, 456, 462, 5, 290, 146, 2,
	457, 458, 7, 50, 2, 2, 458, 459, 5, 246, 124, 2, 459, 460, 7, 50, 2, 2,
	460, 463, 3, 2, 2, 2, 461, 463, 7, 49, 2, 2, 462, 457, 3, 2, 2, 2, 462,
	461, 3, 2, 2, 2, 463, 464, 3, 2, 2, 2, 464, 465, 5, 132, 67, 2, 465, 466,
	5, 294, 148, 2, 466, 25, 3, 2, 2, 2, 467, 469, 5, 140, 71, 2, 468, 467,
	3, 2, 2, 2, 468, 469, 3, 2, 2, 2, 469, 470, 3, 2, 2, 2, 470, 472, 5, 290,
	146, 2, 471, 473, 5, 196, 99, 2, 472, 471, 3, 2, 2, 2, 472, 473, 3, 2,
	2, 2, 473, 474, 3, 2, 2, 2, 474, 475, 5, 302, 152, 2, 475, 476, 5, 72,
	37, 2, 476, 480, 9, 2, 2, 2, 477, 479, 7, 93, 2, 2, 478, 477, 3, 2, 2,
	2, 479, 482, 3, 2, 2, 2, 480, 478, 3, 2, 2, 2, 480, 481, 3, 2, 2, 2, 481,
	483, 3, 2, 2, 2, 482, 480, 3, 2, 2, 2, 483, 484, 5, 74, 38, 2, 484, 485,
	5, 304, 153, 2, 485, 489, 5, 298, 150, 2, 486, 488, 5, 80, 41, 2, 487,
	486, 3, 2, 2, 2, 488, 491, 3, 2, 2, 2, 489, 487, 3, 2, 2, 2, 489, 490,
	3, 2, 2, 2, 490, 492, 3, 2, 2, 2, 491, 489, 3, 2, 2, 2, 492, 493, 5, 300,
	151, 2, 493, 494, 5, 294, 148, 2, 494, 27, 3, 2, 2, 2, 495, 497, 5, 140,
	71, 2, 496, 495, 3, 2, 2, 2, 496, 497, 3, 2, 2, 2, 497, 498, 3, 2, 2, 2,
	498, 500, 5, 290, 146, 2, 499, 501, 5, 196, 99, 2, 500, 499, 3, 2, 2, 2,
	500, 501, 3, 2, 2, 2, 501, 502, 3, 2, 2, 2, 502, 503, 7, 35, 2, 2, 503,
	507, 5, 298, 150, 2, 504, 506, 5, 30, 16, 2, 505, 504, 3, 2, 2, 2, 506,
	509, 3, 2, 2, 2, 507, 505, 3, 2, 2, 2, 507, 508, 3, 2, 2, 2, 508, 510,
	3, 2, 2, 2, 509, 507, 3, 2, 2, 2, 510, 511, 5, 300, 151, 2, 511, 512, 5,
	294, 148, 2, 512, 29, 3, 2, 2, 2, 513, 518, 5, 32, 17, 2, 514, 518, 5,
	36, 19, 2, 515, 518, 5, 40, 21, 2, 516, 518, 7, 93, 2, 2, 517, 513, 3,
	2, 2, 2, 517, 514, 3, 2, 2, 2, 517, 515, 3, 2, 2, 2, 517, 516, 3, 2, 2,
	2, 518, 31, 3, 2, 2, 2, 519, 520, 7, 50, 2, 2, 520, 521, 5, 246, 124, 2,
	521, 522, 5, 294, 148, 2, 522, 33, 3, 2, 2, 2, 523, 525, 5, 140, 71, 2,
	524, 523, 3, 2, 2, 2, 524, 525, 3, 2, 2, 2, 525, 526, 3, 2, 2, 2, 526,
	527, 5, 76, 39, 2, 527, 528, 7, 40, 2, 2, 528, 529, 7, 41, 2, 2, 529, 530,
	5, 302, 152, 2, 530, 531, 5, 72, 37, 2, 531, 538, 5, 304, 153, 2, 532,
	534, 5, 302, 152, 2, 533, 535, 5, 138, 70, 2, 534, 533, 3, 2, 2, 2, 534,
	535, 3, 2, 2, 2, 535, 536, 3, 2, 2, 2, 536, 537, 5, 304, 153, 2, 537, 539,
	3, 2, 2, 2, 538, 532, 3, 2, 2, 2, 538, 539, 3, 2, 2, 2, 539, 540, 3, 2,
	2, 2, 540, 544, 5, 298, 150, 2, 541, 543, 5, 80, 41, 2, 542, 541, 3, 2,
	2, 2, 543, 546, 3, 2, 2, 2, 544, 542, 3, 2, 2, 2, 544, 545, 3, 2, 2, 2,
	545, 547, 3, 2, 2, 2, 546, 544, 3, 2, 2, 2, 547, 548, 5, 300, 151, 2, 548,
	35, 3, 2, 2, 2, 549, 551, 5, 140, 71, 2, 550, 549, 3, 2, 2, 2, 550, 551,
	3, 2, 2, 2, 551, 552, 3, 2, 2, 2, 552, 561, 5, 290, 146, 2, 553, 554, 7,
	25, 2, 2, 554, 562, 5, 132, 67, 2, 555, 556, 7, 50, 2, 2, 556, 559, 5,
	246, 124, 2, 557, 558, 7, 39, 2, 2, 558, 560, 5, 132, 67, 2, 559, 557,
	3, 2, 2, 2, 559, 560, 3, 2, 2, 2, 560, 562, 3, 2, 2, 2, 561, 553, 3, 2,
	2, 2, 561, 555, 3, 2, 2, 2, 562, 563, 3, 2, 2, 2, 563, 564, 5, 294, 148,
	2, 564, 37, 3, 2, 2, 2, 565, 570, 5, 290, 146, 2, 566, 567, 5, 302, 152,
	2, 567, 568, 5, 290, 146, 2, 568, 569, 5, 304, 153, 2, 569, 571, 3, 2,
	2, 2, 570, 566, 3, 2, 2, 2, 570, 571, 3, 2, 2, 2, 571, 572, 3, 2, 2, 2,
	572, 574, 5, 298, 150, 2, 573, 575, 5, 80, 41, 2, 574, 573, 3, 2, 2, 2,
	575, 576, 3, 2, 2, 2, 576, 574, 3, 2, 2, 2, 576, 577, 3, 2, 2, 2, 577,
	578, 3, 2, 2, 2, 578, 579, 5, 300, 151, 2, 579, 580, 5, 294, 148, 2, 580,
	39, 3, 2, 2, 2, 581, 582, 5, 290, 146, 2, 582, 583, 7, 50, 2, 2, 583, 584,
	5, 306, 154, 2, 584, 585, 7, 51, 2, 2, 585, 586, 5, 308, 155, 2, 586, 587,
	5, 192, 97, 2, 587, 588, 5, 294, 148, 2, 588, 41, 3, 2, 2, 2, 589, 590,
	5, 76, 39, 2, 590, 592, 7, 35, 2, 2, 591, 593, 5, 246, 124, 2, 592, 591,
	3, 2, 2, 2, 592, 593, 3, 2, 2, 2, 593, 597, 3, 2, 2, 2, 594, 596, 7, 93,
	2, 2, 595, 594, 3, 2, 2, 2, 596, 599, 3, 2, 2, 2, 597, 595, 3, 2, 2, 2,
	597, 598, 3, 2, 2, 2, 598, 600, 3, 2, 2, 2, 599, 597, 3, 2, 2, 2, 600,
	604, 5, 298, 150, 2, 601, 603, 5, 44, 23, 2, 602, 601, 3, 2, 2, 2, 603,
	606, 3, 2, 2, 2, 604, 602, 3, 2, 2, 2, 604, 605, 3, 2, 2, 2, 605, 607,
	3, 2, 2, 2, 606, 604, 3, 2, 2, 2, 607, 608, 5, 300, 151, 2, 608, 609, 5,
	294, 148, 2, 609, 43, 3, 2, 2, 2, 610, 614, 5, 46, 24, 2, 611, 614, 5,
	48, 25, 2, 612, 614, 7, 93, 2, 2, 613, 610, 3, 2, 2, 2, 613, 611, 3, 2,
	2, 2, 613, 612, 3, 2, 2, 2, 614, 45, 3, 2, 2, 2, 615, 617, 5, 140, 71,
	2, 616, 615, 3, 2, 2, 2, 616, 617, 3, 2, 2, 2, 617, 619, 3, 2, 2, 2, 618,
	620, 7, 89, 2, 2, 619, 618, 3, 2, 2, 2, 619, 620, 3, 2, 2, 2, 620, 621,
	3, 2, 2, 2, 621, 623, 5, 290, 146, 2, 622, 624, 5, 196, 99, 2, 623, 622,
	3, 2, 2, 2, 623, 624, 3, 2, 2, 2, 624, 625, 3, 2, 2, 2, 625, 626, 5, 302,
	152, 2, 626, 627, 5, 72, 37, 2, 627, 631, 9, 2, 2, 2, 628, 630, 7, 93,
	2, 2, 629, 628, 3, 2, 2, 2, 630, 633, 3, 2, 2, 2, 631, 629, 3, 2, 2, 2,
	631, 632, 3, 2, 2, 2, 632, 634, 3, 2, 2, 2, 633, 631, 3, 2, 2, 2, 634,
	635, 5, 74, 38, 2, 635, 636, 5, 304, 153, 2, 636, 640, 5, 298, 150, 2,
	637, 639, 5, 80, 41, 2, 638, 637, 3, 2, 2, 2, 639, 642, 3, 2, 2, 2, 640,
	638, 3, 2, 2, 2, 640, 641, 3, 2, 2, 2, 641, 643, 3, 2, 2, 2, 642, 640,
	3, 2, 2, 2, 643, 644, 5, 300, 151, 2, 644, 645, 5, 294, 148, 2, 645, 47,
	3, 2, 2, 2, 646, 648, 5, 140, 71, 2, 647, 646, 3, 2, 2, 2, 647, 648, 3,
	2, 2, 2, 648, 650, 3, 2, 2, 2, 649, 651, 7, 89, 2, 2, 650, 649, 3, 2, 2,
	2, 650, 651, 3, 2, 2, 2, 651, 652, 3, 2, 2, 2, 652, 653, 5, 290, 146, 2,
	653, 654, 7, 50, 2, 2, 654, 655, 5, 246, 124, 2, 655, 657, 5, 298, 150,
	2, 656, 658, 5, 38, 20, 2, 657, 656, 3, 2, 2, 2, 658, 659, 3, 2, 2, 2,
	659, 657, 3, 2, 2, 2, 659, 660, 3, 2, 2, 2, 660, 661, 3, 2, 2, 2, 661,
	662, 5, 300, 151, 2, 662, 663, 5, 294, 148, 2, 663, 49, 3, 2, 2, 2, 664,
	665, 5, 302, 152, 2, 665, 666, 5, 290, 146, 2, 666, 667, 5, 304, 153, 2,
	667, 668, 5, 76, 39, 2, 668, 672, 7, 35, 2, 2, 669, 671, 7, 93, 2, 2, 670,
	669, 3, 2, 2, 2, 671, 674, 3, 2, 2, 2, 672, 670, 3, 2, 2, 2, 672, 673,
	3, 2, 2, 2, 673, 675, 3, 2, 2, 2, 674, 672, 3, 2, 2, 2, 675, 679, 5, 298,
	150, 2, 676, 678, 5, 52, 27, 2, 677, 676, 3, 2, 2, 2, 678, 681, 3, 2, 2,
	2, 679, 677, 3, 2, 2, 2, 679, 680, 3, 2, 2, 2, 680, 682, 3, 2, 2, 2, 681,
	679, 3, 2, 2, 2, 682, 683, 5, 300, 151, 2, 683, 684, 5, 294, 148, 2, 684,
	51, 3, 2, 2, 2, 685, 689, 5, 54, 28, 2, 686, 689, 5, 56, 29, 2, 687, 689,
	7, 93, 2, 2, 688, 685, 3, 2, 2, 2, 688, 686, 3, 2, 2, 2, 688, 687, 3, 2,
	2, 2, 689, 53, 3, 2, 2, 2, 690, 692, 5, 140, 71, 2, 691, 690, 3, 2, 2,
	2, 691, 692, 3, 2, 2, 2, 692, 694, 3, 2, 2, 2, 693, 695, 7, 89, 2, 2, 694,
	693, 3, 2, 2, 2, 694, 695, 3, 2, 2, 2, 695, 696, 3, 2, 2, 2, 696, 698,
	5, 290, 146, 2, 697, 699, 5, 196, 99, 2, 698, 697, 3, 2, 2, 2, 698, 699,
	3, 2, 2, 2, 699, 700, 3, 2, 2, 2, 700, 701, 5, 302, 152, 2, 701, 702, 5,
	72, 37, 2, 702, 706, 9, 2, 2, 2, 703, 705, 7, 93, 2, 2, 704, 703, 3, 2,
	2, 2, 705, 708, 3, 2, 2, 2, 706, 704, 3, 2, 2, 2, 706, 707, 3, 2, 2, 2,
	707, 709, 3, 2, 2, 2, 708, 706, 3, 2, 2, 2, 709, 710, 5, 74, 38, 2, 710,
	711, 5, 304, 153, 2, 711, 715, 5, 298, 150, 2, 712, 714, 5, 80, 41, 2,
	713, 712, 3, 2, 2, 2, 714, 717, 3, 2, 2, 2, 715, 713, 3, 2, 2, 2, 715,
	716, 3, 2, 2, 2, 716, 718, 3, 2, 2, 2, 717, 715, 3, 2, 2, 2, 718, 719,
	5, 300, 151, 2, 719, 720, 5, 294, 148, 2, 720, 55, 3, 2, 2, 2, 721, 723,
	5, 140, 71, 2, 722, 721, 3, 2, 2, 2, 722, 723, 3, 2, 2, 2, 723, 725, 3,
	2, 2, 2, 724, 726, 7, 89, 2, 2, 725, 724, 3, 2, 2, 2, 725, 726, 3, 2, 2,
	2, 726, 727, 3, 2, 2, 2, 727, 728, 5, 290, 146, 2, 728, 729, 7, 50, 2,
	2, 729, 730, 5, 246, 124, 2, 730, 732, 5, 298, 150, 2, 731, 733, 5, 38,
	20, 2, 732, 731, 3, 2, 2, 2, 733, 734, 3, 2, 2, 2, 734, 732, 3, 2, 2, 2,
	734, 735, 3, 2, 2, 2, 735, 736, 3, 2, 2, 2, 736, 737, 5, 300, 151, 2, 737,
	738, 5, 294, 148, 2, 738, 57, 3, 2, 2, 2, 739, 741, 5, 140, 71, 2, 740,
	739, 3, 2, 2, 2, 740, 741, 3, 2, 2, 2, 741, 742, 3, 2, 2, 2, 742, 744,
	5, 290, 146, 2, 743, 745, 5, 196, 99, 2, 744, 743, 3, 2, 2, 2, 744, 745,
	3, 2, 2, 2, 745, 746, 3, 2, 2, 2, 746, 747, 7, 36, 2, 2, 747, 751, 5, 298,
	150, 2, 748, 750, 5, 60, 31, 2, 749, 748, 3, 2, 2, 2, 750, 753, 3, 2, 2,
	2, 751, 749, 3, 2, 2, 2, 751, 752, 3, 2, 2, 2, 752, 754, 3, 2, 2, 2, 753,
	751, 3, 2, 2, 2, 754, 755, 5, 300, 151, 2, 755, 756, 5, 294, 148, 2, 756,
	59, 3, 2, 2, 2, 757, 762, 5, 32, 17, 2, 758, 762, 5, 66, 34, 2, 759, 762,
	5, 62, 32, 2, 760, 762, 7, 93, 2, 2, 761, 757, 3, 2, 2, 2, 761, 758, 3,
	2, 2, 2, 761, 759, 3, 2, 2, 2, 761, 760, 3, 2, 2, 2, 762, 61, 3, 2, 2,
	2, 763, 765, 5, 140, 71, 2, 764, 763, 3, 2, 2, 2, 764, 765, 3, 2, 2, 2,
	765, 766, 3, 2, 2, 2, 766, 767, 5, 290, 146, 2, 767, 768, 7, 50, 2, 2,
	768, 769, 5, 246, 124, 2, 769, 773, 5, 298, 150, 2, 770, 772, 5, 64, 33,
	2, 771, 770, 3, 2, 2, 2, 772, 775, 3, 2, 2, 2, 773, 771, 3, 2, 2, 2, 773,
	774, 3, 2, 2, 2, 774, 776, 3, 2, 2, 2, 775, 773, 3, 2, 2, 2, 776, 777,
	5, 300, 151, 2, 777, 778, 5, 294, 148, 2, 778, 63, 3, 2, 2, 2, 779, 780,
	5, 290, 146, 2, 780, 65, 3, 2, 2, 2, 781, 783, 5, 140, 71, 2, 782, 781,
	3, 2, 2, 2, 782, 783, 3, 2, 2, 2, 783, 784, 3, 2, 2, 2, 784, 786, 5, 290,
	146, 2, 785, 787, 5, 196, 99, 2, 786, 785, 3, 2, 2, 2, 786, 787, 3, 2,
	2, 2, 787, 788, 3, 2, 2, 2, 788, 789, 5, 302, 152, 2, 789, 790, 5, 72,
	37, 2, 790, 794, 9, 2, 2, 2, 791, 793, 7, 93, 2, 2, 792, 791, 3, 2, 2,
	2, 793, 796, 3, 2, 2, 2, 794, 792, 3, 2, 2, 2, 794, 795, 3, 2, 2, 2, 795,
	797, 3, 2, 2, 2, 796, 794, 3, 2, 2, 2, 797, 798, 5, 74, 38, 2, 798, 799,
	5, 304, 153, 2, 799, 800, 5, 294, 148, 2, 800, 67, 3, 2, 2, 2, 801, 803,
	5, 290, 146, 2, 802, 804, 5, 196, 99, 2, 803, 802, 3, 2, 2, 2, 803, 804,
	3, 2, 2, 2, 804, 805, 3, 2, 2, 2, 805, 806, 5, 302, 152, 2, 806, 807, 5,
	72, 37, 2, 807, 811, 9, 2, 2, 2, 808, 810, 7, 93, 2, 2, 809, 808, 3, 2,
	2, 2, 810, 813, 3, 2, 2, 2, 811, 809, 3, 2, 2, 2, 811, 812, 3, 2, 2, 2,
	812, 814, 3, 2, 2, 2, 813, 811, 3, 2, 2, 2, 814, 815, 5, 74, 38, 2, 815,
	816, 5, 304, 153, 2, 816, 820, 5, 298, 150, 2, 817, 819, 5, 80, 41, 2,
	818, 817, 3, 2, 2, 2, 819, 822, 3, 2, 2, 2, 820, 818, 3, 2, 2, 2, 820,
	821, 3, 2, 2, 2, 821, 823, 3, 2, 2, 2, 822, 820, 3, 2, 2, 2, 823, 824,
	5, 300, 151, 2, 824, 825, 5, 294, 148, 2, 825, 69, 3, 2, 2, 2, 826, 828,
	7, 36, 2, 2, 827, 829, 5, 138, 70, 2, 828, 827, 3, 2, 2, 2, 828, 829, 3,
	2, 2, 2, 829, 830, 3, 2, 2, 2, 830, 831, 5, 294, 148, 2, 831, 71, 3, 2,
	2, 2, 832, 834, 5, 78, 40, 2, 833, 832, 3, 2, 2, 2, 833, 834, 3, 2, 2,
	2, 834, 840, 3, 2, 2, 2, 835, 836, 5, 296, 149, 2, 836, 837, 5, 78, 40,
	2, 837, 839, 3, 2, 2, 2, 838, 835, 3, 2, 2, 2, 839, 842, 3, 2, 2, 2, 840,
	838, 3, 2, 2, 2, 840, 841, 3, 2, 2, 2, 841, 73, 3, 2, 2, 2, 842, 840, 3,
	2, 2, 2, 843, 845, 5, 78, 40, 2, 844, 843, 3, 2, 2, 2, 844, 845, 3, 2,
	2, 2, 845, 851, 3, 2, 2, 2, 846, 847, 5, 296, 149, 2, 847, 848, 5, 78,
	40, 2, 848, 850, 3, 2, 2, 2, 849, 846, 3, 2, 2, 2, 850, 853, 3, 2, 2, 2,
	851, 849, 3, 2, 2, 2, 851, 852, 3, 2, 2, 2, 852, 75, 3, 2, 2, 2, 853, 851,
	3, 2, 2, 2, 854, 855, 5, 290, 146, 2, 855, 856, 7, 50, 2, 2, 856, 857,
	5, 246, 124, 2, 857, 77, 3, 2, 2, 2, 858, 860, 5, 140, 71, 2, 859, 858,
	3, 2, 2, 2, 859, 860, 3, 2, 2, 2, 860, 861, 3, 2, 2, 2, 861, 862, 5, 290,
	146, 2, 862, 863, 7, 50, 2, 2, 863, 866, 5, 246, 124, 2, 864, 865, 7, 39,
	2, 2, 865, 867, 5, 132, 67, 2, 866, 864, 3, 2, 2, 2, 866, 867, 3, 2, 2,
	2, 867, 79, 3, 2, 2, 2, 868, 888, 5, 70, 36, 2, 869, 888, 5, 82, 42, 2,
	870, 888, 5, 88, 45, 2, 871, 888, 5, 96, 49, 2, 872, 888, 5, 98, 50, 2,
	873, 888, 5, 100, 51, 2, 874, 888, 5, 102, 52, 2, 875, 888, 5, 104, 53,
	2, 876, 888, 5, 106, 54, 2, 877, 888, 5, 110, 56, 2, 878, 888, 5, 108,
	55, 2, 879, 888, 5, 116, 59, 2, 880, 888, 5, 68, 35, 2, 881, 888, 5, 120,
	61, 2, 882, 888, 5, 122, 62, 2, 883, 888, 5, 124, 63, 2, 884, 888, 5, 126,
	64, 2, 885, 888, 5, 128, 65, 2, 886, 888, 7, 93, 2, 2, 887, 868, 3, 2,
	2, 2, 887, 869, 3, 2, 2, 2, 887, 870, 3, 2, 2, 2, 887, 871, 3, 2, 2, 2,
	887, 872, 3, 2, 2, 2, 887, 873, 3, 2, 2, 2, 887, 874, 3, 2, 2, 2, 887,
	875, 3, 2, 2, 2, 887, 876, 3, 2, 2, 2, 887, 877, 3, 2, 2, 2, 887, 878,
	3, 2, 2, 2, 887, 879, 3, 2, 2, 2, 887, 880, 3, 2, 2, 2, 887, 881, 3, 2,
	2, 2, 887, 882, 3, 2, 2, 2, 887, 883, 3, 2, 2, 2, 887, 884, 3, 2, 2, 2,
	887, 885, 3, 2, 2, 2, 887, 886, 3, 2, 2, 2, 888, 81, 3, 2, 2, 2, 889, 890,
	5, 132, 67, 2, 890, 892, 7, 51, 2, 2, 891, 893, 5, 84, 43, 2, 892, 891,
	3, 2, 2, 2, 893, 894, 3, 2, 2, 2, 894, 892, 3, 2, 2, 2, 894, 895, 3, 2,
	2, 2, 895, 896, 3, 2, 2, 2, 896, 897, 5, 294, 148, 2, 897, 83, 3, 2, 2,
	2, 898, 904, 5, 86, 44, 2, 899, 900, 5, 296, 149, 2, 900, 901, 5, 86, 44,
	2, 901, 903, 3, 2, 2, 2, 902, 899, 3, 2, 2, 2, 903, 906, 3, 2, 2, 2, 904,
	902, 3, 2, 2, 2, 904, 905, 3, 2, 2, 2, 905, 907, 3, 2, 2, 2, 906, 904,
	3, 2, 2, 2, 907, 911, 5, 298, 150, 2, 908, 910, 5, 80, 41, 2, 909, 908,
	3, 2, 2, 2, 910, 913, 3, 2, 2, 2, 911, 909, 3, 2, 2, 2, 911, 912, 3, 2,
	2, 2, 912, 914, 3, 2, 2, 2, 913, 911, 3, 2, 2, 2, 914, 915, 5, 300, 151,
	2, 915, 85, 3, 2, 2, 2, 916, 924, 7, 89, 2, 2, 917, 924, 5, 132, 67, 2,
	918, 920, 5, 290, 146, 2, 919, 918, 3, 2, 2, 2, 919, 920, 3, 2, 2, 2, 920,
	921, 3, 2, 2, 2, 921, 922, 7, 50, 2, 2, 922, 924, 5, 246, 124, 2, 923,
	916, 3, 2, 2, 2, 923, 917, 3, 2, 2, 2, 923, 919, 3, 2, 2, 2, 924, 87, 3,
	2, 2, 2, 925, 929, 5, 92, 47, 2, 926, 928, 5, 94, 48, 2, 927, 926, 3, 2,
	2, 2, 928, 931, 3, 2, 2, 2, 929, 927, 3, 2, 2, 2, 929, 930, 3, 2, 2, 2,
	930, 932, 3, 2, 2, 2, 931, 929, 3, 2, 2, 2, 932, 933, 5, 90, 46, 2, 933,
	934, 5, 294, 148, 2, 934, 945, 3, 2, 2, 2, 935, 939, 5, 92, 47, 2, 936,
	938, 5, 94, 48, 2, 937, 936, 3, 2, 2, 2, 938, 941, 3, 2, 2, 2, 939, 937,
	3, 2, 2, 2, 939, 940, 3, 2, 2, 2, 940, 942, 3, 2, 2, 2, 941, 939, 3, 2,
	2, 2, 942, 943, 5, 294, 148, 2, 943, 945, 3, 2, 2, 2, 944, 925, 3, 2, 2,
	2, 944, 935, 3, 2, 2, 2, 945, 89, 3, 2, 2, 2, 946, 947, 7, 89, 2, 2, 947,
	951, 5, 298, 150, 2, 948, 950, 5, 80, 41, 2, 949, 948, 3, 2, 2, 2, 950,
	953, 3, 2, 2, 2, 951, 949, 3, 2, 2, 2, 951, 952, 3, 2, 2, 2, 952, 954,
	3, 2, 2, 2, 953, 951, 3, 2, 2, 2, 954, 955, 5, 300, 151, 2, 955, 91, 3,
	2, 2, 2, 956, 957, 7, 51, 2, 2, 957, 958, 5, 132, 67, 2, 958, 962, 5, 298,
	150, 2, 959, 961, 5, 80, 41, 2, 960, 959, 3, 2, 2, 2, 961, 964, 3, 2, 2,
	2, 962, 960, 3, 2, 2, 2, 962, 963, 3, 2, 2, 2, 963, 965, 3, 2, 2, 2, 964,
	962, 3, 2, 2, 2, 965, 966, 5, 300, 151, 2, 966, 93, 3, 2, 2, 2, 967, 968,
	5, 132, 67, 2, 968, 972, 5, 298, 150, 2, 969, 971, 5, 80, 41, 2, 970, 969,
	3, 2, 2, 2, 971, 974, 3, 2, 2, 2, 972, 970, 3, 2, 2, 2, 972, 973, 3, 2,
	2, 2, 973, 975, 3, 2, 2, 2, 974, 972, 3, 2, 2, 2, 975, 976, 5, 300, 151,
	2, 976, 95, 3, 2, 2, 2, 977, 978, 5, 118, 60, 2, 978, 979, 7, 52, 2, 2,
	979, 980, 5, 290, 146, 2, 980, 984, 5, 298, 150, 2, 981, 983, 5, 80, 41,
	2, 982, 981, 3, 2, 2, 2, 983, 986, 3, 2, 2, 2, 984, 982, 3, 2, 2, 2, 984,
	985, 3, 2, 2, 2, 985, 987, 3, 2, 2, 2, 986, 984, 3, 2, 2, 2, 987, 988,
	5, 300, 151, 2, 988, 989, 5, 294, 148, 2, 989, 97, 3, 2, 2, 2, 990, 991,
	5, 132, 67, 2, 991, 996, 7, 52, 2, 2, 992, 993, 7, 47, 2, 2, 993, 994,
	5, 290, 146, 2, 994, 995, 7, 48, 2, 2, 995, 997, 3, 2, 2, 2, 996, 992,
	3, 2, 2, 2, 996, 997, 3, 2, 2, 2, 997, 998, 3, 2, 2, 2, 998, 999, 5, 290,
	146, 2, 999, 1003, 5, 298, 150, 2, 1000, 1002, 5, 80, 41, 2, 1001, 1000,
	3, 2, 2, 2, 1002, 1005, 3, 2, 2, 2, 1003, 1001, 3, 2, 2, 2, 1003, 1004,
	3, 2, 2, 2, 1004, 1006, 3, 2, 2, 2, 1005, 1003, 3, 2, 2, 2, 1006, 1007,
	5, 300, 151, 2, 1007, 1008, 5, 294, 148, 2, 1008, 99, 3, 2, 2, 2, 1009,
	1010, 7, 52, 2, 2, 1010, 1011, 5, 132, 67, 2, 1011, 1015, 5, 298, 150,
	2, 1012, 1014, 5, 80, 41, 2, 1013, 1012, 3, 2, 2, 2, 1014, 1017, 3, 2,
	2, 2, 1015, 1013, 3, 2, 2, 2, 1015, 1016, 3, 2, 2, 2, 1016, 1018, 3, 2,
	2, 2, 1017, 1015, 3, 2, 2, 2, 1018, 1019, 5, 300, 151, 2, 1019, 1020, 5,
	294, 148, 2, 1020, 101, 3, 2, 2, 2, 1021, 1022, 7, 52, 2, 2, 1022, 1026,
	5, 298, 150, 2, 1023, 1025, 5, 80, 41, 2, 1024, 1023, 3, 2, 2, 2, 1025,
	1028, 3, 2, 2, 2, 1026, 1024, 3, 2, 2, 2, 1026, 1027, 3, 2, 2, 2, 1027,
	1029, 3, 2, 2, 2, 1028, 1026, 3, 2, 2, 2, 1029, 1030, 5, 300, 151, 2, 1030,
	1031, 5, 294, 148, 2, 1031, 103, 3, 2, 2, 2, 1032, 1033, 7, 36, 2, 2, 1033,
	1034, 7, 52, 2, 2, 1034, 1035, 5, 294, 148, 2, 1035, 105, 3, 2, 2, 2, 1036,
	1037, 7, 35, 2, 2, 1037, 1038, 7, 52, 2, 2, 1038, 1039, 5, 294, 148, 2,
	1039, 107, 3, 2, 2, 2, 1040, 1041, 7, 53, 2, 2, 1041, 1045, 5, 298, 150,
	2, 1042, 1044, 5, 80, 41, 2, 1043, 1042, 3, 2, 2, 2, 1044, 1047, 3, 2,
	2, 2, 1045, 1043, 3, 2, 2, 2, 1045, 1046, 3, 2, 2, 2, 1046, 1048, 3, 2,
	2, 2, 1047, 1045, 3, 2, 2, 2, 1048, 1052, 5, 300, 151, 2, 1049, 1051, 5,
	112, 57, 2, 1050, 1049, 3, 2, 2, 2, 1051, 1054, 3, 2, 2, 2, 1052, 1050,
	3, 2, 2, 2, 1052, 1053, 3, 2, 2, 2, 1053, 1055, 3, 2, 2, 2, 1054, 1052,
	3, 2, 2, 2, 1055, 1056, 5, 114, 58, 2, 1056, 1057, 5, 294, 148, 2, 1057,
	1075, 3, 2, 2, 2, 1058, 1059, 7, 53, 2, 2, 1059, 1063, 5, 298, 150, 2,
	1060, 1062, 5, 80, 41, 2, 1061, 1060, 3, 2, 2, 2, 1062, 1065, 3, 2, 2,
	2, 1063, 1061, 3, 2, 2, 2, 1063, 1064, 3, 2, 2, 2, 1064, 1066, 3, 2, 2,
	2, 1065, 1063, 3, 2, 2, 2, 1066, 1068, 5, 300, 151, 2, 1067, 1069, 5, 112,
	57, 2, 1068, 1067, 3, 2, 2, 2, 1069, 1070, 3, 2, 2, 2, 1070, 1068, 3, 2,
	2, 2, 1070, 1071, 3, 2, 2, 2, 1071, 1072, 3, 2, 2, 2, 1072, 1073, 5, 294,
	148, 2, 1073, 1075, 3, 2, 2, 2, 1074, 1040, 3, 2, 2, 2, 1074, 1058, 3,
	2, 2, 2, 1075, 109, 3, 2, 2, 2, 1076, 1077, 5, 132, 67, 2, 1077, 1078,
	7, 53, 2, 2, 1078, 1081, 5, 132, 67, 2, 1079, 1080, 7, 50, 2, 2, 1080,
	1082, 5, 246, 124, 2, 1081, 1079, 3, 2, 2, 2, 1081, 1082, 3, 2, 2, 2, 1082,
	1083, 3, 2, 2, 2, 1083, 1084, 5, 294, 148, 2, 1084, 111, 3, 2, 2, 2, 1085,
	1091, 5, 290, 146, 2, 1086, 1087, 5, 290, 146, 2, 1087, 1088, 7, 50, 2,
	2, 1088, 1089, 5, 246, 124, 2, 1089, 1091, 3, 2, 2, 2, 1090, 1085, 3, 2,
	2, 2, 1090, 1086, 3, 2, 2, 2, 1091, 1092, 3, 2, 2, 2, 1092, 1096, 5, 298,
	150, 2, 1093, 1095, 5, 80, 41, 2, 1094, 1093, 3, 2, 2, 2, 1095, 1098, 3,
	2, 2, 2, 1096, 1094, 3, 2, 2, 2, 1096, 1097, 3, 2, 2, 2, 1097, 1099, 3,
	2, 2, 2, 1098, 1096, 3, 2, 2, 2, 1099, 1100, 5, 300, 151, 2, 1100, 113,
	3, 2, 2, 2, 1101, 1102, 7, 89, 2, 2, 1102, 1106, 5, 298, 150, 2, 1103,
	1105, 5, 80, 41, 2, 1104, 1103, 3, 2, 2, 2, 1105, 1108, 3, 2, 2, 2, 1106,
	1104, 3, 2, 2, 2, 1106, 1107, 3, 2, 2, 2, 1107, 1109, 3, 2, 2, 2, 1108,
	1106, 3, 2, 2, 2, 1109, 1110, 5, 300, 151, 2, 1110, 115, 3, 2, 2, 2, 1111,
	1112, 7, 53, 2, 2, 1112, 1114, 5, 302, 152, 2, 1113, 1115, 5, 132, 67,
	2, 1114, 1113, 3, 2, 2, 2, 1114, 1115, 3, 2, 2, 2, 1115, 1116, 3, 2, 2,
	2, 1116, 1117, 5, 304, 153, 2, 1117, 1118, 5, 294, 148, 2, 1118, 117, 3,
	2, 2, 2, 1119, 1120, 7, 47, 2, 2, 1120, 1121, 5, 132, 67, 2, 1121, 1122,
	9, 3, 2, 2, 1122, 1123, 5, 132, 67, 2, 1123, 1124, 5, 296, 149, 2, 1124,
	1125, 5, 132, 67, 2, 1125, 1126, 7, 48, 2, 2, 1126, 1134, 3, 2, 2, 2, 1127,
	1128, 7, 47, 2, 2, 1128, 1129, 5, 132, 67, 2, 1129, 1130, 9, 3, 2, 2, 1130,
	1131, 5, 132, 67, 2, 1131, 1132, 7, 48, 2, 2, 1132, 1134, 3, 2, 2, 2, 1133,
	1119, 3, 2, 2, 2, 1133, 1127, 3, 2, 2, 2, 1134, 119, 3, 2, 2, 2, 1135,
	1141, 5, 132, 67, 2, 1136, 1142, 7, 25, 2, 2, 1137, 1138, 7, 50, 2, 2,
	1138, 1139, 5, 246, 124, 2, 1139, 1140, 7, 39, 2, 2, 1140, 1142, 3, 2,
	2, 2, 1141, 1136, 3, 2, 2, 2, 1141, 1137, 3, 2, 2, 2, 1142, 1143, 3, 2,
	2, 2, 1143, 1144, 5, 132, 67, 2, 1144, 1145, 5, 294, 148, 2, 1145, 121,
	3, 2, 2, 2, 1146, 1147, 5, 132, 67, 2, 1147, 1148, 7, 50, 2, 2, 1148, 1149,
	5, 246, 124, 2, 1149, 1150, 5, 294, 148, 2, 1150, 123, 3, 2, 2, 2, 1151,
	1152, 5, 132, 67, 2, 1152, 1153, 7, 47, 2, 2, 1153, 1154, 7, 36, 2, 2,
	1154, 1155, 7, 48, 2, 2, 1155, 1156, 5, 278, 140, 2, 1156, 1157, 5, 132,
	67, 2, 1157, 1158, 5, 294, 148, 2, 1158, 125, 3, 2, 2, 2, 1159, 1160, 5,
	132, 67, 2, 1160, 1161, 5, 278, 140, 2, 1161, 1162, 5, 132, 67, 2, 1162,
	1163, 5, 294, 148, 2, 1163, 127, 3, 2, 2, 2, 1164, 1165, 5, 132, 67, 2,
	1165, 1166, 5, 294, 148, 2, 1166, 129, 3, 2, 2, 2, 1167, 1169, 5, 290,
	146, 2, 1168, 1170, 5, 200, 101, 2, 1169, 1168, 3, 2, 2, 2, 1169, 1170,
	3, 2, 2, 2, 1170, 1178, 3, 2, 2, 2, 1171, 1178, 7, 89, 2, 2, 1172, 1173,
	5, 302, 152, 2, 1173, 1174, 5, 132, 67, 2, 1174, 1175, 5, 304, 153, 2,
	1175, 1178, 3, 2, 2, 2, 1176, 1178, 5, 234, 118, 2, 1177, 1167, 3, 2, 2,
	2, 1177, 1171, 3, 2, 2, 2, 1177, 1172, 3, 2, 2, 2, 1177, 1176, 3, 2, 2,
	2, 1178, 131, 3, 2, 2, 2, 1179, 1180, 8, 67, 1, 2, 1180, 1197, 5, 220,
	111, 2, 1181, 1197, 5, 130, 66, 2, 1182, 1197, 5, 158, 80, 2, 1183, 1197,
	5, 156, 79, 2, 1184, 1197, 5, 160, 81, 2, 1185, 1197, 5, 174, 88, 2, 1186,
	1197, 5, 176, 89, 2, 1187, 1197, 5, 178, 90, 2, 1188, 1197, 5, 180, 91,
	2, 1189, 1197, 5, 202, 102, 2, 1190, 1197, 5, 212, 107, 2, 1191, 1197,
	5, 206, 104, 2, 1192, 1197, 5, 214, 108, 2, 1193, 1197, 5, 216, 109, 2,
	1194, 1197, 5, 218, 110, 2, 1195, 1197, 5, 230, 116, 2, 1196, 1179, 3,
	2, 2, 2, 1196, 1181, 3, 2, 2, 2, 1196, 1182, 3, 2, 2, 2, 1196, 1183, 3,
	2, 2, 2, 1196, 1184, 3, 2, 2, 2, 1196, 1185, 3, 2, 2, 2, 1196, 1186, 3,
	2, 2, 2, 1196, 1187, 3, 2, 2, 2, 1196, 1188, 3, 2, 2, 2, 1196, 1189, 3,
	2, 2, 2, 1196, 1190, 3, 2, 2, 2, 1196, 1191, 3, 2, 2, 2, 1196, 1192, 3,
	2, 2, 2, 1196, 1193, 3, 2, 2, 2, 1196, 1194, 3, 2, 2, 2, 1196, 1195, 3,
	2, 2, 2, 1197, 1236, 3, 2, 2, 2, 1198, 1199, 12, 7, 2, 2, 1199, 1200, 5,
	276, 139, 2, 1200, 1201, 5, 132, 67, 8, 1201, 1235, 3, 2, 2, 2, 1202, 1203,
	12, 6, 2, 2, 1203, 1204, 5, 280, 141, 2, 1204, 1205, 5, 132, 67, 7, 1205,
	1235, 3, 2, 2, 2, 1206, 1207, 12, 5, 2, 2, 1207, 1208, 5, 282, 142, 2,
	1208, 1209, 5, 132, 67, 6, 1209, 1235, 3, 2, 2, 2, 1210, 1211, 12, 4, 2,
	2, 1211, 1212, 5, 284, 143, 2, 1212, 1213, 5, 132, 67, 5, 1213, 1235, 3,
	2, 2, 2, 1214, 1215, 12, 16, 2, 2, 1215, 1235, 7, 53, 2, 2, 1216, 1217,
	12, 15, 2, 2, 1217, 1235, 7, 51, 2, 2, 1218, 1219, 12, 14, 2, 2, 1219,
	1235, 7, 38, 2, 2, 1220, 1221, 12, 13, 2, 2, 1221, 1235, 5, 162, 82, 2,
	1222, 1223, 12, 12, 2, 2, 1223, 1235, 5, 150, 76, 2, 1224, 1225, 12, 11,
	2, 2, 1225, 1235, 5, 152, 77, 2, 1226, 1227, 12, 10, 2, 2, 1227, 1235,
	5, 154, 78, 2, 1228, 1229, 12, 9, 2, 2, 1229, 1235, 5, 134, 68, 2, 1230,
	1231, 12, 8, 2, 2, 1231, 1232, 5, 274, 138, 2, 1232, 1233, 5, 246, 124,
	2, 1233, 1235, 3, 2, 2, 2, 1234, 1198, 3, 2, 2, 2, 1234, 1202, 3, 2, 2,
	2, 1234, 1206, 3, 2, 2, 2, 1234, 1210, 3, 2, 2, 2, 1234, 1214, 3, 2, 2,
	2, 1234, 1216, 3, 2, 2, 2, 1234, 1218, 3, 2, 2, 2, 1234, 1220, 3, 2, 2,
	2, 1234, 1222, 3, 2, 2, 2, 1234, 1224, 3, 2, 2, 2, 1234, 1226, 3, 2, 2,
	2, 1234, 1228, 3, 2, 2, 2, 1234, 1230, 3, 2, 2, 2, 1235, 1238, 3, 2, 2,
	2, 1236, 1234, 3, 2, 2, 2, 1236, 1237, 3, 2, 2, 2, 1237, 133, 3, 2, 2,
	2, 1238, 1236, 3, 2, 2, 2, 1239, 1241, 5, 286, 144, 2, 1240, 1242, 7, 93,
	2, 2, 1241, 1240, 3, 2, 2, 2, 1241, 1242, 3, 2, 2, 2, 1242, 1243, 3, 2,
	2, 2, 1243, 1245, 5, 290, 146, 2, 1244, 1246, 5, 200, 101, 2, 1245, 1244,
	3, 2, 2, 2, 1245, 1246, 3, 2, 2, 2, 1246, 1250, 3, 2, 2, 2, 1247, 1251,
	5, 150, 76, 2, 1248, 1251, 5, 152, 77, 2, 1249, 1251, 5, 154, 78, 2, 1250,
	1247, 3, 2, 2, 2, 1250, 1248, 3, 2, 2, 2, 1250, 1249, 3, 2, 2, 2, 1250,
	1251, 3, 2, 2, 2, 1251, 135, 3, 2, 2, 2, 1252, 1262, 5, 302, 152, 2, 1253,
	1259, 5, 132, 67, 2, 1254, 1255, 5, 296, 149, 2, 1255, 1256, 5, 132, 67,
	2, 1256, 1258, 3, 2, 2, 2, 1257, 1254, 3, 2, 2, 2, 1258, 1261, 3, 2, 2,
	2, 1259, 1257, 3, 2, 2, 2, 1259, 1260, 3, 2, 2, 2, 1260, 1263, 3, 2, 2,
	2, 1261, 1259, 3, 2, 2, 2, 1262, 1253, 3, 2, 2, 2, 1262, 1263, 3, 2, 2,
	2, 1263, 1264, 3, 2, 2, 2, 1264, 1265, 5, 304, 153, 2, 1265, 137, 3, 2,
	2, 2, 1266, 1272, 5, 132, 67, 2, 1267, 1268, 5, 296, 149, 2, 1268, 1269,
	5, 132, 67, 2, 1269, 1271, 3, 2, 2, 2, 1270, 1267, 3, 2, 2, 2, 1271, 1274,
	3, 2, 2, 2, 1272, 1270, 3, 2, 2, 2, 1272, 1273, 3, 2, 2, 2, 1273, 139,
	3, 2, 2, 2, 1274, 1272, 3, 2, 2, 2, 1275, 1277, 5, 142, 72, 2, 1276, 1278,
	7, 93, 2, 2, 1277, 1276, 3, 2, 2, 2, 1277, 1278, 3, 2, 2, 2, 1278, 141,
	3, 2, 2, 2, 1279, 1283, 7, 47, 2, 2, 1280, 1281, 5, 290, 146, 2, 1281,
	1282, 7, 35, 2, 2, 1282, 1284, 3, 2, 2, 2, 1283, 1280, 3, 2, 2, 2, 1283,
	1284, 3, 2, 2, 2, 1284, 1285, 3, 2, 2, 2, 1285, 1286, 5, 144, 73, 2, 1286,
	1287, 7, 48, 2, 2, 1287, 143, 3, 2, 2, 2, 1288, 1294, 5, 146, 74, 2, 1289,
	1290, 5, 296, 149, 2, 1290, 1291, 5, 146, 74, 2, 1291, 1293, 3, 2, 2, 2,
	1292, 1289, 3, 2, 2, 2, 1293, 1296, 3, 2, 2, 2, 1294, 1292, 3, 2, 2, 2,
	1294, 1295, 3, 2, 2, 2, 1295, 145, 3, 2, 2, 2, 1296, 1294, 3, 2, 2, 2,
	1297, 1310, 5, 290, 146, 2, 1298, 1299, 5, 302, 152, 2, 1299, 1305, 5,
	148, 75, 2, 1300, 1301, 5, 296, 149, 2, 1301, 1302, 5, 148, 75, 2, 1302,
	1304, 3, 2, 2, 2, 1303, 1300, 3, 2, 2, 2, 1304, 1307, 3, 2, 2, 2, 1305,
	1303, 3, 2, 2, 2, 1305, 1306, 3, 2, 2, 2, 1306, 1308, 3, 2, 2, 2, 1307,
	1305, 3, 2, 2, 2, 1308, 1309, 5, 304, 153, 2, 1309, 1311, 3, 2, 2, 2, 1310,
	1298, 3, 2, 2, 2, 1310, 1311, 3, 2, 2, 2, 1311, 147, 3, 2, 2, 2, 1312,
	1313, 5, 290, 146, 2, 1313, 1314, 7, 39, 2, 2, 1314, 1316, 3, 2, 2, 2,
	1315, 1312, 3, 2, 2, 2, 1315, 1316, 3, 2, 2, 2, 1316, 1317, 3, 2, 2, 2,
	1317, 1318, 5, 132, 67, 2, 1318, 149, 3, 2, 2, 2, 1319, 1322, 5, 136, 69,
	2, 1320, 1322, 5, 202, 102, 2, 1321, 1319, 3, 2, 2, 2, 1321, 1320, 3, 2,
	2, 2, 1322, 151, 3, 2, 2, 2, 1323, 1324, 7, 47, 2, 2, 1324, 1325, 7, 36,
	2, 2, 1325, 1326, 7, 48, 2, 2, 1326, 153, 3, 2, 2, 2, 1327, 1330, 7, 47,
	2, 2, 1328, 1331, 5, 184, 93, 2, 1329, 1331, 5, 132, 67, 2, 1330, 1328,
	3, 2, 2, 2, 1330, 1329, 3, 2, 2, 2, 1331, 1332, 3, 2, 2, 2, 1332, 1333,
	7, 48, 2, 2, 1333, 155, 3, 2, 2, 2, 1334, 1335, 5, 246, 124, 2, 1335, 1340,
	5, 298, 150, 2, 1336, 1341, 5, 164, 83, 2, 1337, 1341, 5, 168, 85, 2, 1338,
	1341, 5, 170, 86, 2, 1339, 1341, 5, 172, 87, 2, 1340, 1336, 3, 2, 2, 2,
	1340, 1337, 3, 2, 2, 2, 1340, 1338, 3, 2, 2, 2, 1340, 1339, 3, 2, 2, 2,
	1340, 1341, 3, 2, 2, 2, 1341, 1342, 3, 2, 2, 2, 1342, 1343, 5, 300, 151,
	2, 1343, 157, 3, 2, 2, 2, 1344, 1345, 7, 40, 2, 2, 1345, 1346, 5, 246,
	124, 2, 1346, 1347, 7, 41, 2, 2, 1347, 1349, 5, 302, 152, 2, 1348, 1350,
	7, 93, 2, 2, 1349, 1348, 3, 2, 2, 2, 1349, 1350, 3, 2, 2, 2, 1350, 1352,
	3, 2, 2, 2, 1351, 1353, 5, 138, 70, 2, 1352, 1351, 3, 2, 2, 2, 1352, 1353,
	3, 2, 2, 2, 1353, 1355, 3, 2, 2, 2, 1354, 1356, 7, 93, 2, 2, 1355, 1354,
	3, 2, 2, 2, 1355, 1356, 3, 2, 2, 2, 1356, 1357, 3, 2, 2, 2, 1357, 1358,
	5, 304, 153, 2, 1358, 159, 3, 2, 2, 2, 1359, 1360, 7, 51, 2, 2, 1360, 1364,
	5, 302, 152, 2, 1361, 1365, 5, 132, 67, 2, 1362, 1363, 7, 50, 2, 2, 1363,
	1365, 5, 246, 124, 2, 1364, 1361, 3, 2, 2, 2, 1364, 1362, 3, 2, 2, 2, 1365,
	1366, 3, 2, 2, 2, 1366, 1367, 5, 304, 153, 2, 1367, 161, 3, 2, 2, 2, 1368,
	1369, 7, 50, 2, 2, 1369, 1370, 5, 302, 152, 2, 1370, 1371, 5, 246, 124,
	2, 1371, 1372, 5, 304, 153, 2, 1372, 163, 3, 2, 2, 2, 1373, 1379, 5, 166,
	84, 2, 1374, 1375, 5, 296, 149, 2, 1375, 1376, 5, 166, 84, 2, 1376, 1378,
	3, 2, 2, 2, 1377, 1374, 3, 2, 2, 2, 1378, 1381, 3, 2, 2, 2, 1379, 1377,
	3, 2, 2, 2, 1379, 1380, 3, 2, 2, 2, 1380, 165, 3, 2, 2, 2, 1381, 1379,
	3, 2, 2, 2, 1382, 1383, 5, 194, 98, 2, 1383, 1384, 7, 39, 2, 2, 1384, 1385,
	5, 132, 67, 2, 1385, 167, 3, 2, 2, 2, 1386, 1392, 5, 132, 67, 2, 1387,
	1388, 5, 296, 149, 2, 1388, 1389, 5, 132, 67, 2, 1389, 1391, 3, 2, 2, 2,
	1390, 1387, 3, 2, 2, 2, 1391, 1394, 3, 2, 2, 2, 1392, 1390, 3, 2, 2, 2,
	1392, 1393, 3, 2, 2, 2, 1393, 169, 3, 2, 2, 2, 1394, 1392, 3, 2, 2, 2,
	1395, 1396, 7, 47, 2, 2, 1396, 1397, 5, 132, 67, 2, 1397, 1405, 7, 48,
	2, 2, 1398, 1399, 5, 296, 149, 2, 1399, 1400, 7, 47, 2, 2, 1400, 1401,
	5, 132, 67, 2, 1401, 1402, 7, 48, 2, 2, 1402, 1404, 3, 2, 2, 2, 1403, 1398,
	3, 2, 2, 2, 1404, 1407, 3, 2, 2, 2, 1405, 1403, 3, 2, 2, 2, 1405, 1406,
	3, 2, 2, 2, 1406, 171, 3, 2, 2, 2, 1407, 1405, 3, 2, 2, 2, 1408, 1414,
	5, 182, 92, 2, 1409, 1410, 5, 296, 149, 2, 1410, 1411, 5, 182, 92, 2, 1411,
	1413, 3, 2, 2, 2, 1412, 1409, 3, 2, 2, 2, 1413, 1416, 3, 2, 2, 2, 1414,
	1412, 3, 2, 2, 2, 1414, 1415, 3, 2, 2, 2, 1415, 173, 3, 2, 2, 2, 1416,
	1414, 3, 2, 2, 2, 1417, 1418, 7, 38, 2, 2, 1418, 1419, 5, 132, 67, 2, 1419,
	175, 3, 2, 2, 2, 1420, 1421, 5, 298, 150, 2, 1421, 1427, 5, 132, 67, 2,
	1422, 1423, 5, 296, 149, 2, 1423, 1424, 5, 132, 67, 2, 1424, 1426, 3, 2,
	2, 2, 1425, 1422, 3, 2, 2, 2, 1426, 1429, 3, 2, 2, 2, 1427, 1425, 3, 2,
	2, 2, 1427, 1428, 3, 2, 2, 2, 1428, 1430, 3, 2, 2, 2, 1429, 1427, 3, 2,
	2, 2, 1430, 1431, 5, 300, 151, 2, 1431, 177, 3, 2, 2, 2, 1432, 1433, 5,
	298, 150, 2, 1433, 1434, 7, 47, 2, 2, 1434, 1435, 5, 132, 67, 2, 1435,
	1443, 7, 48, 2, 2, 1436, 1437, 5, 296, 149, 2, 1437, 1438, 7, 47, 2, 2,
	1438, 1439, 5, 132, 67, 2, 1439, 1440, 7, 48, 2, 2, 1440, 1442, 3, 2, 2,
	2, 1441, 1436, 3, 2, 2, 2, 1442, 1445, 3, 2, 2, 2, 1443, 1441, 3, 2, 2,
	2, 1443, 1444, 3, 2, 2, 2, 1444, 1446, 3, 2, 2, 2, 1445, 1443, 3, 2, 2,
	2, 1446, 1447, 5, 300, 151, 2, 1447, 179, 3, 2, 2, 2, 1448, 1449, 5, 298,
	150, 2, 1449, 1455, 5, 182, 92, 2, 1450, 1451, 5, 296, 149, 2, 1451, 1452,
	5, 182, 92, 2, 1452, 1454, 3, 2, 2, 2, 1453, 1450, 3, 2, 2, 2, 1454, 1457,
	3, 2, 2, 2, 1455, 1453, 3, 2, 2, 2, 1455, 1456, 3, 2, 2, 2, 1456, 1458,
	3, 2, 2, 2, 1457, 1455, 3, 2, 2, 2, 1458, 1459, 5, 300, 151, 2, 1459, 181,
	3, 2, 2, 2, 1460, 1461, 7, 47, 2, 2, 1461, 1462, 5, 132, 67, 2, 1462, 1463,
	7, 48, 2, 2, 1463, 1464, 5, 132, 67, 2, 1464, 183, 3, 2, 2, 2, 1465, 1469,
	5, 186, 94, 2, 1466, 1469, 5, 188, 95, 2, 1467, 1469, 5, 190, 96, 2, 1468,
	1465, 3, 2, 2, 2, 1468, 1466, 3, 2, 2, 2, 1468, 1467, 3, 2, 2, 2, 1469,
	185, 3, 2, 2, 2, 1470, 1471, 5, 132, 67, 2, 1471, 1472, 9, 3, 2, 2, 1472,
	1473, 5, 132, 67, 2, 1473, 187, 3, 2, 2, 2, 1474, 1475, 5, 132, 67, 2,
	1475, 1476, 9, 3, 2, 2, 1476, 189, 3, 2, 2, 2, 1477, 1478, 9, 3, 2, 2,
	1478, 1479, 5, 132, 67, 2, 1479, 191, 3, 2, 2, 2, 1480, 1481, 5, 290, 146,
	2, 1481, 1483, 5, 286, 144, 2, 1482, 1484, 7, 93, 2, 2, 1483, 1482, 3,
	2, 2, 2, 1483, 1484, 3, 2, 2, 2, 1484, 1486, 3, 2, 2, 2, 1485, 1480, 3,
	2, 2, 2, 1486, 1489, 3, 2, 2, 2, 1487, 1485, 3, 2, 2, 2, 1487, 1488, 3,
	2, 2, 2, 1488, 1490, 3, 2, 2, 2, 1489, 1487, 3, 2, 2, 2, 1490, 1491, 5,
	290, 146, 2, 1491, 193, 3, 2, 2, 2, 1492, 1501, 5, 290, 146, 2, 1493, 1495,
	5, 286, 144, 2, 1494, 1496, 7, 93, 2, 2, 1495, 1494, 3, 2, 2, 2, 1495,
	1496, 3, 2, 2, 2, 1496, 1497, 3, 2, 2, 2, 1497, 1498, 5, 290, 146, 2, 1498,
	1500, 3, 2, 2, 2, 1499, 1493, 3, 2, 2, 2, 1500, 1503, 3, 2, 2, 2, 1501,
	1499, 3, 2, 2, 2, 1501, 1502, 3, 2, 2, 2, 1502, 195, 3, 2, 2, 2, 1503,
	1501, 3, 2, 2, 2, 1504, 1505, 7, 40, 2, 2, 1505, 1511, 5, 198, 100, 2,
	1506, 1507, 5, 296, 149, 2, 1507, 1508, 5, 198, 100, 2, 1508, 1510, 3,
	2, 2, 2, 1509, 1506, 3, 2, 2, 2, 1510, 1513, 3, 2, 2, 2, 1511, 1509, 3,
	2, 2, 2, 1511, 1512, 3, 2, 2, 2, 1512, 1514, 3, 2, 2, 2, 1513, 1511, 3,
	2, 2, 2, 1514, 1515, 7, 41, 2, 2, 1515, 197, 3, 2, 2, 2, 1516, 1519, 5,
	290, 146, 2, 1517, 1518, 7, 50, 2, 2, 1518, 1520, 5, 290, 146, 2, 1519,
	1517, 3, 2, 2, 2, 1519, 1520, 3, 2, 2, 2, 1520, 199, 3, 2, 2, 2, 1521,
	1522, 7, 40, 2, 2, 1522, 1528, 5, 246, 124, 2, 1523, 1524, 5, 296, 149,
	2, 1524, 1525, 5, 246, 124, 2, 1525, 1527, 3, 2, 2, 2, 1526, 1523, 3, 2,
	2, 2, 1527, 1530, 3, 2, 2, 2, 1528, 1526, 3, 2, 2, 2, 1528, 1529, 3, 2,
	2, 2, 1529, 1531, 3, 2, 2, 2, 1530, 1528, 3, 2, 2, 2, 1531, 1532, 7, 41,
	2, 2, 1532, 201, 3, 2, 2, 2, 1533, 1535, 5, 298, 150, 2, 1534, 1536, 5,
	204, 103, 2, 1535, 1534, 3, 2, 2, 2, 1535, 1536, 3, 2, 2, 2, 1536, 1537,
	3, 2, 2, 2, 1537, 1541, 9, 2, 2, 2, 1538, 1540, 7, 93, 2, 2, 1539, 1538,
	3, 2, 2, 2, 1540, 1543, 3, 2, 2, 2, 1541, 1539, 3, 2, 2, 2, 1541, 1542,
	3, 2, 2, 2, 1542, 1544, 3, 2, 2, 2, 1543, 1541, 3, 2, 2, 2, 1544, 1545,
	5, 138, 70, 2, 1545, 1546, 5, 300, 151, 2, 1546, 1567, 3, 2, 2, 2, 1547,
	1549, 5, 298, 150, 2, 1548, 1550, 5, 204, 103, 2, 1549, 1548, 3, 2, 2,
	2, 1549, 1550, 3, 2, 2, 2, 1550, 1551, 3, 2, 2, 2, 1551, 1555, 9, 2, 2,
	2, 1552, 1554, 7, 93, 2, 2, 1553, 1552, 3, 2, 2, 2, 1554, 1557, 3, 2, 2,
	2, 1555, 1553, 3, 2, 2, 2, 1555, 1556, 3, 2, 2, 2, 1556, 1561, 3, 2, 2,
	2, 1557, 1555, 3, 2, 2, 2, 1558, 1560, 5, 80, 41, 2, 1559, 1558, 3, 2,
	2, 2, 1560, 1563, 3, 2, 2, 2, 1561, 1559, 3, 2, 2, 2, 1561, 1562, 3, 2,
	2, 2, 1562, 1564, 3, 2, 2, 2, 1563, 1561, 3, 2, 2, 2, 1564, 1565, 5, 300,
	151, 2, 1565, 1567, 3, 2, 2, 2, 1566, 1533, 3, 2, 2, 2, 1566, 1547, 3,
	2, 2, 2, 1567, 203, 3, 2, 2, 2, 1568, 1574, 5, 290, 146, 2, 1569, 1570,
	5, 296, 149, 2, 1570, 1571, 5, 290, 146, 2, 1571, 1573, 3, 2, 2, 2, 1572,
	1569, 3, 2, 2, 2, 1573, 1576, 3, 2, 2, 2, 1574, 1572, 3, 2, 2, 2, 1574,
	1575, 3, 2, 2, 2, 1575, 205, 3, 2, 2, 2, 1576, 1574, 3, 2, 2, 2, 1577,
	1578, 5, 208, 105, 2, 1578, 207, 3, 2, 2, 2, 1579, 1580, 5, 298, 150, 2,
	1580, 1586, 5, 210, 106, 2, 1581, 1582, 5, 296, 149, 2, 1582, 1583, 5,
	210, 106, 2, 1583, 1585, 3, 2, 2, 2, 1584, 1581, 3, 2, 2, 2, 1585, 1588,
	3, 2, 2, 2, 1586, 1584, 3, 2, 2, 2, 1586, 1587, 3, 2, 2, 2, 1587, 1589,
	3, 2, 2, 2, 1588, 1586, 3, 2, 2, 2, 1589, 1590, 5, 300, 151, 2, 1590, 209,
	3, 2, 2, 2, 1591, 1592, 5, 194, 98, 2, 1592, 1593, 7, 39, 2, 2, 1593, 1594,
	5, 132, 67, 2, 1594, 211, 3, 2, 2, 2, 1595, 1596, 5, 302, 152, 2, 1596,
	1597, 5, 72, 37, 2, 1597, 1601, 9, 2, 2, 2, 1598, 1600, 7, 93, 2, 2, 1599,
	1598, 3, 2, 2, 2, 1600, 1603, 3, 2, 2, 2, 1601, 1599, 3, 2, 2, 2, 1601,
	1602, 3, 2, 2, 2, 1602, 1604, 3, 2, 2, 2, 1603, 1601, 3, 2, 2, 2, 1604,
	1605, 5, 74, 38, 2, 1605, 1606, 5, 304, 153, 2, 1606, 1610, 5, 298, 150,
	2, 1607, 1609, 5, 80, 41, 2, 1608, 1607, 3, 2, 2, 2, 1609, 1612, 3, 2,
	2, 2, 1610, 1608, 3, 2, 2, 2, 1610, 1611, 3, 2, 2, 2, 1611, 1613, 3, 2,
	2, 2, 1612, 1610, 3, 2, 2, 2, 1613, 1614, 5, 300, 151, 2, 1614, 213, 3,
	2, 2, 2, 1615, 1616, 5, 302, 152, 2, 1616, 1622, 5, 132, 67, 2, 1617, 1618,
	5, 296, 149, 2, 1618, 1619, 5, 132, 67, 2, 1619, 1621, 3, 2, 2, 2, 1620,
	1617, 3, 2, 2, 2, 1621, 1624, 3, 2, 2, 2, 1622, 1620, 3, 2, 2, 2, 1622,
	1623, 3, 2, 2, 2, 1623, 1625, 3, 2, 2, 2, 1624, 1622, 3, 2, 2, 2, 1625,
	1626, 5, 304, 153, 2, 1626, 215, 3, 2, 2, 2, 1627, 1628, 5, 280, 141, 2,
	1628, 1629, 5, 132, 67, 2, 1629, 217, 3, 2, 2, 2, 1630, 1631, 5, 288, 145,
	2, 1631, 1632, 5, 132, 67, 2, 1632, 219, 3, 2, 2, 2, 1633, 1635, 5, 226,
	114, 2, 1634, 1636, 7, 93, 2, 2, 1635, 1634, 3, 2, 2, 2, 1635, 1636, 3,
	2, 2, 2, 1636, 1637, 3, 2, 2, 2, 1637, 1638, 5, 132, 67, 2, 1638, 1640,
	7, 35, 2, 2, 1639, 1641, 7, 93, 2, 2, 1640, 1639, 3, 2, 2, 2, 1640, 1641,
	3, 2, 2, 2, 1641, 1643, 3, 2, 2, 2, 1642, 1644, 5, 222, 112, 2, 1643, 1642,
	3, 2, 2, 2, 1644, 1645, 3, 2, 2, 2, 1645, 1643, 3, 2, 2, 2, 1645, 1646,
	3, 2, 2, 2, 1646, 1647, 3, 2, 2, 2, 1647, 1649, 9, 4, 2, 2, 1648, 1650,
	7, 93, 2, 2, 1649, 1648, 3, 2, 2, 2, 1649, 1650, 3, 2, 2, 2, 1650, 1651,
	3, 2, 2, 2, 1651, 1652, 5, 132, 67, 2, 1652, 221, 3, 2, 2, 2, 1653, 1655,
	5, 224, 113, 2, 1654, 1656, 5, 132, 67, 2, 1655, 1654, 3, 2, 2, 2, 1655,
	1656, 3, 2, 2, 2, 1656, 1657, 3, 2, 2, 2, 1657, 1659, 7, 35, 2, 2, 1658,
	1660, 7, 93, 2, 2, 1659, 1658, 3, 2, 2, 2, 1659, 1660, 3, 2, 2, 2, 1660,
	223, 3, 2, 2, 2, 1661, 1664, 5, 226, 114, 2, 1662, 1664, 5, 228, 115, 2,
	1663, 1661, 3, 2, 2, 2, 1663, 1662, 3, 2, 2, 2, 1664, 225, 3, 2, 2, 2,
	1665, 1666, 7, 3, 2, 2, 1666, 227, 3, 2, 2, 2, 1667, 1668, 9, 5, 2, 2,
	1668, 229, 3, 2, 2, 2, 1669, 1671, 7, 85, 2, 2, 1670, 1672, 5, 232, 117,
	2, 1671, 1670, 3, 2, 2, 2, 1672, 1673, 3, 2, 2, 2, 1673, 1671, 3, 2, 2,
	2, 1673, 1674, 3, 2, 2, 2, 1674, 231, 3, 2, 2, 2, 1675, 1676, 5, 132, 67,
	2, 1676, 1677, 7, 85, 2, 2, 1677, 233, 3, 2, 2, 2, 1678, 1687, 5, 236,
	119, 2, 1679, 1687, 5, 238, 120, 2, 1680, 1687, 7, 85, 2, 2, 1681, 1687,
	7, 86, 2, 2, 1682, 1687, 7, 81, 2, 2, 1683, 1687, 7, 82, 2, 2, 1684, 1687,
	5, 270, 136, 2, 1685, 1687, 7, 83, 2, 2, 1686, 1678, 3, 2, 2, 2, 1686,
	1679, 3, 2, 2, 2, 1686, 1680, 3, 2, 2, 2, 1686, 1681, 3, 2, 2, 2, 1686,
	1682, 3, 2, 2, 2, 1686, 1683, 3, 2, 2, 2, 1686, 1684, 3, 2, 2, 2, 1686,
	1685, 3, 2, 2, 2, 1687, 235, 3, 2, 2, 2, 1688, 1689, 5, 238, 120, 2, 1689,
	1690, 5, 286, 144, 2, 1690, 1691, 5, 238, 120, 2, 1691, 237, 3, 2, 2, 2,
	1692, 1693, 7, 84, 2, 2, 1693, 239, 3, 2, 2, 2, 1694, 1705, 5, 264, 133,
	2, 1695, 1705, 5, 248, 125, 2, 1696, 1705, 5, 250, 126, 2, 1697, 1705,
	5, 252, 127, 2, 1698, 1705, 5, 254, 128, 2, 1699, 1705, 5, 256, 129, 2,
	1700, 1705, 5, 258, 130, 2, 1701, 1705, 5, 268, 135, 2, 1702, 1705, 5,
	260, 131, 2, 1703, 1705, 5, 262, 132, 2, 1704, 1694, 3, 2, 2, 2, 1704,
	1695, 3, 2, 2, 2, 1704, 1696, 3, 2, 2, 2, 1704, 1697, 3, 2, 2, 2, 1704,
	1698, 3, 2, 2, 2, 1704, 1699, 3, 2, 2, 2, 1704, 1700, 3, 2, 2, 2, 1704,
	1701, 3, 2, 2, 2, 1704, 1702, 3, 2, 2, 2, 1704, 1703, 3, 2, 2, 2, 1705,
	241, 3, 2, 2, 2, 1706, 1709, 7, 53, 2, 2, 1707, 1710, 5, 240, 121, 2, 1708,
	1710, 5, 244, 123, 2, 1709, 1707, 3, 2, 2, 2, 1709, 1708, 3, 2, 2, 2, 1710,
	243, 3, 2, 2, 2, 1711, 1712, 7, 51, 2, 2, 1712, 1713, 5, 240, 121, 2, 1713,
	245, 3, 2, 2, 2, 1714, 1718, 5, 240, 121, 2, 1715, 1718, 5, 244, 123, 2,
	1716, 1718, 5, 242, 122, 2, 1717, 1714, 3, 2, 2, 2, 1717, 1715, 3, 2, 2,
	2, 1717, 1716, 3, 2, 2, 2, 1718, 247, 3, 2, 2, 2, 1719, 1720, 5, 302, 152,
	2, 1720, 1724, 5, 246, 124, 2, 1721, 1722, 5, 296, 149, 2, 1722, 1723,
	5, 246, 124, 2, 1723, 1725, 3, 2, 2, 2, 1724, 1721, 3, 2, 2, 2, 1725, 1726,
	3, 2, 2, 2, 1726, 1724, 3, 2, 2, 2, 1726, 1727, 3, 2, 2, 2, 1727, 1728,
	3, 2, 2, 2, 1728, 1729, 5, 304, 153, 2, 1729, 249, 3, 2, 2, 2, 1730, 1731,
	7, 47, 2, 2, 1731, 1732, 7, 50, 2, 2, 1732, 1733, 7, 48, 2, 2, 1733, 1734,
	5, 246, 124, 2, 1734, 251, 3, 2, 2, 2, 1735, 1736, 7, 47, 2, 2, 1736, 1737,
	7, 48, 2, 2, 1737, 1738, 5, 246, 124, 2, 1738, 253, 3, 2, 2, 2, 1739, 1740,
	7, 47, 2, 2, 1740, 1741, 5, 246, 124, 2, 1741, 1742, 7, 48, 2, 2, 1742,
	255, 3, 2, 2, 2, 1743, 1744, 7, 47, 2, 2, 1744, 1745, 5, 246, 124, 2, 1745,
	1746, 7, 48, 2, 2, 1746, 1747, 5, 246, 124, 2, 1747, 257, 3, 2, 2, 2, 1748,
	1749, 7, 47, 2, 2, 1749, 1750, 7, 35, 2, 2, 1750, 1751, 7, 48, 2, 2, 1751,
	1752, 5, 246, 124, 2, 1752, 259, 3, 2, 2, 2, 1753, 1755, 5, 192, 97, 2,
	1754, 1756, 5, 200, 101, 2, 1755, 1754, 3, 2, 2, 2, 1755, 1756, 3, 2, 2,
	2, 1756, 261, 3, 2, 2, 2, 1757, 1758, 5, 302, 152, 2, 1758, 1759, 5, 266,
	134, 2, 1759, 1763, 9, 2, 2, 2, 1760, 1762, 7, 93, 2, 2, 1761, 1760, 3,
	2, 2, 2, 1762, 1765, 3, 2, 2, 2, 1763, 1761, 3, 2, 2, 2, 1763, 1764, 3,
	2, 2, 2, 1764, 1766, 3, 2, 2, 2, 1765, 1763, 3, 2, 2, 2, 1766, 1767, 5,
	266, 134, 2, 1767, 1768, 5, 304, 153, 2, 1768, 263, 3, 2, 2, 2, 1769, 1770,
	7, 79, 2, 2, 1770, 265, 3, 2, 2, 2, 1771, 1773, 5, 246, 124, 2, 1772, 1771,
	3, 2, 2, 2, 1772, 1773, 3, 2, 2, 2, 1773, 1779, 3, 2, 2, 2, 1774, 1775,
	5, 296, 149, 2, 1775, 1776, 5, 246, 124, 2, 1776, 1778, 3, 2, 2, 2, 1777,
	1774, 3, 2, 2, 2, 1778, 1781, 3, 2, 2, 2, 1779, 1777, 3, 2, 2, 2, 1779,
	1780, 3, 2, 2, 2, 1780, 267, 3, 2, 2, 2, 1781, 1779, 3, 2, 2, 2, 1782,
	1799, 7, 63, 2, 2, 1783, 1799, 7, 64, 2, 2, 1784, 1799, 7, 65, 2, 2, 1785,
	1799, 7, 66, 2, 2, 1786, 1799, 7, 67, 2, 2, 1787, 1799, 7, 68, 2, 2, 1788,
	1799, 7, 69, 2, 2, 1789, 1799, 7, 70, 2, 2, 1790, 1799, 7, 71, 2, 2, 1791,
	1799, 7, 72, 2, 2, 1792, 1799, 7, 73, 2, 2, 1793, 1799, 7, 74, 2, 2, 1794,
	1799, 7, 75, 2, 2, 1795, 1799, 7, 76, 2, 2, 1796, 1799, 7, 77, 2, 2, 1797,
	1799, 7, 78, 2, 2, 1798, 1782, 3, 2, 2, 2, 1798, 1783, 3, 2, 2, 2, 1798,
	1784, 3, 2, 2, 2, 1798, 1785, 3, 2, 2, 2, 1798, 1786, 3, 2, 2, 2, 1798,
	1787, 3, 2, 2, 2, 1798, 1788, 3, 2, 2, 2, 1798, 1789, 3, 2, 2, 2, 1798,
	1790, 3, 2, 2, 2, 1798, 1791, 3, 2, 2, 2, 1798, 1792, 3, 2, 2, 2, 1798,
	1793, 3, 2, 2, 2, 1798, 1794, 3, 2, 2, 2, 1798, 1795, 3, 2, 2, 2, 1798,
	1796, 3, 2, 2, 2, 1798, 1797, 3, 2, 2, 2, 1799, 269, 3, 2, 2, 2, 1800,
	1801, 7, 80, 2, 2, 1801, 271, 3, 2, 2, 2, 1802, 1805, 7, 81, 2, 2, 1803,
	1805, 7, 82, 2, 2, 1804, 1802, 3, 2, 2, 2, 1804, 1803, 3, 2, 2, 2, 1805,
	273, 3, 2, 2, 2, 1806, 1807, 9, 6, 2, 2, 1807, 1808, 7, 50, 2, 2, 1808,
	275, 3, 2, 2, 2, 1809, 1811, 9, 7, 2, 2, 1810, 1812, 7, 93, 2, 2, 1811,
	1810, 3, 2, 2, 2, 1811, 1812, 3, 2, 2, 2, 1812, 277, 3, 2, 2, 2, 1813,
	1815, 9, 8, 2, 2, 1814, 1816, 7, 93, 2, 2, 1815, 1814, 3, 2, 2, 2, 1815,
	1816, 3, 2, 2, 2, 1816, 279, 3, 2, 2, 2, 1817, 1819, 9, 9, 2, 2, 1818,
	1820, 7, 93, 2, 2, 1819, 1818, 3, 2, 2, 2, 1819, 1820, 3, 2, 2, 2, 1820,
	281, 3, 2, 2, 2, 1821, 1823, 9, 10, 2, 2, 1822, 1824, 7, 93, 2, 2, 1823,
	1822, 3, 2, 2, 2, 1823, 1824, 3, 2, 2, 2, 1824, 283, 3, 2, 2, 2, 1825,
	1827, 9, 11, 2, 2, 1826, 1828, 7, 93, 2, 2, 1827, 1826, 3, 2, 2, 2, 1827,
	1828, 3, 2, 2, 2, 1828, 285, 3, 2, 2, 2, 1829, 1831, 7, 32, 2, 2, 1830,
	1832, 7, 93, 2, 2, 1831, 1830, 3, 2, 2, 2, 1831, 1832, 3, 2, 2, 2, 1832,
	287, 3, 2, 2, 2, 1833, 1834, 7, 54, 2, 2, 1834, 289, 3, 2, 2, 2, 1835,
	1836, 5, 292, 147, 2, 1836, 291, 3, 2, 2, 2, 1837, 1842, 9, 12, 2, 2, 1838,
	1842, 5, 268, 135, 2, 1839, 1842, 5, 264, 133, 2, 1840, 1842, 5, 224, 113,
	2, 1841, 1837, 3, 2, 2, 2, 1841, 1838, 3, 2, 2, 2, 1841, 1839, 3, 2, 2,
	2, 1841, 1840, 3, 2, 2, 2, 1842, 293, 3, 2, 2, 2, 1843, 1844, 9, 13, 2,
	2, 1844, 295, 3, 2, 2, 2, 1845, 1849, 7, 33, 2, 2, 1846, 1848, 7, 93, 2,
	2, 1847, 1846, 3, 2, 2, 2, 1848, 1851, 3, 2, 2, 2, 1849, 1847, 3, 2, 2,
	2, 1849, 1850, 3, 2, 2, 2, 1850, 297, 3, 2, 2, 2, 1851, 1849, 3, 2, 2,
	2, 1852, 1856, 7, 45, 2, 2, 1853, 1855, 7, 93, 2, 2, 1854, 1853, 3, 2,
	2, 2, 1855, 1858, 3, 2, 2, 2, 1856, 1854, 3, 2, 2, 2, 1856, 1857, 3, 2,
	2, 2, 1857, 299, 3, 2, 2, 2, 1858, 1856, 3, 2, 2, 2, 1859, 1861, 7, 93,
	2, 2, 1860, 1859, 3, 2, 2, 2, 1861, 1864, 3, 2, 2, 2, 1862, 1860, 3, 2,
	2, 2, 1862, 1863, 3, 2, 2, 2, 1863, 1865, 3, 2, 2, 2, 1864, 1862, 3, 2,
	2, 2, 1865, 1866, 7, 46, 2, 2, 1866, 301, 3, 2, 2, 2, 1867, 1868, 7, 43,
	2, 2, 1868, 303, 3, 2, 2, 2, 1869, 1870, 7, 44, 2, 2, 1870, 305, 3, 2,
	2, 2, 1871, 1875, 7, 47, 2, 2, 1872, 1874, 7, 93, 2, 2, 1873, 1872, 3,
	2, 2, 2, 1874, 1877, 3, 2, 2, 2, 1875, 1873, 3, 2, 2, 2, 1875, 1876, 3,
	2, 2, 2, 1876, 307, 3, 2, 2, 2, 1877, 1875, 3, 2, 2, 2, 1878, 1880, 7,
	93, 2, 2, 1879, 1878, 3, 2, 2, 2, 1880, 1883, 3, 2, 2, 2, 1881, 1879, 3,
	2, 2, 2, 1881, 1882, 3, 2, 2, 2, 1882, 1884, 3, 2, 2, 2, 1883, 1881, 3,
	2, 2, 2, 1884, 1885, 7, 48, 2, 2, 1885, 309, 3, 2, 2, 2, 195, 313, 318,
	322, 328, 334, 341, 343, 350, 355, 357, 374, 387, 394, 402, 411, 414, 419,
	428, 430, 435, 442, 448, 454, 462, 468, 472, 480, 489, 496, 500, 507, 517,
	524, 534, 538, 544, 550, 559, 561, 570, 576, 592, 597, 604, 613, 616, 619,
	623, 631, 640, 647, 650, 659, 672, 679, 688, 691, 694, 698, 706, 715, 722,
	725, 734, 740, 744, 751, 761, 764, 773, 782, 786, 794, 803, 811, 820, 828,
	833, 840, 844, 851, 859, 866, 887, 894, 904, 911, 919, 923, 929, 939, 944,
	951, 962, 972, 984, 996, 1003, 1015, 1026, 1045, 1052, 1063, 1070, 1074,
	1081, 1090, 1096, 1106, 1114, 1133, 1141, 1169, 1177, 1196, 1234, 1236,
	1241, 1245, 1250, 1259, 1262, 1272, 1277, 1283, 1294, 1305, 1310, 1315,
	1321, 1330, 1340, 1349, 1352, 1355, 1364, 1379, 1392, 1405, 1414, 1427,
	1443, 1455, 1468, 1483, 1487, 1495, 1501, 1511, 1519, 1528, 1535, 1541,
	1549, 1555, 1561, 1566, 1574, 1586, 1601, 1610, 1622, 1635, 1640, 1645,
	1649, 1655, 1659, 1663, 1673, 1686, 1704, 1709, 1717, 1726, 1755, 1763,
	1772, 1779, 1798, 1804, 1811, 1815, 1819, 1823, 1827, 1831, 1841, 1849,
	1856, 1862, 1875, 1881,
}
var deserializer = antlr.NewATNDeserializer(nil)
var deserializedATN = deserializer.DeserializeFromUInt16(parserATN)

var literalNames = []string{
	"", "'from'", "'by'", "'select'", "'where'", "'group'", "'into'", "'orderby'",
	"'join'", "'let'", "'in'", "'on'", "'equals'", "'ascending'", "'descending'",
	"'**'", "'//'", "'%%'", "'+='", "'-='", "'*='", "'/='", "'%='", "':='",
	"'=='", "'<='", "'>='", "'><'", "'...'", "'..'", "'.'", "','", "'=>'",
	"'->'", "'<-'", "'~>'", "'<~'", "'='", "'<'", "'>'", "';'", "'('", "')'",
	"'{'", "'}'", "'['", "']'", "'::'", "':'", "'?'", "'@'", "'!'", "'~'",
	"'+'", "'-'", "'*'", "'/'", "'%'", "'\\'", "'&'", "'|'", "'I8'", "'U8'",
	"'I16'", "'U16'", "'I32'", "'U32'", "'I64'", "'U64'", "'F32'", "'F64'",
	"'Chr'", "'Str'", "'Bool'", "'Int'", "'Num'", "'Byte'", "'Any'", "'Nil'",
	"'True'", "'False'", "'Undefined'", "", "", "", "", "", "'_'", "", "",
	"", "'\n'",
}
var symbolicNames = []string{
	"", "LinqFrom", "LinqBy", "LinqSelect", "LinqWhere", "LinqGroup", "LinqInto",
	"LinqOrderby", "LinqJoin", "LinqLet", "LinqIn", "LinqOn", "LinqEquals",
	"LinqAscending", "LinqDescending", "Pow", "Root", "Log", "Add_Equal", "Sub_Equal",
	"Mul_Equal", "Div_Equal", "Mod_Equal", "Colon_Equal", "Equal_Equal", "Less_Equal",
	"Greater_Equal", "Not_Equal", "Dot_Dot_Dot", "Dot_Dot", "Dot", "Comma",
	"Equal_Arrow", "Right_Arrow", "Left_Arrow", "Right_Flow", "Left_Flow",
	"Equal", "Less", "Greater", "Semi", "Left_Paren", "Right_Paren", "Left_Brace",
	"Right_Brace", "Left_Brack", "Right_Brack", "Colon_Colon", "Colon", "Question",
	"At", "Bang", "Wave", "Add", "Sub", "Mul", "Div", "Mod", "Slash", "And",
	"Or", "TypeI8", "TypeU8", "TypeI16", "TypeU16", "TypeI32", "TypeU32", "TypeI64",
	"TypeU64", "TypeF32", "TypeF64", "TypeChr", "TypeStr", "TypeBool", "TypeInt",
	"TypeNum", "TypeByte", "TypeAny", "NilLiteral", "TrueLiteral", "FalseLiteral",
	"UndefinedLiteral", "NumberLiteral", "TextLiteral", "CharLiteral", "IDPrivate",
	"IDPublic", "Discard", "Big_Big_Comment", "Big_Comment", "Comment", "New_Line",
	"WS",
}

var ruleNames = []string{
	"program", "statement", "exportStatement", "importStatement", "namespaceSupportStatement",
	"typeAliasStatement", "typeRedefineStatement", "enumStatement", "enumSupportStatement",
	"namespaceVariableStatement", "namespaceControlStatement", "namespaceConstantStatement",
	"namespaceFunctionStatement", "packageStatement", "packageSupportStatement",
	"includeStatement", "packageNewStatement", "packageVariableStatement",
	"packageControlSubStatement", "packageEventStatement", "implementStatement",
	"implementSupportStatement", "implementFunctionStatement", "implementControlStatement",
	"overrideStatement", "overrideSupportStatement", "overrideFunctionStatement",
	"overrideControlStatement", "protocolStatement", "protocolSupportStatement",
	"protocolControlStatement", "protocolControlSubStatement", "protocolFunctionStatement",
	"functionStatement", "returnStatement", "parameterClauseIn", "parameterClauseOut",
	"parameterClauseSelf", "parameter", "functionSupportStatement", "judgeCaseStatement",
	"caseStatement", "caseExprStatement", "judgeStatement", "judgeElseStatement",
	"judgeIfStatement", "judgeElseIfStatement", "loopStatement", "loopEachStatement",
	"loopCaseStatement", "loopInfiniteStatement", "loopJumpStatement", "loopContinueStatement",
	"checkStatement", "usingStatement", "checkErrorStatement", "checkFinallyStatment",
	"reportStatement", "iteratorStatement", "variableStatement", "variableDeclaredStatement",
	"channelAssignStatement", "assignStatement", "expressionStatement", "primaryExpression",
	"expression", "callExpression", "tuple", "expressionList", "annotationSupport",
	"annotation", "annotationList", "annotationItem", "annotationAssign", "callFunc",
	"callChannel", "callElement", "callPkg", "callNew", "getType", "typeConversion",
	"pkgAssign", "pkgAssignElement", "listAssign", "setAssign", "dictionaryAssign",
	"callAwait", "list", "set", "dictionary", "dictionaryElement", "slice",
	"sliceFull", "sliceStart", "sliceEnd", "nameSpaceItem", "name", "templateDefine",
	"templateDefineItem", "templateCall", "lambda", "lambdaIn", "pkgAnonymous",
	"pkgAnonymousAssign", "pkgAnonymousAssignElement", "functionExpression",
	"tupleExpression", "plusMinus", "negate", "linq", "linqItem", "linqKeyword",
	"linqHeadKeyword", "linqBodyKeyword", "stringExpression", "stringExpressionElement",
	"dataStatement", "floatExpr", "integerExpr", "typeNotNull", "typeReference",
	"typeNullable", "typeType", "typeTuple", "typeArray", "typeList", "typeSet",
	"typeDictionary", "typeChannel", "typePackage", "typeFunction", "typeAny",
	"typeFunctionParameterClause", "typeBasic", "nilExpr", "boolExpr", "judgeType",
	"judge", "assign", "add", "mul", "pow", "call", "wave", "id", "idItem",
	"end", "more", "left_brace", "right_brace", "left_paren", "right_paren",
	"left_brack", "right_brack",
}
var decisionToDFA = make([]*antlr.DFA, len(deserializedATN.DecisionToState))

func init() {
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

type LiteParser struct {
	*antlr.BaseParser
}

func NewLiteParser(input antlr.TokenStream) *LiteParser {
	this := new(LiteParser)

	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "LiteParser.g4"

	return this
}

// LiteParser tokens.
const (
	LiteParserEOF              = antlr.TokenEOF
	LiteParserLinqFrom         = 1
	LiteParserLinqBy           = 2
	LiteParserLinqSelect       = 3
	LiteParserLinqWhere        = 4
	LiteParserLinqGroup        = 5
	LiteParserLinqInto         = 6
	LiteParserLinqOrderby      = 7
	LiteParserLinqJoin         = 8
	LiteParserLinqLet          = 9
	LiteParserLinqIn           = 10
	LiteParserLinqOn           = 11
	LiteParserLinqEquals       = 12
	LiteParserLinqAscending    = 13
	LiteParserLinqDescending   = 14
	LiteParserPow              = 15
	LiteParserRoot             = 16
	LiteParserLog              = 17
	LiteParserAdd_Equal        = 18
	LiteParserSub_Equal        = 19
	LiteParserMul_Equal        = 20
	LiteParserDiv_Equal        = 21
	LiteParserMod_Equal        = 22
	LiteParserColon_Equal      = 23
	LiteParserEqual_Equal      = 24
	LiteParserLess_Equal       = 25
	LiteParserGreater_Equal    = 26
	LiteParserNot_Equal        = 27
	LiteParserDot_Dot_Dot      = 28
	LiteParserDot_Dot          = 29
	LiteParserDot              = 30
	LiteParserComma            = 31
	LiteParserEqual_Arrow      = 32
	LiteParserRight_Arrow      = 33
	LiteParserLeft_Arrow       = 34
	LiteParserRight_Flow       = 35
	LiteParserLeft_Flow        = 36
	LiteParserEqual            = 37
	LiteParserLess             = 38
	LiteParserGreater          = 39
	LiteParserSemi             = 40
	LiteParserLeft_Paren       = 41
	LiteParserRight_Paren      = 42
	LiteParserLeft_Brace       = 43
	LiteParserRight_Brace      = 44
	LiteParserLeft_Brack       = 45
	LiteParserRight_Brack      = 46
	LiteParserColon_Colon      = 47
	LiteParserColon            = 48
	LiteParserQuestion         = 49
	LiteParserAt               = 50
	LiteParserBang             = 51
	LiteParserWave             = 52
	LiteParserAdd              = 53
	LiteParserSub              = 54
	LiteParserMul              = 55
	LiteParserDiv              = 56
	LiteParserMod              = 57
	LiteParserSlash            = 58
	LiteParserAnd              = 59
	LiteParserOr               = 60
	LiteParserTypeI8           = 61
	LiteParserTypeU8           = 62
	LiteParserTypeI16          = 63
	LiteParserTypeU16          = 64
	LiteParserTypeI32          = 65
	LiteParserTypeU32          = 66
	LiteParserTypeI64          = 67
	LiteParserTypeU64          = 68
	LiteParserTypeF32          = 69
	LiteParserTypeF64          = 70
	LiteParserTypeChr          = 71
	LiteParserTypeStr          = 72
	LiteParserTypeBool         = 73
	LiteParserTypeInt          = 74
	LiteParserTypeNum          = 75
	LiteParserTypeByte         = 76
	LiteParserTypeAny          = 77
	LiteParserNilLiteral       = 78
	LiteParserTrueLiteral      = 79
	LiteParserFalseLiteral     = 80
	LiteParserUndefinedLiteral = 81
	LiteParserNumberLiteral    = 82
	LiteParserTextLiteral      = 83
	LiteParserCharLiteral      = 84
	LiteParserIDPrivate        = 85
	LiteParserIDPublic         = 86
	LiteParserDiscard          = 87
	LiteParserBig_Big_Comment  = 88
	LiteParserBig_Comment      = 89
	LiteParserComment          = 90
	LiteParserNew_Line         = 91
	LiteParserWS               = 92
)

// LiteParser rules.
const (
	LiteParserRULE_program                     = 0
	LiteParserRULE_statement                   = 1
	LiteParserRULE_exportStatement             = 2
	LiteParserRULE_importStatement             = 3
	LiteParserRULE_namespaceSupportStatement   = 4
	LiteParserRULE_typeAliasStatement          = 5
	LiteParserRULE_typeRedefineStatement       = 6
	LiteParserRULE_enumStatement               = 7
	LiteParserRULE_enumSupportStatement        = 8
	LiteParserRULE_namespaceVariableStatement  = 9
	LiteParserRULE_namespaceControlStatement   = 10
	LiteParserRULE_namespaceConstantStatement  = 11
	LiteParserRULE_namespaceFunctionStatement  = 12
	LiteParserRULE_packageStatement            = 13
	LiteParserRULE_packageSupportStatement     = 14
	LiteParserRULE_includeStatement            = 15
	LiteParserRULE_packageNewStatement         = 16
	LiteParserRULE_packageVariableStatement    = 17
	LiteParserRULE_packageControlSubStatement  = 18
	LiteParserRULE_packageEventStatement       = 19
	LiteParserRULE_implementStatement          = 20
	LiteParserRULE_implementSupportStatement   = 21
	LiteParserRULE_implementFunctionStatement  = 22
	LiteParserRULE_implementControlStatement   = 23
	LiteParserRULE_overrideStatement           = 24
	LiteParserRULE_overrideSupportStatement    = 25
	LiteParserRULE_overrideFunctionStatement   = 26
	LiteParserRULE_overrideControlStatement    = 27
	LiteParserRULE_protocolStatement           = 28
	LiteParserRULE_protocolSupportStatement    = 29
	LiteParserRULE_protocolControlStatement    = 30
	LiteParserRULE_protocolControlSubStatement = 31
	LiteParserRULE_protocolFunctionStatement   = 32
	LiteParserRULE_functionStatement           = 33
	LiteParserRULE_returnStatement             = 34
	LiteParserRULE_parameterClauseIn           = 35
	LiteParserRULE_parameterClauseOut          = 36
	LiteParserRULE_parameterClauseSelf         = 37
	LiteParserRULE_parameter                   = 38
	LiteParserRULE_functionSupportStatement    = 39
	LiteParserRULE_judgeCaseStatement          = 40
	LiteParserRULE_caseStatement               = 41
	LiteParserRULE_caseExprStatement           = 42
	LiteParserRULE_judgeStatement              = 43
	LiteParserRULE_judgeElseStatement          = 44
	LiteParserRULE_judgeIfStatement            = 45
	LiteParserRULE_judgeElseIfStatement        = 46
	LiteParserRULE_loopStatement               = 47
	LiteParserRULE_loopEachStatement           = 48
	LiteParserRULE_loopCaseStatement           = 49
	LiteParserRULE_loopInfiniteStatement       = 50
	LiteParserRULE_loopJumpStatement           = 51
	LiteParserRULE_loopContinueStatement       = 52
	LiteParserRULE_checkStatement              = 53
	LiteParserRULE_usingStatement              = 54
	LiteParserRULE_checkErrorStatement         = 55
	LiteParserRULE_checkFinallyStatment        = 56
	LiteParserRULE_reportStatement             = 57
	LiteParserRULE_iteratorStatement           = 58
	LiteParserRULE_variableStatement           = 59
	LiteParserRULE_variableDeclaredStatement   = 60
	LiteParserRULE_channelAssignStatement      = 61
	LiteParserRULE_assignStatement             = 62
	LiteParserRULE_expressionStatement         = 63
	LiteParserRULE_primaryExpression           = 64
	LiteParserRULE_expression                  = 65
	LiteParserRULE_callExpression              = 66
	LiteParserRULE_tuple                       = 67
	LiteParserRULE_expressionList              = 68
	LiteParserRULE_annotationSupport           = 69
	LiteParserRULE_annotation                  = 70
	LiteParserRULE_annotationList              = 71
	LiteParserRULE_annotationItem              = 72
	LiteParserRULE_annotationAssign            = 73
	LiteParserRULE_callFunc                    = 74
	LiteParserRULE_callChannel                 = 75
	LiteParserRULE_callElement                 = 76
	LiteParserRULE_callPkg                     = 77
	LiteParserRULE_callNew                     = 78
	LiteParserRULE_getType                     = 79
	LiteParserRULE_typeConversion              = 80
	LiteParserRULE_pkgAssign                   = 81
	LiteParserRULE_pkgAssignElement            = 82
	LiteParserRULE_listAssign                  = 83
	LiteParserRULE_setAssign                   = 84
	LiteParserRULE_dictionaryAssign            = 85
	LiteParserRULE_callAwait                   = 86
	LiteParserRULE_list                        = 87
	LiteParserRULE_set                         = 88
	LiteParserRULE_dictionary                  = 89
	LiteParserRULE_dictionaryElement           = 90
	LiteParserRULE_slice                       = 91
	LiteParserRULE_sliceFull                   = 92
	LiteParserRULE_sliceStart                  = 93
	LiteParserRULE_sliceEnd                    = 94
	LiteParserRULE_nameSpaceItem               = 95
	LiteParserRULE_name                        = 96
	LiteParserRULE_templateDefine              = 97
	LiteParserRULE_templateDefineItem          = 98
	LiteParserRULE_templateCall                = 99
	LiteParserRULE_lambda                      = 100
	LiteParserRULE_lambdaIn                    = 101
	LiteParserRULE_pkgAnonymous                = 102
	LiteParserRULE_pkgAnonymousAssign          = 103
	LiteParserRULE_pkgAnonymousAssignElement   = 104
	LiteParserRULE_functionExpression          = 105
	LiteParserRULE_tupleExpression             = 106
	LiteParserRULE_plusMinus                   = 107
	LiteParserRULE_negate                      = 108
	LiteParserRULE_linq                        = 109
	LiteParserRULE_linqItem                    = 110
	LiteParserRULE_linqKeyword                 = 111
	LiteParserRULE_linqHeadKeyword             = 112
	LiteParserRULE_linqBodyKeyword             = 113
	LiteParserRULE_stringExpression            = 114
	LiteParserRULE_stringExpressionElement     = 115
	LiteParserRULE_dataStatement               = 116
	LiteParserRULE_floatExpr                   = 117
	LiteParserRULE_integerExpr                 = 118
	LiteParserRULE_typeNotNull                 = 119
	LiteParserRULE_typeReference               = 120
	LiteParserRULE_typeNullable                = 121
	LiteParserRULE_typeType                    = 122
	LiteParserRULE_typeTuple                   = 123
	LiteParserRULE_typeArray                   = 124
	LiteParserRULE_typeList                    = 125
	LiteParserRULE_typeSet                     = 126
	LiteParserRULE_typeDictionary              = 127
	LiteParserRULE_typeChannel                 = 128
	LiteParserRULE_typePackage                 = 129
	LiteParserRULE_typeFunction                = 130
	LiteParserRULE_typeAny                     = 131
	LiteParserRULE_typeFunctionParameterClause = 132
	LiteParserRULE_typeBasic                   = 133
	LiteParserRULE_nilExpr                     = 134
	LiteParserRULE_boolExpr                    = 135
	LiteParserRULE_judgeType                   = 136
	LiteParserRULE_judge                       = 137
	LiteParserRULE_assign                      = 138
	LiteParserRULE_add                         = 139
	LiteParserRULE_mul                         = 140
	LiteParserRULE_pow                         = 141
	LiteParserRULE_call                        = 142
	LiteParserRULE_wave                        = 143
	LiteParserRULE_id                          = 144
	LiteParserRULE_idItem                      = 145
	LiteParserRULE_end                         = 146
	LiteParserRULE_more                        = 147
	LiteParserRULE_left_brace                  = 148
	LiteParserRULE_right_brace                 = 149
	LiteParserRULE_left_paren                  = 150
	LiteParserRULE_right_paren                 = 151
	LiteParserRULE_left_brack                  = 152
	LiteParserRULE_right_brack                 = 153
)

// IProgramContext is an interface to support dynamic dispatch.
type IProgramContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProgramContext differentiates from other interfaces.
	IsProgramContext()
}

type ProgramContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProgramContext() *ProgramContext {
	var p = new(ProgramContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_program
	return p
}

func (*ProgramContext) IsProgramContext() {}

func NewProgramContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProgramContext {
	var p = new(ProgramContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_program

	return p
}

func (s *ProgramContext) GetParser() antlr.Parser { return s.parser }

func (s *ProgramContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *ProgramContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *ProgramContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProgramContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProgramContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitProgram(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Program() (localctx IProgramContext) {
	localctx = NewProgramContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, LiteParserRULE_program)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(309)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == LiteParserLeft_Brack || _la == LiteParserTextLiteral || _la == LiteParserNew_Line {
		{
			p.SetState(308)
			p.Statement()
		}

		p.SetState(311)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementContext() *StatementContext {
	var p = new(StatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_statement
	return p
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) ExportStatement() IExportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExportStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExportStatementContext)
}

func (s *StatementContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *StatementContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *StatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *StatementContext) AllNamespaceSupportStatement() []INamespaceSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INamespaceSupportStatementContext)(nil)).Elem())
	var tst = make([]INamespaceSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INamespaceSupportStatementContext)
		}
	}

	return tst
}

func (s *StatementContext) NamespaceSupportStatement(i int) INamespaceSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamespaceSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INamespaceSupportStatementContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Statement() (localctx IStatementContext) {
	localctx = NewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, LiteParserRULE_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(316)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserNew_Line {
		{
			p.SetState(313)
			p.Match(LiteParserNew_Line)
		}

		p.SetState(318)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(320)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Brack {
		{
			p.SetState(319)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(322)
		p.ExportStatement()
	}
	p.SetState(326)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(323)
				p.Match(LiteParserNew_Line)
			}

		}
		p.SetState(328)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext())
	}
	p.SetState(332)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(329)
				p.NamespaceSupportStatement()
			}

		}
		p.SetState(334)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext())
	}

	return localctx
}

// IExportStatementContext is an interface to support dynamic dispatch.
type IExportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExportStatementContext differentiates from other interfaces.
	IsExportStatementContext()
}

type ExportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExportStatementContext() *ExportStatementContext {
	var p = new(ExportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_exportStatement
	return p
}

func (*ExportStatementContext) IsExportStatementContext() {}

func NewExportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExportStatementContext {
	var p = new(ExportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_exportStatement

	return p
}

func (s *ExportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ExportStatementContext) TextLiteral() antlr.TerminalNode {
	return s.GetToken(LiteParserTextLiteral, 0)
}

func (s *ExportStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *ExportStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *ExportStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ExportStatementContext) AllImportStatement() []IImportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IImportStatementContext)(nil)).Elem())
	var tst = make([]IImportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IImportStatementContext)
		}
	}

	return tst
}

func (s *ExportStatementContext) ImportStatement(i int) IImportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IImportStatementContext)
}

func (s *ExportStatementContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *ExportStatementContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *ExportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitExportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) ExportStatement() (localctx IExportStatementContext) {
	localctx = NewExportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, LiteParserRULE_exportStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(335)
		p.Match(LiteParserTextLiteral)
	}
	{
		p.SetState(336)
		p.Left_brace()
	}
	p.SetState(341)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 6, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(339)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case LiteParserLeft_Brack, LiteParserTextLiteral:
				{
					p.SetState(337)
					p.ImportStatement()
				}

			case LiteParserNew_Line:
				{
					p.SetState(338)
					p.Match(LiteParserNew_Line)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(343)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 6, p.GetParserRuleContext())
	}
	{
		p.SetState(344)
		p.Right_brace()
	}
	{
		p.SetState(345)
		p.End()
	}

	return localctx
}

// IImportStatementContext is an interface to support dynamic dispatch.
type IImportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportStatementContext differentiates from other interfaces.
	IsImportStatementContext()
}

type ImportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportStatementContext() *ImportStatementContext {
	var p = new(ImportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_importStatement
	return p
}

func (*ImportStatementContext) IsImportStatementContext() {}

func NewImportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportStatementContext {
	var p = new(ImportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_importStatement

	return p
}

func (s *ImportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportStatementContext) TextLiteral() antlr.TerminalNode {
	return s.GetToken(LiteParserTextLiteral, 0)
}

func (s *ImportStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ImportStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *ImportStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *ImportStatementContext) Call() ICallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallContext)
}

func (s *ImportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitImportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) ImportStatement() (localctx IImportStatementContext) {
	localctx = NewImportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, LiteParserRULE_importStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(348)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Brack {
		{
			p.SetState(347)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(350)
		p.Match(LiteParserTextLiteral)
	}
	p.SetState(355)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<LiteParserLinqFrom)|(1<<LiteParserLinqBy)|(1<<LiteParserLinqSelect)|(1<<LiteParserLinqWhere)|(1<<LiteParserLinqGroup)|(1<<LiteParserLinqInto)|(1<<LiteParserLinqOrderby)|(1<<LiteParserLinqJoin)|(1<<LiteParserLinqLet)|(1<<LiteParserLinqIn)|(1<<LiteParserLinqOn)|(1<<LiteParserLinqEquals)|(1<<LiteParserLinqAscending)|(1<<LiteParserLinqDescending))) != 0) || (((_la-61)&-(0x1f+1)) == 0 && ((1<<uint((_la-61)))&((1<<(LiteParserTypeI8-61))|(1<<(LiteParserTypeU8-61))|(1<<(LiteParserTypeI16-61))|(1<<(LiteParserTypeU16-61))|(1<<(LiteParserTypeI32-61))|(1<<(LiteParserTypeU32-61))|(1<<(LiteParserTypeI64-61))|(1<<(LiteParserTypeU64-61))|(1<<(LiteParserTypeF32-61))|(1<<(LiteParserTypeF64-61))|(1<<(LiteParserTypeChr-61))|(1<<(LiteParserTypeStr-61))|(1<<(LiteParserTypeBool-61))|(1<<(LiteParserTypeInt-61))|(1<<(LiteParserTypeNum-61))|(1<<(LiteParserTypeByte-61))|(1<<(LiteParserTypeAny-61))|(1<<(LiteParserIDPrivate-61))|(1<<(LiteParserIDPublic-61)))) != 0) {
		{
			p.SetState(351)
			p.Id()
		}
		p.SetState(353)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == LiteParserDot {
			{
				p.SetState(352)
				p.Call()
			}

		}

	}
	{
		p.SetState(357)
		p.End()
	}

	return localctx
}

// INamespaceSupportStatementContext is an interface to support dynamic dispatch.
type INamespaceSupportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNamespaceSupportStatementContext differentiates from other interfaces.
	IsNamespaceSupportStatementContext()
}

type NamespaceSupportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamespaceSupportStatementContext() *NamespaceSupportStatementContext {
	var p = new(NamespaceSupportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_namespaceSupportStatement
	return p
}

func (*NamespaceSupportStatementContext) IsNamespaceSupportStatementContext() {}

func NewNamespaceSupportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamespaceSupportStatementContext {
	var p = new(NamespaceSupportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_namespaceSupportStatement

	return p
}

func (s *NamespaceSupportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *NamespaceSupportStatementContext) NamespaceVariableStatement() INamespaceVariableStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamespaceVariableStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INamespaceVariableStatementContext)
}

func (s *NamespaceSupportStatementContext) NamespaceControlStatement() INamespaceControlStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamespaceControlStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INamespaceControlStatementContext)
}

func (s *NamespaceSupportStatementContext) NamespaceFunctionStatement() INamespaceFunctionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamespaceFunctionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INamespaceFunctionStatementContext)
}

func (s *NamespaceSupportStatementContext) NamespaceConstantStatement() INamespaceConstantStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamespaceConstantStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INamespaceConstantStatementContext)
}

func (s *NamespaceSupportStatementContext) PackageStatement() IPackageStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackageStatementContext)
}

func (s *NamespaceSupportStatementContext) ProtocolStatement() IProtocolStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProtocolStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProtocolStatementContext)
}

func (s *NamespaceSupportStatementContext) ImplementStatement() IImplementStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImplementStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImplementStatementContext)
}

func (s *NamespaceSupportStatementContext) OverrideStatement() IOverrideStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOverrideStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOverrideStatementContext)
}

func (s *NamespaceSupportStatementContext) PackageNewStatement() IPackageNewStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageNewStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackageNewStatementContext)
}

func (s *NamespaceSupportStatementContext) EnumStatement() IEnumStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumStatementContext)
}

func (s *NamespaceSupportStatementContext) TypeAliasStatement() ITypeAliasStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAliasStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAliasStatementContext)
}

func (s *NamespaceSupportStatementContext) TypeRedefineStatement() ITypeRedefineStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeRedefineStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeRedefineStatementContext)
}

func (s *NamespaceSupportStatementContext) New_Line() antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, 0)
}

func (s *NamespaceSupportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamespaceSupportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamespaceSupportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitNamespaceSupportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) NamespaceSupportStatement() (localctx INamespaceSupportStatementContext) {
	localctx = NewNamespaceSupportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, LiteParserRULE_namespaceSupportStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(372)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 10, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(359)
			p.NamespaceVariableStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(360)
			p.NamespaceControlStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(361)
			p.NamespaceFunctionStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(362)
			p.NamespaceConstantStatement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(363)
			p.PackageStatement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(364)
			p.ProtocolStatement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(365)
			p.ImplementStatement()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(366)
			p.OverrideStatement()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(367)
			p.PackageNewStatement()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(368)
			p.EnumStatement()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(369)
			p.TypeAliasStatement()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(370)
			p.TypeRedefineStatement()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(371)
			p.Match(LiteParserNew_Line)
		}

	}

	return localctx
}

// ITypeAliasStatementContext is an interface to support dynamic dispatch.
type ITypeAliasStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeAliasStatementContext differentiates from other interfaces.
	IsTypeAliasStatementContext()
}

type TypeAliasStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeAliasStatementContext() *TypeAliasStatementContext {
	var p = new(TypeAliasStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_typeAliasStatement
	return p
}

func (*TypeAliasStatementContext) IsTypeAliasStatementContext() {}

func NewTypeAliasStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeAliasStatementContext {
	var p = new(TypeAliasStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_typeAliasStatement

	return p
}

func (s *TypeAliasStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeAliasStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *TypeAliasStatementContext) Equal_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserEqual_Arrow, 0)
}

func (s *TypeAliasStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeAliasStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *TypeAliasStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeAliasStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeAliasStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTypeAliasStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TypeAliasStatement() (localctx ITypeAliasStatementContext) {
	localctx = NewTypeAliasStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, LiteParserRULE_typeAliasStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(374)
		p.Id()
	}
	{
		p.SetState(375)
		p.Match(LiteParserEqual_Arrow)
	}
	{
		p.SetState(376)
		p.TypeType()
	}
	{
		p.SetState(377)
		p.End()
	}

	return localctx
}

// ITypeRedefineStatementContext is an interface to support dynamic dispatch.
type ITypeRedefineStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeRedefineStatementContext differentiates from other interfaces.
	IsTypeRedefineStatementContext()
}

type TypeRedefineStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeRedefineStatementContext() *TypeRedefineStatementContext {
	var p = new(TypeRedefineStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_typeRedefineStatement
	return p
}

func (*TypeRedefineStatementContext) IsTypeRedefineStatementContext() {}

func NewTypeRedefineStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeRedefineStatementContext {
	var p = new(TypeRedefineStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_typeRedefineStatement

	return p
}

func (s *TypeRedefineStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeRedefineStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *TypeRedefineStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *TypeRedefineStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeRedefineStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *TypeRedefineStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeRedefineStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeRedefineStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTypeRedefineStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TypeRedefineStatement() (localctx ITypeRedefineStatementContext) {
	localctx = NewTypeRedefineStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, LiteParserRULE_typeRedefineStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(379)
		p.Id()
	}
	{
		p.SetState(380)
		p.Match(LiteParserRight_Arrow)
	}
	{
		p.SetState(381)
		p.TypeType()
	}
	{
		p.SetState(382)
		p.End()
	}

	return localctx
}

// IEnumStatementContext is an interface to support dynamic dispatch.
type IEnumStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumStatementContext differentiates from other interfaces.
	IsEnumStatementContext()
}

type EnumStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumStatementContext() *EnumStatementContext {
	var p = new(EnumStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_enumStatement
	return p
}

func (*EnumStatementContext) IsEnumStatementContext() {}

func NewEnumStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumStatementContext {
	var p = new(EnumStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_enumStatement

	return p
}

func (s *EnumStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *EnumStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *EnumStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *EnumStatementContext) Left_brack() ILeft_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_brackContext)
}

func (s *EnumStatementContext) Right_brack() IRight_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_brackContext)
}

func (s *EnumStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *EnumStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *EnumStatementContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *EnumStatementContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *EnumStatementContext) AllEnumSupportStatement() []IEnumSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEnumSupportStatementContext)(nil)).Elem())
	var tst = make([]IEnumSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEnumSupportStatementContext)
		}
	}

	return tst
}

func (s *EnumStatementContext) EnumSupportStatement(i int) IEnumSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEnumSupportStatementContext)
}

func (s *EnumStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitEnumStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) EnumStatement() (localctx IEnumStatementContext) {
	localctx = NewEnumStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, LiteParserRULE_enumStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(385)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Brack {
		{
			p.SetState(384)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(387)
		p.Id()
	}
	{
		p.SetState(388)
		p.Match(LiteParserRight_Arrow)
	}
	p.SetState(392)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserNew_Line {
		{
			p.SetState(389)
			p.Match(LiteParserNew_Line)
		}

		p.SetState(394)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(395)
		p.TypeType()
	}
	{
		p.SetState(396)
		p.Left_brack()
	}
	p.SetState(400)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<LiteParserLinqFrom)|(1<<LiteParserLinqBy)|(1<<LiteParserLinqSelect)|(1<<LiteParserLinqWhere)|(1<<LiteParserLinqGroup)|(1<<LiteParserLinqInto)|(1<<LiteParserLinqOrderby)|(1<<LiteParserLinqJoin)|(1<<LiteParserLinqLet)|(1<<LiteParserLinqIn)|(1<<LiteParserLinqOn)|(1<<LiteParserLinqEquals)|(1<<LiteParserLinqAscending)|(1<<LiteParserLinqDescending))) != 0) || (((_la-61)&-(0x1f+1)) == 0 && ((1<<uint((_la-61)))&((1<<(LiteParserTypeI8-61))|(1<<(LiteParserTypeU8-61))|(1<<(LiteParserTypeI16-61))|(1<<(LiteParserTypeU16-61))|(1<<(LiteParserTypeI32-61))|(1<<(LiteParserTypeU32-61))|(1<<(LiteParserTypeI64-61))|(1<<(LiteParserTypeU64-61))|(1<<(LiteParserTypeF32-61))|(1<<(LiteParserTypeF64-61))|(1<<(LiteParserTypeChr-61))|(1<<(LiteParserTypeStr-61))|(1<<(LiteParserTypeBool-61))|(1<<(LiteParserTypeInt-61))|(1<<(LiteParserTypeNum-61))|(1<<(LiteParserTypeByte-61))|(1<<(LiteParserTypeAny-61))|(1<<(LiteParserIDPrivate-61))|(1<<(LiteParserIDPublic-61)))) != 0) {
		{
			p.SetState(397)
			p.EnumSupportStatement()
		}

		p.SetState(402)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(403)
		p.Right_brack()
	}
	{
		p.SetState(404)
		p.End()
	}

	return localctx
}

// IEnumSupportStatementContext is an interface to support dynamic dispatch.
type IEnumSupportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumSupportStatementContext differentiates from other interfaces.
	IsEnumSupportStatementContext()
}

type EnumSupportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumSupportStatementContext() *EnumSupportStatementContext {
	var p = new(EnumSupportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_enumSupportStatement
	return p
}

func (*EnumSupportStatementContext) IsEnumSupportStatementContext() {}

func NewEnumSupportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumSupportStatementContext {
	var p = new(EnumSupportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_enumSupportStatement

	return p
}

func (s *EnumSupportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumSupportStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *EnumSupportStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *EnumSupportStatementContext) Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserEqual, 0)
}

func (s *EnumSupportStatementContext) IntegerExpr() IIntegerExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntegerExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntegerExprContext)
}

func (s *EnumSupportStatementContext) Add() IAddContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAddContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAddContext)
}

func (s *EnumSupportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumSupportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumSupportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitEnumSupportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) EnumSupportStatement() (localctx IEnumSupportStatementContext) {
	localctx = NewEnumSupportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, LiteParserRULE_enumSupportStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(406)
		p.Id()
	}
	p.SetState(412)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserEqual {
		{
			p.SetState(407)
			p.Match(LiteParserEqual)
		}
		p.SetState(409)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == LiteParserAdd || _la == LiteParserSub {
			{
				p.SetState(408)
				p.Add()
			}

		}
		{
			p.SetState(411)
			p.IntegerExpr()
		}

	}
	{
		p.SetState(414)
		p.End()
	}

	return localctx
}

// INamespaceVariableStatementContext is an interface to support dynamic dispatch.
type INamespaceVariableStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNamespaceVariableStatementContext differentiates from other interfaces.
	IsNamespaceVariableStatementContext()
}

type NamespaceVariableStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamespaceVariableStatementContext() *NamespaceVariableStatementContext {
	var p = new(NamespaceVariableStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_namespaceVariableStatement
	return p
}

func (*NamespaceVariableStatementContext) IsNamespaceVariableStatementContext() {}

func NewNamespaceVariableStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamespaceVariableStatementContext {
	var p = new(NamespaceVariableStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_namespaceVariableStatement

	return p
}

func (s *NamespaceVariableStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *NamespaceVariableStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *NamespaceVariableStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *NamespaceVariableStatementContext) Colon_Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserColon_Equal, 0)
}

func (s *NamespaceVariableStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NamespaceVariableStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(LiteParserColon, 0)
}

func (s *NamespaceVariableStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *NamespaceVariableStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *NamespaceVariableStatementContext) Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserEqual, 0)
}

func (s *NamespaceVariableStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamespaceVariableStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamespaceVariableStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitNamespaceVariableStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) NamespaceVariableStatement() (localctx INamespaceVariableStatementContext) {
	localctx = NewNamespaceVariableStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, LiteParserRULE_namespaceVariableStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(417)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Brack {
		{
			p.SetState(416)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(419)
		p.Id()
	}
	p.SetState(428)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case LiteParserColon_Equal:
		{
			p.SetState(420)
			p.Match(LiteParserColon_Equal)
		}
		{
			p.SetState(421)
			p.expression(0)
		}

	case LiteParserColon:
		{
			p.SetState(422)
			p.Match(LiteParserColon)
		}
		{
			p.SetState(423)
			p.TypeType()
		}
		p.SetState(426)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == LiteParserEqual {
			{
				p.SetState(424)
				p.Match(LiteParserEqual)
			}
			{
				p.SetState(425)
				p.expression(0)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(430)
		p.End()
	}

	return localctx
}

// INamespaceControlStatementContext is an interface to support dynamic dispatch.
type INamespaceControlStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNamespaceControlStatementContext differentiates from other interfaces.
	IsNamespaceControlStatementContext()
}

type NamespaceControlStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamespaceControlStatementContext() *NamespaceControlStatementContext {
	var p = new(NamespaceControlStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_namespaceControlStatement
	return p
}

func (*NamespaceControlStatementContext) IsNamespaceControlStatementContext() {}

func NewNamespaceControlStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamespaceControlStatementContext {
	var p = new(NamespaceControlStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_namespaceControlStatement

	return p
}

func (s *NamespaceControlStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *NamespaceControlStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *NamespaceControlStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(LiteParserColon, 0)
}

func (s *NamespaceControlStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *NamespaceControlStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *NamespaceControlStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *NamespaceControlStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *NamespaceControlStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *NamespaceControlStatementContext) Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserEqual, 0)
}

func (s *NamespaceControlStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NamespaceControlStatementContext) AllPackageControlSubStatement() []IPackageControlSubStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPackageControlSubStatementContext)(nil)).Elem())
	var tst = make([]IPackageControlSubStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPackageControlSubStatementContext)
		}
	}

	return tst
}

func (s *NamespaceControlStatementContext) PackageControlSubStatement(i int) IPackageControlSubStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageControlSubStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPackageControlSubStatementContext)
}

func (s *NamespaceControlStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamespaceControlStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamespaceControlStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitNamespaceControlStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) NamespaceControlStatement() (localctx INamespaceControlStatementContext) {
	localctx = NewNamespaceControlStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, LiteParserRULE_namespaceControlStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(433)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Brack {
		{
			p.SetState(432)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(435)
		p.Id()
	}
	{
		p.SetState(436)
		p.Match(LiteParserColon)
	}
	{
		p.SetState(437)
		p.TypeType()
	}
	p.SetState(440)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserEqual {
		{
			p.SetState(438)
			p.Match(LiteParserEqual)
		}
		{
			p.SetState(439)
			p.expression(0)
		}

	}
	{
		p.SetState(442)
		p.Left_brace()
	}
	p.SetState(444)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<LiteParserLinqFrom)|(1<<LiteParserLinqBy)|(1<<LiteParserLinqSelect)|(1<<LiteParserLinqWhere)|(1<<LiteParserLinqGroup)|(1<<LiteParserLinqInto)|(1<<LiteParserLinqOrderby)|(1<<LiteParserLinqJoin)|(1<<LiteParserLinqLet)|(1<<LiteParserLinqIn)|(1<<LiteParserLinqOn)|(1<<LiteParserLinqEquals)|(1<<LiteParserLinqAscending)|(1<<LiteParserLinqDescending))) != 0) || (((_la-61)&-(0x1f+1)) == 0 && ((1<<uint((_la-61)))&((1<<(LiteParserTypeI8-61))|(1<<(LiteParserTypeU8-61))|(1<<(LiteParserTypeI16-61))|(1<<(LiteParserTypeU16-61))|(1<<(LiteParserTypeI32-61))|(1<<(LiteParserTypeU32-61))|(1<<(LiteParserTypeI64-61))|(1<<(LiteParserTypeU64-61))|(1<<(LiteParserTypeF32-61))|(1<<(LiteParserTypeF64-61))|(1<<(LiteParserTypeChr-61))|(1<<(LiteParserTypeStr-61))|(1<<(LiteParserTypeBool-61))|(1<<(LiteParserTypeInt-61))|(1<<(LiteParserTypeNum-61))|(1<<(LiteParserTypeByte-61))|(1<<(LiteParserTypeAny-61))|(1<<(LiteParserIDPrivate-61))|(1<<(LiteParserIDPublic-61)))) != 0) {
		{
			p.SetState(443)
			p.PackageControlSubStatement()
		}

		p.SetState(446)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(448)
		p.Right_brace()
	}
	{
		p.SetState(449)
		p.End()
	}

	return localctx
}

// INamespaceConstantStatementContext is an interface to support dynamic dispatch.
type INamespaceConstantStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNamespaceConstantStatementContext differentiates from other interfaces.
	IsNamespaceConstantStatementContext()
}

type NamespaceConstantStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamespaceConstantStatementContext() *NamespaceConstantStatementContext {
	var p = new(NamespaceConstantStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_namespaceConstantStatement
	return p
}

func (*NamespaceConstantStatementContext) IsNamespaceConstantStatementContext() {}

func NewNamespaceConstantStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamespaceConstantStatementContext {
	var p = new(NamespaceConstantStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_namespaceConstantStatement

	return p
}

func (s *NamespaceConstantStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *NamespaceConstantStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *NamespaceConstantStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NamespaceConstantStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *NamespaceConstantStatementContext) AllColon() []antlr.TerminalNode {
	return s.GetTokens(LiteParserColon)
}

func (s *NamespaceConstantStatementContext) Colon(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserColon, i)
}

func (s *NamespaceConstantStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *NamespaceConstantStatementContext) Colon_Colon() antlr.TerminalNode {
	return s.GetToken(LiteParserColon_Colon, 0)
}

func (s *NamespaceConstantStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *NamespaceConstantStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamespaceConstantStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamespaceConstantStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitNamespaceConstantStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) NamespaceConstantStatement() (localctx INamespaceConstantStatementContext) {
	localctx = NewNamespaceConstantStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, LiteParserRULE_namespaceConstantStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(452)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Brack {
		{
			p.SetState(451)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(454)
		p.Id()
	}
	p.SetState(460)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case LiteParserColon:
		{
			p.SetState(455)
			p.Match(LiteParserColon)
		}
		{
			p.SetState(456)
			p.TypeType()
		}
		{
			p.SetState(457)
			p.Match(LiteParserColon)
		}

	case LiteParserColon_Colon:
		{
			p.SetState(459)
			p.Match(LiteParserColon_Colon)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(462)
		p.expression(0)
	}
	{
		p.SetState(463)
		p.End()
	}

	return localctx
}

// INamespaceFunctionStatementContext is an interface to support dynamic dispatch.
type INamespaceFunctionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// IsNamespaceFunctionStatementContext differentiates from other interfaces.
	IsNamespaceFunctionStatementContext()
}

type NamespaceFunctionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
}

func NewEmptyNamespaceFunctionStatementContext() *NamespaceFunctionStatementContext {
	var p = new(NamespaceFunctionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_namespaceFunctionStatement
	return p
}

func (*NamespaceFunctionStatementContext) IsNamespaceFunctionStatementContext() {}

func NewNamespaceFunctionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamespaceFunctionStatementContext {
	var p = new(NamespaceFunctionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_namespaceFunctionStatement

	return p
}

func (s *NamespaceFunctionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *NamespaceFunctionStatementContext) GetT() antlr.Token { return s.t }

func (s *NamespaceFunctionStatementContext) SetT(v antlr.Token) { s.t = v }

func (s *NamespaceFunctionStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *NamespaceFunctionStatementContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *NamespaceFunctionStatementContext) ParameterClauseIn() IParameterClauseInContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseInContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseInContext)
}

func (s *NamespaceFunctionStatementContext) ParameterClauseOut() IParameterClauseOutContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseOutContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseOutContext)
}

func (s *NamespaceFunctionStatementContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *NamespaceFunctionStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *NamespaceFunctionStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *NamespaceFunctionStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *NamespaceFunctionStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *NamespaceFunctionStatementContext) Right_Flow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Flow, 0)
}

func (s *NamespaceFunctionStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *NamespaceFunctionStatementContext) TemplateDefine() ITemplateDefineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateDefineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateDefineContext)
}

func (s *NamespaceFunctionStatementContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *NamespaceFunctionStatementContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *NamespaceFunctionStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *NamespaceFunctionStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *NamespaceFunctionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamespaceFunctionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamespaceFunctionStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitNamespaceFunctionStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) NamespaceFunctionStatement() (localctx INamespaceFunctionStatementContext) {
	localctx = NewNamespaceFunctionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, LiteParserRULE_namespaceFunctionStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(466)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Brack {
		{
			p.SetState(465)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(468)
		p.Id()
	}
	p.SetState(470)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLess {
		{
			p.SetState(469)
			p.TemplateDefine()
		}

	}
	{
		p.SetState(472)
		p.Left_paren()
	}
	{
		p.SetState(473)
		p.ParameterClauseIn()
	}
	{
		p.SetState(474)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*NamespaceFunctionStatementContext).t = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == LiteParserRight_Arrow || _la == LiteParserRight_Flow) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*NamespaceFunctionStatementContext).t = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(478)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserNew_Line {
		{
			p.SetState(475)
			p.Match(LiteParserNew_Line)
		}

		p.SetState(480)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(481)
		p.ParameterClauseOut()
	}
	{
		p.SetState(482)
		p.Right_paren()
	}
	{
		p.SetState(483)
		p.Left_brace()
	}
	p.SetState(487)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 27, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(484)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(489)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 27, p.GetParserRuleContext())
	}
	{
		p.SetState(490)
		p.Right_brace()
	}
	{
		p.SetState(491)
		p.End()
	}

	return localctx
}

// IPackageStatementContext is an interface to support dynamic dispatch.
type IPackageStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackageStatementContext differentiates from other interfaces.
	IsPackageStatementContext()
}

type PackageStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageStatementContext() *PackageStatementContext {
	var p = new(PackageStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_packageStatement
	return p
}

func (*PackageStatementContext) IsPackageStatementContext() {}

func NewPackageStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageStatementContext {
	var p = new(PackageStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_packageStatement

	return p
}

func (s *PackageStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *PackageStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *PackageStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *PackageStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *PackageStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *PackageStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *PackageStatementContext) TemplateDefine() ITemplateDefineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateDefineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateDefineContext)
}

func (s *PackageStatementContext) AllPackageSupportStatement() []IPackageSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPackageSupportStatementContext)(nil)).Elem())
	var tst = make([]IPackageSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPackageSupportStatementContext)
		}
	}

	return tst
}

func (s *PackageStatementContext) PackageSupportStatement(i int) IPackageSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPackageSupportStatementContext)
}

func (s *PackageStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitPackageStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) PackageStatement() (localctx IPackageStatementContext) {
	localctx = NewPackageStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, LiteParserRULE_packageStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(494)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Brack {
		{
			p.SetState(493)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(496)
		p.Id()
	}
	p.SetState(498)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLess {
		{
			p.SetState(497)
			p.TemplateDefine()
		}

	}
	{
		p.SetState(500)
		p.Match(LiteParserRight_Arrow)
	}
	{
		p.SetState(501)
		p.Left_brace()
	}
	p.SetState(505)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 30, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(502)
				p.PackageSupportStatement()
			}

		}
		p.SetState(507)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 30, p.GetParserRuleContext())
	}
	{
		p.SetState(508)
		p.Right_brace()
	}
	{
		p.SetState(509)
		p.End()
	}

	return localctx
}

// IPackageSupportStatementContext is an interface to support dynamic dispatch.
type IPackageSupportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackageSupportStatementContext differentiates from other interfaces.
	IsPackageSupportStatementContext()
}

type PackageSupportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageSupportStatementContext() *PackageSupportStatementContext {
	var p = new(PackageSupportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_packageSupportStatement
	return p
}

func (*PackageSupportStatementContext) IsPackageSupportStatementContext() {}

func NewPackageSupportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageSupportStatementContext {
	var p = new(PackageSupportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_packageSupportStatement

	return p
}

func (s *PackageSupportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageSupportStatementContext) IncludeStatement() IIncludeStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIncludeStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIncludeStatementContext)
}

func (s *PackageSupportStatementContext) PackageVariableStatement() IPackageVariableStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageVariableStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackageVariableStatementContext)
}

func (s *PackageSupportStatementContext) PackageEventStatement() IPackageEventStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageEventStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackageEventStatementContext)
}

func (s *PackageSupportStatementContext) New_Line() antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, 0)
}

func (s *PackageSupportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageSupportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageSupportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitPackageSupportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) PackageSupportStatement() (localctx IPackageSupportStatementContext) {
	localctx = NewPackageSupportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, LiteParserRULE_packageSupportStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(515)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 31, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(511)
			p.IncludeStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(512)
			p.PackageVariableStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(513)
			p.PackageEventStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(514)
			p.Match(LiteParserNew_Line)
		}

	}

	return localctx
}

// IIncludeStatementContext is an interface to support dynamic dispatch.
type IIncludeStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIncludeStatementContext differentiates from other interfaces.
	IsIncludeStatementContext()
}

type IncludeStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIncludeStatementContext() *IncludeStatementContext {
	var p = new(IncludeStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_includeStatement
	return p
}

func (*IncludeStatementContext) IsIncludeStatementContext() {}

func NewIncludeStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IncludeStatementContext {
	var p = new(IncludeStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_includeStatement

	return p
}

func (s *IncludeStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *IncludeStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(LiteParserColon, 0)
}

func (s *IncludeStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *IncludeStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *IncludeStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IncludeStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IncludeStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitIncludeStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) IncludeStatement() (localctx IIncludeStatementContext) {
	localctx = NewIncludeStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, LiteParserRULE_includeStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(517)
		p.Match(LiteParserColon)
	}
	{
		p.SetState(518)
		p.TypeType()
	}
	{
		p.SetState(519)
		p.End()
	}

	return localctx
}

// IPackageNewStatementContext is an interface to support dynamic dispatch.
type IPackageNewStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackageNewStatementContext differentiates from other interfaces.
	IsPackageNewStatementContext()
}

type PackageNewStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageNewStatementContext() *PackageNewStatementContext {
	var p = new(PackageNewStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_packageNewStatement
	return p
}

func (*PackageNewStatementContext) IsPackageNewStatementContext() {}

func NewPackageNewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageNewStatementContext {
	var p = new(PackageNewStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_packageNewStatement

	return p
}

func (s *PackageNewStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageNewStatementContext) ParameterClauseSelf() IParameterClauseSelfContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseSelfContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseSelfContext)
}

func (s *PackageNewStatementContext) Less() antlr.TerminalNode {
	return s.GetToken(LiteParserLess, 0)
}

func (s *PackageNewStatementContext) Greater() antlr.TerminalNode {
	return s.GetToken(LiteParserGreater, 0)
}

func (s *PackageNewStatementContext) AllLeft_paren() []ILeft_parenContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem())
	var tst = make([]ILeft_parenContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILeft_parenContext)
		}
	}

	return tst
}

func (s *PackageNewStatementContext) Left_paren(i int) ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *PackageNewStatementContext) ParameterClauseIn() IParameterClauseInContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseInContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseInContext)
}

func (s *PackageNewStatementContext) AllRight_paren() []IRight_parenContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRight_parenContext)(nil)).Elem())
	var tst = make([]IRight_parenContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRight_parenContext)
		}
	}

	return tst
}

func (s *PackageNewStatementContext) Right_paren(i int) IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *PackageNewStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *PackageNewStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *PackageNewStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *PackageNewStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *PackageNewStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *PackageNewStatementContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *PackageNewStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageNewStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageNewStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitPackageNewStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) PackageNewStatement() (localctx IPackageNewStatementContext) {
	localctx = NewPackageNewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, LiteParserRULE_packageNewStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(522)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Brack {
		{
			p.SetState(521)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(524)
		p.ParameterClauseSelf()
	}
	{
		p.SetState(525)
		p.Match(LiteParserLess)
	}
	{
		p.SetState(526)
		p.Match(LiteParserGreater)
	}
	{
		p.SetState(527)
		p.Left_paren()
	}
	{
		p.SetState(528)
		p.ParameterClauseIn()
	}
	{
		p.SetState(529)
		p.Right_paren()
	}
	p.SetState(536)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Paren {
		{
			p.SetState(530)
			p.Left_paren()
		}
		p.SetState(532)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<LiteParserLinqFrom)|(1<<LiteParserLinqBy)|(1<<LiteParserLinqSelect)|(1<<LiteParserLinqWhere)|(1<<LiteParserLinqGroup)|(1<<LiteParserLinqInto)|(1<<LiteParserLinqOrderby)|(1<<LiteParserLinqJoin)|(1<<LiteParserLinqLet)|(1<<LiteParserLinqIn)|(1<<LiteParserLinqOn)|(1<<LiteParserLinqEquals)|(1<<LiteParserLinqAscending)|(1<<LiteParserLinqDescending))) != 0) || (((_la-36)&-(0x1f+1)) == 0 && ((1<<uint((_la-36)))&((1<<(LiteParserLeft_Flow-36))|(1<<(LiteParserLess-36))|(1<<(LiteParserLeft_Paren-36))|(1<<(LiteParserLeft_Brace-36))|(1<<(LiteParserLeft_Brack-36))|(1<<(LiteParserQuestion-36))|(1<<(LiteParserBang-36))|(1<<(LiteParserWave-36))|(1<<(LiteParserAdd-36))|(1<<(LiteParserSub-36))|(1<<(LiteParserTypeI8-36))|(1<<(LiteParserTypeU8-36))|(1<<(LiteParserTypeI16-36))|(1<<(LiteParserTypeU16-36))|(1<<(LiteParserTypeI32-36))|(1<<(LiteParserTypeU32-36))|(1<<(LiteParserTypeI64-36)))) != 0) || (((_la-68)&-(0x1f+1)) == 0 && ((1<<uint((_la-68)))&((1<<(LiteParserTypeU64-68))|(1<<(LiteParserTypeF32-68))|(1<<(LiteParserTypeF64-68))|(1<<(LiteParserTypeChr-68))|(1<<(LiteParserTypeStr-68))|(1<<(LiteParserTypeBool-68))|(1<<(LiteParserTypeInt-68))|(1<<(LiteParserTypeNum-68))|(1<<(LiteParserTypeByte-68))|(1<<(LiteParserTypeAny-68))|(1<<(LiteParserNilLiteral-68))|(1<<(LiteParserTrueLiteral-68))|(1<<(LiteParserFalseLiteral-68))|(1<<(LiteParserUndefinedLiteral-68))|(1<<(LiteParserNumberLiteral-68))|(1<<(LiteParserTextLiteral-68))|(1<<(LiteParserCharLiteral-68))|(1<<(LiteParserIDPrivate-68))|(1<<(LiteParserIDPublic-68))|(1<<(LiteParserDiscard-68)))) != 0) {
			{
				p.SetState(531)
				p.ExpressionList()
			}

		}
		{
			p.SetState(534)
			p.Right_paren()
		}

	}
	{
		p.SetState(538)
		p.Left_brace()
	}
	p.SetState(542)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 35, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(539)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(544)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 35, p.GetParserRuleContext())
	}
	{
		p.SetState(545)
		p.Right_brace()
	}

	return localctx
}

// IPackageVariableStatementContext is an interface to support dynamic dispatch.
type IPackageVariableStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackageVariableStatementContext differentiates from other interfaces.
	IsPackageVariableStatementContext()
}

type PackageVariableStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageVariableStatementContext() *PackageVariableStatementContext {
	var p = new(PackageVariableStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_packageVariableStatement
	return p
}

func (*PackageVariableStatementContext) IsPackageVariableStatementContext() {}

func NewPackageVariableStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageVariableStatementContext {
	var p = new(PackageVariableStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_packageVariableStatement

	return p
}

func (s *PackageVariableStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageVariableStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *PackageVariableStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *PackageVariableStatementContext) Colon_Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserColon_Equal, 0)
}

func (s *PackageVariableStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PackageVariableStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(LiteParserColon, 0)
}

func (s *PackageVariableStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *PackageVariableStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *PackageVariableStatementContext) Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserEqual, 0)
}

func (s *PackageVariableStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageVariableStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageVariableStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitPackageVariableStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) PackageVariableStatement() (localctx IPackageVariableStatementContext) {
	localctx = NewPackageVariableStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, LiteParserRULE_packageVariableStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(548)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Brack {
		{
			p.SetState(547)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(550)
		p.Id()
	}
	p.SetState(559)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case LiteParserColon_Equal:
		{
			p.SetState(551)
			p.Match(LiteParserColon_Equal)
		}
		{
			p.SetState(552)
			p.expression(0)
		}

	case LiteParserColon:
		{
			p.SetState(553)
			p.Match(LiteParserColon)
		}
		{
			p.SetState(554)
			p.TypeType()
		}
		p.SetState(557)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == LiteParserEqual {
			{
				p.SetState(555)
				p.Match(LiteParserEqual)
			}
			{
				p.SetState(556)
				p.expression(0)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(561)
		p.End()
	}

	return localctx
}

// IPackageControlSubStatementContext is an interface to support dynamic dispatch.
type IPackageControlSubStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackageControlSubStatementContext differentiates from other interfaces.
	IsPackageControlSubStatementContext()
}

type PackageControlSubStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageControlSubStatementContext() *PackageControlSubStatementContext {
	var p = new(PackageControlSubStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_packageControlSubStatement
	return p
}

func (*PackageControlSubStatementContext) IsPackageControlSubStatementContext() {}

func NewPackageControlSubStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageControlSubStatementContext {
	var p = new(PackageControlSubStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_packageControlSubStatement

	return p
}

func (s *PackageControlSubStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageControlSubStatementContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *PackageControlSubStatementContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *PackageControlSubStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *PackageControlSubStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *PackageControlSubStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *PackageControlSubStatementContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *PackageControlSubStatementContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *PackageControlSubStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *PackageControlSubStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *PackageControlSubStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageControlSubStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageControlSubStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitPackageControlSubStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) PackageControlSubStatement() (localctx IPackageControlSubStatementContext) {
	localctx = NewPackageControlSubStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, LiteParserRULE_packageControlSubStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(563)
		p.Id()
	}
	p.SetState(568)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Paren {
		{
			p.SetState(564)
			p.Left_paren()
		}
		{
			p.SetState(565)
			p.Id()
		}
		{
			p.SetState(566)
			p.Right_paren()
		}

	}
	{
		p.SetState(570)
		p.Left_brace()
	}
	p.SetState(572)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(571)
				p.FunctionSupportStatement()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(574)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 40, p.GetParserRuleContext())
	}
	{
		p.SetState(576)
		p.Right_brace()
	}
	{
		p.SetState(577)
		p.End()
	}

	return localctx
}

// IPackageEventStatementContext is an interface to support dynamic dispatch.
type IPackageEventStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackageEventStatementContext differentiates from other interfaces.
	IsPackageEventStatementContext()
}

type PackageEventStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageEventStatementContext() *PackageEventStatementContext {
	var p = new(PackageEventStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_packageEventStatement
	return p
}

func (*PackageEventStatementContext) IsPackageEventStatementContext() {}

func NewPackageEventStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageEventStatementContext {
	var p = new(PackageEventStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_packageEventStatement

	return p
}

func (s *PackageEventStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageEventStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *PackageEventStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(LiteParserColon, 0)
}

func (s *PackageEventStatementContext) Left_brack() ILeft_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_brackContext)
}

func (s *PackageEventStatementContext) Question() antlr.TerminalNode {
	return s.GetToken(LiteParserQuestion, 0)
}

func (s *PackageEventStatementContext) Right_brack() IRight_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_brackContext)
}

func (s *PackageEventStatementContext) NameSpaceItem() INameSpaceItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameSpaceItemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameSpaceItemContext)
}

func (s *PackageEventStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *PackageEventStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageEventStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageEventStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitPackageEventStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) PackageEventStatement() (localctx IPackageEventStatementContext) {
	localctx = NewPackageEventStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, LiteParserRULE_packageEventStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(579)
		p.Id()
	}
	{
		p.SetState(580)
		p.Match(LiteParserColon)
	}
	{
		p.SetState(581)
		p.Left_brack()
	}
	{
		p.SetState(582)
		p.Match(LiteParserQuestion)
	}
	{
		p.SetState(583)
		p.Right_brack()
	}
	{
		p.SetState(584)
		p.NameSpaceItem()
	}
	{
		p.SetState(585)
		p.End()
	}

	return localctx
}

// IImplementStatementContext is an interface to support dynamic dispatch.
type IImplementStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImplementStatementContext differentiates from other interfaces.
	IsImplementStatementContext()
}

type ImplementStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImplementStatementContext() *ImplementStatementContext {
	var p = new(ImplementStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_implementStatement
	return p
}

func (*ImplementStatementContext) IsImplementStatementContext() {}

func NewImplementStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImplementStatementContext {
	var p = new(ImplementStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_implementStatement

	return p
}

func (s *ImplementStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ImplementStatementContext) ParameterClauseSelf() IParameterClauseSelfContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseSelfContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseSelfContext)
}

func (s *ImplementStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *ImplementStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *ImplementStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *ImplementStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ImplementStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *ImplementStatementContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *ImplementStatementContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *ImplementStatementContext) AllImplementSupportStatement() []IImplementSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IImplementSupportStatementContext)(nil)).Elem())
	var tst = make([]IImplementSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IImplementSupportStatementContext)
		}
	}

	return tst
}

func (s *ImplementStatementContext) ImplementSupportStatement(i int) IImplementSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImplementSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IImplementSupportStatementContext)
}

func (s *ImplementStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImplementStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImplementStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitImplementStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) ImplementStatement() (localctx IImplementStatementContext) {
	localctx = NewImplementStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, LiteParserRULE_implementStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(587)
		p.ParameterClauseSelf()
	}
	{
		p.SetState(588)
		p.Match(LiteParserRight_Arrow)
	}
	p.SetState(590)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<LiteParserLinqFrom)|(1<<LiteParserLinqBy)|(1<<LiteParserLinqSelect)|(1<<LiteParserLinqWhere)|(1<<LiteParserLinqGroup)|(1<<LiteParserLinqInto)|(1<<LiteParserLinqOrderby)|(1<<LiteParserLinqJoin)|(1<<LiteParserLinqLet)|(1<<LiteParserLinqIn)|(1<<LiteParserLinqOn)|(1<<LiteParserLinqEquals)|(1<<LiteParserLinqAscending)|(1<<LiteParserLinqDescending))) != 0) || (((_la-41)&-(0x1f+1)) == 0 && ((1<<uint((_la-41)))&((1<<(LiteParserLeft_Paren-41))|(1<<(LiteParserLeft_Brack-41))|(1<<(LiteParserQuestion-41))|(1<<(LiteParserBang-41))|(1<<(LiteParserTypeI8-41))|(1<<(LiteParserTypeU8-41))|(1<<(LiteParserTypeI16-41))|(1<<(LiteParserTypeU16-41))|(1<<(LiteParserTypeI32-41))|(1<<(LiteParserTypeU32-41))|(1<<(LiteParserTypeI64-41))|(1<<(LiteParserTypeU64-41))|(1<<(LiteParserTypeF32-41))|(1<<(LiteParserTypeF64-41))|(1<<(LiteParserTypeChr-41))|(1<<(LiteParserTypeStr-41)))) != 0) || (((_la-73)&-(0x1f+1)) == 0 && ((1<<uint((_la-73)))&((1<<(LiteParserTypeBool-73))|(1<<(LiteParserTypeInt-73))|(1<<(LiteParserTypeNum-73))|(1<<(LiteParserTypeByte-73))|(1<<(LiteParserTypeAny-73))|(1<<(LiteParserIDPrivate-73))|(1<<(LiteParserIDPublic-73)))) != 0) {
		{
			p.SetState(589)
			p.TypeType()
		}

	}
	p.SetState(595)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserNew_Line {
		{
			p.SetState(592)
			p.Match(LiteParserNew_Line)
		}

		p.SetState(597)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(598)
		p.Left_brace()
	}
	p.SetState(602)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 43, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(599)
				p.ImplementSupportStatement()
			}

		}
		p.SetState(604)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 43, p.GetParserRuleContext())
	}
	{
		p.SetState(605)
		p.Right_brace()
	}
	{
		p.SetState(606)
		p.End()
	}

	return localctx
}

// IImplementSupportStatementContext is an interface to support dynamic dispatch.
type IImplementSupportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImplementSupportStatementContext differentiates from other interfaces.
	IsImplementSupportStatementContext()
}

type ImplementSupportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImplementSupportStatementContext() *ImplementSupportStatementContext {
	var p = new(ImplementSupportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_implementSupportStatement
	return p
}

func (*ImplementSupportStatementContext) IsImplementSupportStatementContext() {}

func NewImplementSupportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImplementSupportStatementContext {
	var p = new(ImplementSupportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_implementSupportStatement

	return p
}

func (s *ImplementSupportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ImplementSupportStatementContext) ImplementFunctionStatement() IImplementFunctionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImplementFunctionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImplementFunctionStatementContext)
}

func (s *ImplementSupportStatementContext) ImplementControlStatement() IImplementControlStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImplementControlStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImplementControlStatementContext)
}

func (s *ImplementSupportStatementContext) New_Line() antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, 0)
}

func (s *ImplementSupportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImplementSupportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImplementSupportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitImplementSupportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) ImplementSupportStatement() (localctx IImplementSupportStatementContext) {
	localctx = NewImplementSupportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, LiteParserRULE_implementSupportStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(611)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 44, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(608)
			p.ImplementFunctionStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(609)
			p.ImplementControlStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(610)
			p.Match(LiteParserNew_Line)
		}

	}

	return localctx
}

// IImplementFunctionStatementContext is an interface to support dynamic dispatch.
type IImplementFunctionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetN returns the n token.
	GetN() antlr.Token

	// GetT returns the t token.
	GetT() antlr.Token

	// SetN sets the n token.
	SetN(antlr.Token)

	// SetT sets the t token.
	SetT(antlr.Token)

	// IsImplementFunctionStatementContext differentiates from other interfaces.
	IsImplementFunctionStatementContext()
}

type ImplementFunctionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	n      antlr.Token
	t      antlr.Token
}

func NewEmptyImplementFunctionStatementContext() *ImplementFunctionStatementContext {
	var p = new(ImplementFunctionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_implementFunctionStatement
	return p
}

func (*ImplementFunctionStatementContext) IsImplementFunctionStatementContext() {}

func NewImplementFunctionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImplementFunctionStatementContext {
	var p = new(ImplementFunctionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_implementFunctionStatement

	return p
}

func (s *ImplementFunctionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ImplementFunctionStatementContext) GetN() antlr.Token { return s.n }

func (s *ImplementFunctionStatementContext) GetT() antlr.Token { return s.t }

func (s *ImplementFunctionStatementContext) SetN(v antlr.Token) { s.n = v }

func (s *ImplementFunctionStatementContext) SetT(v antlr.Token) { s.t = v }

func (s *ImplementFunctionStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *ImplementFunctionStatementContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *ImplementFunctionStatementContext) ParameterClauseIn() IParameterClauseInContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseInContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseInContext)
}

func (s *ImplementFunctionStatementContext) ParameterClauseOut() IParameterClauseOutContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseOutContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseOutContext)
}

func (s *ImplementFunctionStatementContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *ImplementFunctionStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *ImplementFunctionStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *ImplementFunctionStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ImplementFunctionStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *ImplementFunctionStatementContext) Right_Flow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Flow, 0)
}

func (s *ImplementFunctionStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *ImplementFunctionStatementContext) TemplateDefine() ITemplateDefineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateDefineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateDefineContext)
}

func (s *ImplementFunctionStatementContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *ImplementFunctionStatementContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *ImplementFunctionStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *ImplementFunctionStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *ImplementFunctionStatementContext) Discard() antlr.TerminalNode {
	return s.GetToken(LiteParserDiscard, 0)
}

func (s *ImplementFunctionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImplementFunctionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImplementFunctionStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitImplementFunctionStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) ImplementFunctionStatement() (localctx IImplementFunctionStatementContext) {
	localctx = NewImplementFunctionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, LiteParserRULE_implementFunctionStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(614)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Brack {
		{
			p.SetState(613)
			p.AnnotationSupport()
		}

	}
	p.SetState(617)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserDiscard {
		{
			p.SetState(616)

			var _m = p.Match(LiteParserDiscard)

			localctx.(*ImplementFunctionStatementContext).n = _m
		}

	}
	{
		p.SetState(619)
		p.Id()
	}
	p.SetState(621)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLess {
		{
			p.SetState(620)
			p.TemplateDefine()
		}

	}
	{
		p.SetState(623)
		p.Left_paren()
	}
	{
		p.SetState(624)
		p.ParameterClauseIn()
	}
	{
		p.SetState(625)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*ImplementFunctionStatementContext).t = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == LiteParserRight_Arrow || _la == LiteParserRight_Flow) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*ImplementFunctionStatementContext).t = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(629)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserNew_Line {
		{
			p.SetState(626)
			p.Match(LiteParserNew_Line)
		}

		p.SetState(631)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(632)
		p.ParameterClauseOut()
	}
	{
		p.SetState(633)
		p.Right_paren()
	}
	{
		p.SetState(634)
		p.Left_brace()
	}
	p.SetState(638)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 49, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(635)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(640)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 49, p.GetParserRuleContext())
	}
	{
		p.SetState(641)
		p.Right_brace()
	}
	{
		p.SetState(642)
		p.End()
	}

	return localctx
}

// IImplementControlStatementContext is an interface to support dynamic dispatch.
type IImplementControlStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetN returns the n token.
	GetN() antlr.Token

	// SetN sets the n token.
	SetN(antlr.Token)

	// IsImplementControlStatementContext differentiates from other interfaces.
	IsImplementControlStatementContext()
}

type ImplementControlStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	n      antlr.Token
}

func NewEmptyImplementControlStatementContext() *ImplementControlStatementContext {
	var p = new(ImplementControlStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_implementControlStatement
	return p
}

func (*ImplementControlStatementContext) IsImplementControlStatementContext() {}

func NewImplementControlStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImplementControlStatementContext {
	var p = new(ImplementControlStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_implementControlStatement

	return p
}

func (s *ImplementControlStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ImplementControlStatementContext) GetN() antlr.Token { return s.n }

func (s *ImplementControlStatementContext) SetN(v antlr.Token) { s.n = v }

func (s *ImplementControlStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *ImplementControlStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(LiteParserColon, 0)
}

func (s *ImplementControlStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *ImplementControlStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *ImplementControlStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *ImplementControlStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ImplementControlStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *ImplementControlStatementContext) AllPackageControlSubStatement() []IPackageControlSubStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPackageControlSubStatementContext)(nil)).Elem())
	var tst = make([]IPackageControlSubStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPackageControlSubStatementContext)
		}
	}

	return tst
}

func (s *ImplementControlStatementContext) PackageControlSubStatement(i int) IPackageControlSubStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageControlSubStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPackageControlSubStatementContext)
}

func (s *ImplementControlStatementContext) Discard() antlr.TerminalNode {
	return s.GetToken(LiteParserDiscard, 0)
}

func (s *ImplementControlStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImplementControlStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImplementControlStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitImplementControlStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) ImplementControlStatement() (localctx IImplementControlStatementContext) {
	localctx = NewImplementControlStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, LiteParserRULE_implementControlStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(645)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Brack {
		{
			p.SetState(644)
			p.AnnotationSupport()
		}

	}
	p.SetState(648)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserDiscard {
		{
			p.SetState(647)

			var _m = p.Match(LiteParserDiscard)

			localctx.(*ImplementControlStatementContext).n = _m
		}

	}
	{
		p.SetState(650)
		p.Id()
	}
	{
		p.SetState(651)
		p.Match(LiteParserColon)
	}
	{
		p.SetState(652)
		p.TypeType()
	}
	{
		p.SetState(653)
		p.Left_brace()
	}
	p.SetState(655)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<LiteParserLinqFrom)|(1<<LiteParserLinqBy)|(1<<LiteParserLinqSelect)|(1<<LiteParserLinqWhere)|(1<<LiteParserLinqGroup)|(1<<LiteParserLinqInto)|(1<<LiteParserLinqOrderby)|(1<<LiteParserLinqJoin)|(1<<LiteParserLinqLet)|(1<<LiteParserLinqIn)|(1<<LiteParserLinqOn)|(1<<LiteParserLinqEquals)|(1<<LiteParserLinqAscending)|(1<<LiteParserLinqDescending))) != 0) || (((_la-61)&-(0x1f+1)) == 0 && ((1<<uint((_la-61)))&((1<<(LiteParserTypeI8-61))|(1<<(LiteParserTypeU8-61))|(1<<(LiteParserTypeI16-61))|(1<<(LiteParserTypeU16-61))|(1<<(LiteParserTypeI32-61))|(1<<(LiteParserTypeU32-61))|(1<<(LiteParserTypeI64-61))|(1<<(LiteParserTypeU64-61))|(1<<(LiteParserTypeF32-61))|(1<<(LiteParserTypeF64-61))|(1<<(LiteParserTypeChr-61))|(1<<(LiteParserTypeStr-61))|(1<<(LiteParserTypeBool-61))|(1<<(LiteParserTypeInt-61))|(1<<(LiteParserTypeNum-61))|(1<<(LiteParserTypeByte-61))|(1<<(LiteParserTypeAny-61))|(1<<(LiteParserIDPrivate-61))|(1<<(LiteParserIDPublic-61)))) != 0) {
		{
			p.SetState(654)
			p.PackageControlSubStatement()
		}

		p.SetState(657)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(659)
		p.Right_brace()
	}
	{
		p.SetState(660)
		p.End()
	}

	return localctx
}

// IOverrideStatementContext is an interface to support dynamic dispatch.
type IOverrideStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOverrideStatementContext differentiates from other interfaces.
	IsOverrideStatementContext()
}

type OverrideStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOverrideStatementContext() *OverrideStatementContext {
	var p = new(OverrideStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_overrideStatement
	return p
}

func (*OverrideStatementContext) IsOverrideStatementContext() {}

func NewOverrideStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OverrideStatementContext {
	var p = new(OverrideStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_overrideStatement

	return p
}

func (s *OverrideStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *OverrideStatementContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *OverrideStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *OverrideStatementContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *OverrideStatementContext) ParameterClauseSelf() IParameterClauseSelfContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseSelfContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseSelfContext)
}

func (s *OverrideStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *OverrideStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *OverrideStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *OverrideStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *OverrideStatementContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *OverrideStatementContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *OverrideStatementContext) AllOverrideSupportStatement() []IOverrideSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOverrideSupportStatementContext)(nil)).Elem())
	var tst = make([]IOverrideSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOverrideSupportStatementContext)
		}
	}

	return tst
}

func (s *OverrideStatementContext) OverrideSupportStatement(i int) IOverrideSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOverrideSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOverrideSupportStatementContext)
}

func (s *OverrideStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OverrideStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OverrideStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitOverrideStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) OverrideStatement() (localctx IOverrideStatementContext) {
	localctx = NewOverrideStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, LiteParserRULE_overrideStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(662)
		p.Left_paren()
	}
	{
		p.SetState(663)
		p.Id()
	}
	{
		p.SetState(664)
		p.Right_paren()
	}
	{
		p.SetState(665)
		p.ParameterClauseSelf()
	}
	{
		p.SetState(666)
		p.Match(LiteParserRight_Arrow)
	}
	p.SetState(670)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserNew_Line {
		{
			p.SetState(667)
			p.Match(LiteParserNew_Line)
		}

		p.SetState(672)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(673)
		p.Left_brace()
	}
	p.SetState(677)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 54, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(674)
				p.OverrideSupportStatement()
			}

		}
		p.SetState(679)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 54, p.GetParserRuleContext())
	}
	{
		p.SetState(680)
		p.Right_brace()
	}
	{
		p.SetState(681)
		p.End()
	}

	return localctx
}

// IOverrideSupportStatementContext is an interface to support dynamic dispatch.
type IOverrideSupportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOverrideSupportStatementContext differentiates from other interfaces.
	IsOverrideSupportStatementContext()
}

type OverrideSupportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOverrideSupportStatementContext() *OverrideSupportStatementContext {
	var p = new(OverrideSupportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_overrideSupportStatement
	return p
}

func (*OverrideSupportStatementContext) IsOverrideSupportStatementContext() {}

func NewOverrideSupportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OverrideSupportStatementContext {
	var p = new(OverrideSupportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_overrideSupportStatement

	return p
}

func (s *OverrideSupportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *OverrideSupportStatementContext) OverrideFunctionStatement() IOverrideFunctionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOverrideFunctionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOverrideFunctionStatementContext)
}

func (s *OverrideSupportStatementContext) OverrideControlStatement() IOverrideControlStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOverrideControlStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOverrideControlStatementContext)
}

func (s *OverrideSupportStatementContext) New_Line() antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, 0)
}

func (s *OverrideSupportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OverrideSupportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OverrideSupportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitOverrideSupportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) OverrideSupportStatement() (localctx IOverrideSupportStatementContext) {
	localctx = NewOverrideSupportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, LiteParserRULE_overrideSupportStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(686)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 55, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(683)
			p.OverrideFunctionStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(684)
			p.OverrideControlStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(685)
			p.Match(LiteParserNew_Line)
		}

	}

	return localctx
}

// IOverrideFunctionStatementContext is an interface to support dynamic dispatch.
type IOverrideFunctionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetN returns the n token.
	GetN() antlr.Token

	// GetT returns the t token.
	GetT() antlr.Token

	// SetN sets the n token.
	SetN(antlr.Token)

	// SetT sets the t token.
	SetT(antlr.Token)

	// IsOverrideFunctionStatementContext differentiates from other interfaces.
	IsOverrideFunctionStatementContext()
}

type OverrideFunctionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	n      antlr.Token
	t      antlr.Token
}

func NewEmptyOverrideFunctionStatementContext() *OverrideFunctionStatementContext {
	var p = new(OverrideFunctionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_overrideFunctionStatement
	return p
}

func (*OverrideFunctionStatementContext) IsOverrideFunctionStatementContext() {}

func NewOverrideFunctionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OverrideFunctionStatementContext {
	var p = new(OverrideFunctionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_overrideFunctionStatement

	return p
}

func (s *OverrideFunctionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *OverrideFunctionStatementContext) GetN() antlr.Token { return s.n }

func (s *OverrideFunctionStatementContext) GetT() antlr.Token { return s.t }

func (s *OverrideFunctionStatementContext) SetN(v antlr.Token) { s.n = v }

func (s *OverrideFunctionStatementContext) SetT(v antlr.Token) { s.t = v }

func (s *OverrideFunctionStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *OverrideFunctionStatementContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *OverrideFunctionStatementContext) ParameterClauseIn() IParameterClauseInContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseInContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseInContext)
}

func (s *OverrideFunctionStatementContext) ParameterClauseOut() IParameterClauseOutContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseOutContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseOutContext)
}

func (s *OverrideFunctionStatementContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *OverrideFunctionStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *OverrideFunctionStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *OverrideFunctionStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *OverrideFunctionStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *OverrideFunctionStatementContext) Right_Flow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Flow, 0)
}

func (s *OverrideFunctionStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *OverrideFunctionStatementContext) TemplateDefine() ITemplateDefineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateDefineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateDefineContext)
}

func (s *OverrideFunctionStatementContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *OverrideFunctionStatementContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *OverrideFunctionStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *OverrideFunctionStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *OverrideFunctionStatementContext) Discard() antlr.TerminalNode {
	return s.GetToken(LiteParserDiscard, 0)
}

func (s *OverrideFunctionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OverrideFunctionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OverrideFunctionStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitOverrideFunctionStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) OverrideFunctionStatement() (localctx IOverrideFunctionStatementContext) {
	localctx = NewOverrideFunctionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, LiteParserRULE_overrideFunctionStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(689)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Brack {
		{
			p.SetState(688)
			p.AnnotationSupport()
		}

	}
	p.SetState(692)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserDiscard {
		{
			p.SetState(691)

			var _m = p.Match(LiteParserDiscard)

			localctx.(*OverrideFunctionStatementContext).n = _m
		}

	}
	{
		p.SetState(694)
		p.Id()
	}
	p.SetState(696)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLess {
		{
			p.SetState(695)
			p.TemplateDefine()
		}

	}
	{
		p.SetState(698)
		p.Left_paren()
	}
	{
		p.SetState(699)
		p.ParameterClauseIn()
	}
	{
		p.SetState(700)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*OverrideFunctionStatementContext).t = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == LiteParserRight_Arrow || _la == LiteParserRight_Flow) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*OverrideFunctionStatementContext).t = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(704)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserNew_Line {
		{
			p.SetState(701)
			p.Match(LiteParserNew_Line)
		}

		p.SetState(706)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(707)
		p.ParameterClauseOut()
	}
	{
		p.SetState(708)
		p.Right_paren()
	}
	{
		p.SetState(709)
		p.Left_brace()
	}
	p.SetState(713)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 60, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(710)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(715)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 60, p.GetParserRuleContext())
	}
	{
		p.SetState(716)
		p.Right_brace()
	}
	{
		p.SetState(717)
		p.End()
	}

	return localctx
}

// IOverrideControlStatementContext is an interface to support dynamic dispatch.
type IOverrideControlStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetN returns the n token.
	GetN() antlr.Token

	// SetN sets the n token.
	SetN(antlr.Token)

	// IsOverrideControlStatementContext differentiates from other interfaces.
	IsOverrideControlStatementContext()
}

type OverrideControlStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	n      antlr.Token
}

func NewEmptyOverrideControlStatementContext() *OverrideControlStatementContext {
	var p = new(OverrideControlStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_overrideControlStatement
	return p
}

func (*OverrideControlStatementContext) IsOverrideControlStatementContext() {}

func NewOverrideControlStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OverrideControlStatementContext {
	var p = new(OverrideControlStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_overrideControlStatement

	return p
}

func (s *OverrideControlStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *OverrideControlStatementContext) GetN() antlr.Token { return s.n }

func (s *OverrideControlStatementContext) SetN(v antlr.Token) { s.n = v }

func (s *OverrideControlStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *OverrideControlStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(LiteParserColon, 0)
}

func (s *OverrideControlStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *OverrideControlStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *OverrideControlStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *OverrideControlStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *OverrideControlStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *OverrideControlStatementContext) AllPackageControlSubStatement() []IPackageControlSubStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPackageControlSubStatementContext)(nil)).Elem())
	var tst = make([]IPackageControlSubStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPackageControlSubStatementContext)
		}
	}

	return tst
}

func (s *OverrideControlStatementContext) PackageControlSubStatement(i int) IPackageControlSubStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageControlSubStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPackageControlSubStatementContext)
}

func (s *OverrideControlStatementContext) Discard() antlr.TerminalNode {
	return s.GetToken(LiteParserDiscard, 0)
}

func (s *OverrideControlStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OverrideControlStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OverrideControlStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitOverrideControlStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) OverrideControlStatement() (localctx IOverrideControlStatementContext) {
	localctx = NewOverrideControlStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, LiteParserRULE_overrideControlStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(720)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Brack {
		{
			p.SetState(719)
			p.AnnotationSupport()
		}

	}
	p.SetState(723)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserDiscard {
		{
			p.SetState(722)

			var _m = p.Match(LiteParserDiscard)

			localctx.(*OverrideControlStatementContext).n = _m
		}

	}
	{
		p.SetState(725)
		p.Id()
	}
	{
		p.SetState(726)
		p.Match(LiteParserColon)
	}
	{
		p.SetState(727)
		p.TypeType()
	}
	{
		p.SetState(728)
		p.Left_brace()
	}
	p.SetState(730)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<LiteParserLinqFrom)|(1<<LiteParserLinqBy)|(1<<LiteParserLinqSelect)|(1<<LiteParserLinqWhere)|(1<<LiteParserLinqGroup)|(1<<LiteParserLinqInto)|(1<<LiteParserLinqOrderby)|(1<<LiteParserLinqJoin)|(1<<LiteParserLinqLet)|(1<<LiteParserLinqIn)|(1<<LiteParserLinqOn)|(1<<LiteParserLinqEquals)|(1<<LiteParserLinqAscending)|(1<<LiteParserLinqDescending))) != 0) || (((_la-61)&-(0x1f+1)) == 0 && ((1<<uint((_la-61)))&((1<<(LiteParserTypeI8-61))|(1<<(LiteParserTypeU8-61))|(1<<(LiteParserTypeI16-61))|(1<<(LiteParserTypeU16-61))|(1<<(LiteParserTypeI32-61))|(1<<(LiteParserTypeU32-61))|(1<<(LiteParserTypeI64-61))|(1<<(LiteParserTypeU64-61))|(1<<(LiteParserTypeF32-61))|(1<<(LiteParserTypeF64-61))|(1<<(LiteParserTypeChr-61))|(1<<(LiteParserTypeStr-61))|(1<<(LiteParserTypeBool-61))|(1<<(LiteParserTypeInt-61))|(1<<(LiteParserTypeNum-61))|(1<<(LiteParserTypeByte-61))|(1<<(LiteParserTypeAny-61))|(1<<(LiteParserIDPrivate-61))|(1<<(LiteParserIDPublic-61)))) != 0) {
		{
			p.SetState(729)
			p.PackageControlSubStatement()
		}

		p.SetState(732)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(734)
		p.Right_brace()
	}
	{
		p.SetState(735)
		p.End()
	}

	return localctx
}

// IProtocolStatementContext is an interface to support dynamic dispatch.
type IProtocolStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProtocolStatementContext differentiates from other interfaces.
	IsProtocolStatementContext()
}

type ProtocolStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProtocolStatementContext() *ProtocolStatementContext {
	var p = new(ProtocolStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_protocolStatement
	return p
}

func (*ProtocolStatementContext) IsProtocolStatementContext() {}

func NewProtocolStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProtocolStatementContext {
	var p = new(ProtocolStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_protocolStatement

	return p
}

func (s *ProtocolStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ProtocolStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *ProtocolStatementContext) Left_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserLeft_Arrow, 0)
}

func (s *ProtocolStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *ProtocolStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *ProtocolStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ProtocolStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *ProtocolStatementContext) TemplateDefine() ITemplateDefineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateDefineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateDefineContext)
}

func (s *ProtocolStatementContext) AllProtocolSupportStatement() []IProtocolSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProtocolSupportStatementContext)(nil)).Elem())
	var tst = make([]IProtocolSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProtocolSupportStatementContext)
		}
	}

	return tst
}

func (s *ProtocolStatementContext) ProtocolSupportStatement(i int) IProtocolSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProtocolSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProtocolSupportStatementContext)
}

func (s *ProtocolStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProtocolStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProtocolStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitProtocolStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) ProtocolStatement() (localctx IProtocolStatementContext) {
	localctx = NewProtocolStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, LiteParserRULE_protocolStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(738)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Brack {
		{
			p.SetState(737)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(740)
		p.Id()
	}
	p.SetState(742)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLess {
		{
			p.SetState(741)
			p.TemplateDefine()
		}

	}
	{
		p.SetState(744)
		p.Match(LiteParserLeft_Arrow)
	}
	{
		p.SetState(745)
		p.Left_brace()
	}
	p.SetState(749)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 66, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(746)
				p.ProtocolSupportStatement()
			}

		}
		p.SetState(751)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 66, p.GetParserRuleContext())
	}
	{
		p.SetState(752)
		p.Right_brace()
	}
	{
		p.SetState(753)
		p.End()
	}

	return localctx
}

// IProtocolSupportStatementContext is an interface to support dynamic dispatch.
type IProtocolSupportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProtocolSupportStatementContext differentiates from other interfaces.
	IsProtocolSupportStatementContext()
}

type ProtocolSupportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProtocolSupportStatementContext() *ProtocolSupportStatementContext {
	var p = new(ProtocolSupportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_protocolSupportStatement
	return p
}

func (*ProtocolSupportStatementContext) IsProtocolSupportStatementContext() {}

func NewProtocolSupportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProtocolSupportStatementContext {
	var p = new(ProtocolSupportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_protocolSupportStatement

	return p
}

func (s *ProtocolSupportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ProtocolSupportStatementContext) IncludeStatement() IIncludeStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIncludeStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIncludeStatementContext)
}

func (s *ProtocolSupportStatementContext) ProtocolFunctionStatement() IProtocolFunctionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProtocolFunctionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProtocolFunctionStatementContext)
}

func (s *ProtocolSupportStatementContext) ProtocolControlStatement() IProtocolControlStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProtocolControlStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProtocolControlStatementContext)
}

func (s *ProtocolSupportStatementContext) New_Line() antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, 0)
}

func (s *ProtocolSupportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProtocolSupportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProtocolSupportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitProtocolSupportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) ProtocolSupportStatement() (localctx IProtocolSupportStatementContext) {
	localctx = NewProtocolSupportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, LiteParserRULE_protocolSupportStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(759)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 67, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(755)
			p.IncludeStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(756)
			p.ProtocolFunctionStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(757)
			p.ProtocolControlStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(758)
			p.Match(LiteParserNew_Line)
		}

	}

	return localctx
}

// IProtocolControlStatementContext is an interface to support dynamic dispatch.
type IProtocolControlStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProtocolControlStatementContext differentiates from other interfaces.
	IsProtocolControlStatementContext()
}

type ProtocolControlStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProtocolControlStatementContext() *ProtocolControlStatementContext {
	var p = new(ProtocolControlStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_protocolControlStatement
	return p
}

func (*ProtocolControlStatementContext) IsProtocolControlStatementContext() {}

func NewProtocolControlStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProtocolControlStatementContext {
	var p = new(ProtocolControlStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_protocolControlStatement

	return p
}

func (s *ProtocolControlStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ProtocolControlStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *ProtocolControlStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(LiteParserColon, 0)
}

func (s *ProtocolControlStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *ProtocolControlStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *ProtocolControlStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *ProtocolControlStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ProtocolControlStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *ProtocolControlStatementContext) AllProtocolControlSubStatement() []IProtocolControlSubStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProtocolControlSubStatementContext)(nil)).Elem())
	var tst = make([]IProtocolControlSubStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProtocolControlSubStatementContext)
		}
	}

	return tst
}

func (s *ProtocolControlStatementContext) ProtocolControlSubStatement(i int) IProtocolControlSubStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProtocolControlSubStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProtocolControlSubStatementContext)
}

func (s *ProtocolControlStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProtocolControlStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProtocolControlStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitProtocolControlStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) ProtocolControlStatement() (localctx IProtocolControlStatementContext) {
	localctx = NewProtocolControlStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, LiteParserRULE_protocolControlStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(762)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Brack {
		{
			p.SetState(761)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(764)
		p.Id()
	}
	{
		p.SetState(765)
		p.Match(LiteParserColon)
	}
	{
		p.SetState(766)
		p.TypeType()
	}
	{
		p.SetState(767)
		p.Left_brace()
	}
	p.SetState(771)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<LiteParserLinqFrom)|(1<<LiteParserLinqBy)|(1<<LiteParserLinqSelect)|(1<<LiteParserLinqWhere)|(1<<LiteParserLinqGroup)|(1<<LiteParserLinqInto)|(1<<LiteParserLinqOrderby)|(1<<LiteParserLinqJoin)|(1<<LiteParserLinqLet)|(1<<LiteParserLinqIn)|(1<<LiteParserLinqOn)|(1<<LiteParserLinqEquals)|(1<<LiteParserLinqAscending)|(1<<LiteParserLinqDescending))) != 0) || (((_la-61)&-(0x1f+1)) == 0 && ((1<<uint((_la-61)))&((1<<(LiteParserTypeI8-61))|(1<<(LiteParserTypeU8-61))|(1<<(LiteParserTypeI16-61))|(1<<(LiteParserTypeU16-61))|(1<<(LiteParserTypeI32-61))|(1<<(LiteParserTypeU32-61))|(1<<(LiteParserTypeI64-61))|(1<<(LiteParserTypeU64-61))|(1<<(LiteParserTypeF32-61))|(1<<(LiteParserTypeF64-61))|(1<<(LiteParserTypeChr-61))|(1<<(LiteParserTypeStr-61))|(1<<(LiteParserTypeBool-61))|(1<<(LiteParserTypeInt-61))|(1<<(LiteParserTypeNum-61))|(1<<(LiteParserTypeByte-61))|(1<<(LiteParserTypeAny-61))|(1<<(LiteParserIDPrivate-61))|(1<<(LiteParserIDPublic-61)))) != 0) {
		{
			p.SetState(768)
			p.ProtocolControlSubStatement()
		}

		p.SetState(773)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(774)
		p.Right_brace()
	}
	{
		p.SetState(775)
		p.End()
	}

	return localctx
}

// IProtocolControlSubStatementContext is an interface to support dynamic dispatch.
type IProtocolControlSubStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProtocolControlSubStatementContext differentiates from other interfaces.
	IsProtocolControlSubStatementContext()
}

type ProtocolControlSubStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProtocolControlSubStatementContext() *ProtocolControlSubStatementContext {
	var p = new(ProtocolControlSubStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_protocolControlSubStatement
	return p
}

func (*ProtocolControlSubStatementContext) IsProtocolControlSubStatementContext() {}

func NewProtocolControlSubStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProtocolControlSubStatementContext {
	var p = new(ProtocolControlSubStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_protocolControlSubStatement

	return p
}

func (s *ProtocolControlSubStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ProtocolControlSubStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *ProtocolControlSubStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProtocolControlSubStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProtocolControlSubStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitProtocolControlSubStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) ProtocolControlSubStatement() (localctx IProtocolControlSubStatementContext) {
	localctx = NewProtocolControlSubStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, LiteParserRULE_protocolControlSubStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(777)
		p.Id()
	}

	return localctx
}

// IProtocolFunctionStatementContext is an interface to support dynamic dispatch.
type IProtocolFunctionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// IsProtocolFunctionStatementContext differentiates from other interfaces.
	IsProtocolFunctionStatementContext()
}

type ProtocolFunctionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
}

func NewEmptyProtocolFunctionStatementContext() *ProtocolFunctionStatementContext {
	var p = new(ProtocolFunctionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_protocolFunctionStatement
	return p
}

func (*ProtocolFunctionStatementContext) IsProtocolFunctionStatementContext() {}

func NewProtocolFunctionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProtocolFunctionStatementContext {
	var p = new(ProtocolFunctionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_protocolFunctionStatement

	return p
}

func (s *ProtocolFunctionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ProtocolFunctionStatementContext) GetT() antlr.Token { return s.t }

func (s *ProtocolFunctionStatementContext) SetT(v antlr.Token) { s.t = v }

func (s *ProtocolFunctionStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *ProtocolFunctionStatementContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *ProtocolFunctionStatementContext) ParameterClauseIn() IParameterClauseInContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseInContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseInContext)
}

func (s *ProtocolFunctionStatementContext) ParameterClauseOut() IParameterClauseOutContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseOutContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseOutContext)
}

func (s *ProtocolFunctionStatementContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *ProtocolFunctionStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ProtocolFunctionStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *ProtocolFunctionStatementContext) Right_Flow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Flow, 0)
}

func (s *ProtocolFunctionStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *ProtocolFunctionStatementContext) TemplateDefine() ITemplateDefineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateDefineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateDefineContext)
}

func (s *ProtocolFunctionStatementContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *ProtocolFunctionStatementContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *ProtocolFunctionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProtocolFunctionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProtocolFunctionStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitProtocolFunctionStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) ProtocolFunctionStatement() (localctx IProtocolFunctionStatementContext) {
	localctx = NewProtocolFunctionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, LiteParserRULE_protocolFunctionStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(780)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Brack {
		{
			p.SetState(779)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(782)
		p.Id()
	}
	p.SetState(784)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLess {
		{
			p.SetState(783)
			p.TemplateDefine()
		}

	}
	{
		p.SetState(786)
		p.Left_paren()
	}
	{
		p.SetState(787)
		p.ParameterClauseIn()
	}
	{
		p.SetState(788)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*ProtocolFunctionStatementContext).t = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == LiteParserRight_Arrow || _la == LiteParserRight_Flow) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*ProtocolFunctionStatementContext).t = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(792)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserNew_Line {
		{
			p.SetState(789)
			p.Match(LiteParserNew_Line)
		}

		p.SetState(794)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(795)
		p.ParameterClauseOut()
	}
	{
		p.SetState(796)
		p.Right_paren()
	}
	{
		p.SetState(797)
		p.End()
	}

	return localctx
}

// IFunctionStatementContext is an interface to support dynamic dispatch.
type IFunctionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// IsFunctionStatementContext differentiates from other interfaces.
	IsFunctionStatementContext()
}

type FunctionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
}

func NewEmptyFunctionStatementContext() *FunctionStatementContext {
	var p = new(FunctionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_functionStatement
	return p
}

func (*FunctionStatementContext) IsFunctionStatementContext() {}

func NewFunctionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionStatementContext {
	var p = new(FunctionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_functionStatement

	return p
}

func (s *FunctionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionStatementContext) GetT() antlr.Token { return s.t }

func (s *FunctionStatementContext) SetT(v antlr.Token) { s.t = v }

func (s *FunctionStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *FunctionStatementContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *FunctionStatementContext) ParameterClauseIn() IParameterClauseInContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseInContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseInContext)
}

func (s *FunctionStatementContext) ParameterClauseOut() IParameterClauseOutContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseOutContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseOutContext)
}

func (s *FunctionStatementContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *FunctionStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *FunctionStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *FunctionStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *FunctionStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *FunctionStatementContext) Right_Flow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Flow, 0)
}

func (s *FunctionStatementContext) TemplateDefine() ITemplateDefineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateDefineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateDefineContext)
}

func (s *FunctionStatementContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *FunctionStatementContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *FunctionStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *FunctionStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *FunctionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitFunctionStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) FunctionStatement() (localctx IFunctionStatementContext) {
	localctx = NewFunctionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, LiteParserRULE_functionStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(799)
		p.Id()
	}
	p.SetState(801)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLess {
		{
			p.SetState(800)
			p.TemplateDefine()
		}

	}
	{
		p.SetState(803)
		p.Left_paren()
	}
	{
		p.SetState(804)
		p.ParameterClauseIn()
	}
	{
		p.SetState(805)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*FunctionStatementContext).t = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == LiteParserRight_Arrow || _la == LiteParserRight_Flow) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*FunctionStatementContext).t = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(809)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserNew_Line {
		{
			p.SetState(806)
			p.Match(LiteParserNew_Line)
		}

		p.SetState(811)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(812)
		p.ParameterClauseOut()
	}
	{
		p.SetState(813)
		p.Right_paren()
	}
	{
		p.SetState(814)
		p.Left_brace()
	}
	p.SetState(818)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 75, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(815)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(820)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 75, p.GetParserRuleContext())
	}
	{
		p.SetState(821)
		p.Right_brace()
	}
	{
		p.SetState(822)
		p.End()
	}

	return localctx
}

// IReturnStatementContext is an interface to support dynamic dispatch.
type IReturnStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturnStatementContext differentiates from other interfaces.
	IsReturnStatementContext()
}

type ReturnStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturnStatementContext() *ReturnStatementContext {
	var p = new(ReturnStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_returnStatement
	return p
}

func (*ReturnStatementContext) IsReturnStatementContext() {}

func NewReturnStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturnStatementContext {
	var p = new(ReturnStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_returnStatement

	return p
}

func (s *ReturnStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturnStatementContext) Left_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserLeft_Arrow, 0)
}

func (s *ReturnStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ReturnStatementContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *ReturnStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturnStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitReturnStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) ReturnStatement() (localctx IReturnStatementContext) {
	localctx = NewReturnStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, LiteParserRULE_returnStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(824)
		p.Match(LiteParserLeft_Arrow)
	}
	p.SetState(826)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<LiteParserLinqFrom)|(1<<LiteParserLinqBy)|(1<<LiteParserLinqSelect)|(1<<LiteParserLinqWhere)|(1<<LiteParserLinqGroup)|(1<<LiteParserLinqInto)|(1<<LiteParserLinqOrderby)|(1<<LiteParserLinqJoin)|(1<<LiteParserLinqLet)|(1<<LiteParserLinqIn)|(1<<LiteParserLinqOn)|(1<<LiteParserLinqEquals)|(1<<LiteParserLinqAscending)|(1<<LiteParserLinqDescending))) != 0) || (((_la-36)&-(0x1f+1)) == 0 && ((1<<uint((_la-36)))&((1<<(LiteParserLeft_Flow-36))|(1<<(LiteParserLess-36))|(1<<(LiteParserLeft_Paren-36))|(1<<(LiteParserLeft_Brace-36))|(1<<(LiteParserLeft_Brack-36))|(1<<(LiteParserQuestion-36))|(1<<(LiteParserBang-36))|(1<<(LiteParserWave-36))|(1<<(LiteParserAdd-36))|(1<<(LiteParserSub-36))|(1<<(LiteParserTypeI8-36))|(1<<(LiteParserTypeU8-36))|(1<<(LiteParserTypeI16-36))|(1<<(LiteParserTypeU16-36))|(1<<(LiteParserTypeI32-36))|(1<<(LiteParserTypeU32-36))|(1<<(LiteParserTypeI64-36)))) != 0) || (((_la-68)&-(0x1f+1)) == 0 && ((1<<uint((_la-68)))&((1<<(LiteParserTypeU64-68))|(1<<(LiteParserTypeF32-68))|(1<<(LiteParserTypeF64-68))|(1<<(LiteParserTypeChr-68))|(1<<(LiteParserTypeStr-68))|(1<<(LiteParserTypeBool-68))|(1<<(LiteParserTypeInt-68))|(1<<(LiteParserTypeNum-68))|(1<<(LiteParserTypeByte-68))|(1<<(LiteParserTypeAny-68))|(1<<(LiteParserNilLiteral-68))|(1<<(LiteParserTrueLiteral-68))|(1<<(LiteParserFalseLiteral-68))|(1<<(LiteParserUndefinedLiteral-68))|(1<<(LiteParserNumberLiteral-68))|(1<<(LiteParserTextLiteral-68))|(1<<(LiteParserCharLiteral-68))|(1<<(LiteParserIDPrivate-68))|(1<<(LiteParserIDPublic-68))|(1<<(LiteParserDiscard-68)))) != 0) {
		{
			p.SetState(825)
			p.ExpressionList()
		}

	}
	{
		p.SetState(828)
		p.End()
	}

	return localctx
}

// IParameterClauseInContext is an interface to support dynamic dispatch.
type IParameterClauseInContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameterClauseInContext differentiates from other interfaces.
	IsParameterClauseInContext()
}

type ParameterClauseInContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterClauseInContext() *ParameterClauseInContext {
	var p = new(ParameterClauseInContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_parameterClauseIn
	return p
}

func (*ParameterClauseInContext) IsParameterClauseInContext() {}

func NewParameterClauseInContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterClauseInContext {
	var p = new(ParameterClauseInContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_parameterClauseIn

	return p
}

func (s *ParameterClauseInContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterClauseInContext) AllParameter() []IParameterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParameterContext)(nil)).Elem())
	var tst = make([]IParameterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParameterContext)
		}
	}

	return tst
}

func (s *ParameterClauseInContext) Parameter(i int) IParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParameterContext)
}

func (s *ParameterClauseInContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *ParameterClauseInContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *ParameterClauseInContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterClauseInContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParameterClauseInContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitParameterClauseIn(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) ParameterClauseIn() (localctx IParameterClauseInContext) {
	localctx = NewParameterClauseInContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, LiteParserRULE_parameterClauseIn)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(831)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<LiteParserLinqFrom)|(1<<LiteParserLinqBy)|(1<<LiteParserLinqSelect)|(1<<LiteParserLinqWhere)|(1<<LiteParserLinqGroup)|(1<<LiteParserLinqInto)|(1<<LiteParserLinqOrderby)|(1<<LiteParserLinqJoin)|(1<<LiteParserLinqLet)|(1<<LiteParserLinqIn)|(1<<LiteParserLinqOn)|(1<<LiteParserLinqEquals)|(1<<LiteParserLinqAscending)|(1<<LiteParserLinqDescending))) != 0) || (((_la-45)&-(0x1f+1)) == 0 && ((1<<uint((_la-45)))&((1<<(LiteParserLeft_Brack-45))|(1<<(LiteParserTypeI8-45))|(1<<(LiteParserTypeU8-45))|(1<<(LiteParserTypeI16-45))|(1<<(LiteParserTypeU16-45))|(1<<(LiteParserTypeI32-45))|(1<<(LiteParserTypeU32-45))|(1<<(LiteParserTypeI64-45))|(1<<(LiteParserTypeU64-45))|(1<<(LiteParserTypeF32-45))|(1<<(LiteParserTypeF64-45))|(1<<(LiteParserTypeChr-45))|(1<<(LiteParserTypeStr-45))|(1<<(LiteParserTypeBool-45))|(1<<(LiteParserTypeInt-45))|(1<<(LiteParserTypeNum-45))|(1<<(LiteParserTypeByte-45)))) != 0) || (((_la-77)&-(0x1f+1)) == 0 && ((1<<uint((_la-77)))&((1<<(LiteParserTypeAny-77))|(1<<(LiteParserIDPrivate-77))|(1<<(LiteParserIDPublic-77)))) != 0) {
		{
			p.SetState(830)
			p.Parameter()
		}

	}
	p.SetState(838)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserComma {
		{
			p.SetState(833)
			p.More()
		}
		{
			p.SetState(834)
			p.Parameter()
		}

		p.SetState(840)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IParameterClauseOutContext is an interface to support dynamic dispatch.
type IParameterClauseOutContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameterClauseOutContext differentiates from other interfaces.
	IsParameterClauseOutContext()
}

type ParameterClauseOutContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterClauseOutContext() *ParameterClauseOutContext {
	var p = new(ParameterClauseOutContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_parameterClauseOut
	return p
}

func (*ParameterClauseOutContext) IsParameterClauseOutContext() {}

func NewParameterClauseOutContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterClauseOutContext {
	var p = new(ParameterClauseOutContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_parameterClauseOut

	return p
}

func (s *ParameterClauseOutContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterClauseOutContext) AllParameter() []IParameterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParameterContext)(nil)).Elem())
	var tst = make([]IParameterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParameterContext)
		}
	}

	return tst
}

func (s *ParameterClauseOutContext) Parameter(i int) IParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParameterContext)
}

func (s *ParameterClauseOutContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *ParameterClauseOutContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *ParameterClauseOutContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterClauseOutContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParameterClauseOutContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitParameterClauseOut(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) ParameterClauseOut() (localctx IParameterClauseOutContext) {
	localctx = NewParameterClauseOutContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, LiteParserRULE_parameterClauseOut)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(842)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<LiteParserLinqFrom)|(1<<LiteParserLinqBy)|(1<<LiteParserLinqSelect)|(1<<LiteParserLinqWhere)|(1<<LiteParserLinqGroup)|(1<<LiteParserLinqInto)|(1<<LiteParserLinqOrderby)|(1<<LiteParserLinqJoin)|(1<<LiteParserLinqLet)|(1<<LiteParserLinqIn)|(1<<LiteParserLinqOn)|(1<<LiteParserLinqEquals)|(1<<LiteParserLinqAscending)|(1<<LiteParserLinqDescending))) != 0) || (((_la-45)&-(0x1f+1)) == 0 && ((1<<uint((_la-45)))&((1<<(LiteParserLeft_Brack-45))|(1<<(LiteParserTypeI8-45))|(1<<(LiteParserTypeU8-45))|(1<<(LiteParserTypeI16-45))|(1<<(LiteParserTypeU16-45))|(1<<(LiteParserTypeI32-45))|(1<<(LiteParserTypeU32-45))|(1<<(LiteParserTypeI64-45))|(1<<(LiteParserTypeU64-45))|(1<<(LiteParserTypeF32-45))|(1<<(LiteParserTypeF64-45))|(1<<(LiteParserTypeChr-45))|(1<<(LiteParserTypeStr-45))|(1<<(LiteParserTypeBool-45))|(1<<(LiteParserTypeInt-45))|(1<<(LiteParserTypeNum-45))|(1<<(LiteParserTypeByte-45)))) != 0) || (((_la-77)&-(0x1f+1)) == 0 && ((1<<uint((_la-77)))&((1<<(LiteParserTypeAny-77))|(1<<(LiteParserIDPrivate-77))|(1<<(LiteParserIDPublic-77)))) != 0) {
		{
			p.SetState(841)
			p.Parameter()
		}

	}
	p.SetState(849)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserComma {
		{
			p.SetState(844)
			p.More()
		}
		{
			p.SetState(845)
			p.Parameter()
		}

		p.SetState(851)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IParameterClauseSelfContext is an interface to support dynamic dispatch.
type IParameterClauseSelfContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameterClauseSelfContext differentiates from other interfaces.
	IsParameterClauseSelfContext()
}

type ParameterClauseSelfContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterClauseSelfContext() *ParameterClauseSelfContext {
	var p = new(ParameterClauseSelfContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_parameterClauseSelf
	return p
}

func (*ParameterClauseSelfContext) IsParameterClauseSelfContext() {}

func NewParameterClauseSelfContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterClauseSelfContext {
	var p = new(ParameterClauseSelfContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_parameterClauseSelf

	return p
}

func (s *ParameterClauseSelfContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterClauseSelfContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *ParameterClauseSelfContext) Colon() antlr.TerminalNode {
	return s.GetToken(LiteParserColon, 0)
}

func (s *ParameterClauseSelfContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *ParameterClauseSelfContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterClauseSelfContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParameterClauseSelfContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitParameterClauseSelf(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) ParameterClauseSelf() (localctx IParameterClauseSelfContext) {
	localctx = NewParameterClauseSelfContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, LiteParserRULE_parameterClauseSelf)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(852)
		p.Id()
	}
	{
		p.SetState(853)
		p.Match(LiteParserColon)
	}
	{
		p.SetState(854)
		p.TypeType()
	}

	return localctx
}

// IParameterContext is an interface to support dynamic dispatch.
type IParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameterContext differentiates from other interfaces.
	IsParameterContext()
}

type ParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterContext() *ParameterContext {
	var p = new(ParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_parameter
	return p
}

func (*ParameterContext) IsParameterContext() {}

func NewParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterContext {
	var p = new(ParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_parameter

	return p
}

func (s *ParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *ParameterContext) Colon() antlr.TerminalNode {
	return s.GetToken(LiteParserColon, 0)
}

func (s *ParameterContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *ParameterContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *ParameterContext) Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserEqual, 0)
}

func (s *ParameterContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitParameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Parameter() (localctx IParameterContext) {
	localctx = NewParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, LiteParserRULE_parameter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(857)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Brack {
		{
			p.SetState(856)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(859)
		p.Id()
	}
	{
		p.SetState(860)
		p.Match(LiteParserColon)
	}
	{
		p.SetState(861)
		p.TypeType()
	}
	p.SetState(864)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserEqual {
		{
			p.SetState(862)
			p.Match(LiteParserEqual)
		}
		{
			p.SetState(863)
			p.expression(0)
		}

	}

	return localctx
}

// IFunctionSupportStatementContext is an interface to support dynamic dispatch.
type IFunctionSupportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionSupportStatementContext differentiates from other interfaces.
	IsFunctionSupportStatementContext()
}

type FunctionSupportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionSupportStatementContext() *FunctionSupportStatementContext {
	var p = new(FunctionSupportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_functionSupportStatement
	return p
}

func (*FunctionSupportStatementContext) IsFunctionSupportStatementContext() {}

func NewFunctionSupportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionSupportStatementContext {
	var p = new(FunctionSupportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_functionSupportStatement

	return p
}

func (s *FunctionSupportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionSupportStatementContext) ReturnStatement() IReturnStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturnStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturnStatementContext)
}

func (s *FunctionSupportStatementContext) JudgeCaseStatement() IJudgeCaseStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJudgeCaseStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJudgeCaseStatementContext)
}

func (s *FunctionSupportStatementContext) JudgeStatement() IJudgeStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJudgeStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJudgeStatementContext)
}

func (s *FunctionSupportStatementContext) LoopStatement() ILoopStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopStatementContext)
}

func (s *FunctionSupportStatementContext) LoopEachStatement() ILoopEachStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopEachStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopEachStatementContext)
}

func (s *FunctionSupportStatementContext) LoopCaseStatement() ILoopCaseStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopCaseStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopCaseStatementContext)
}

func (s *FunctionSupportStatementContext) LoopInfiniteStatement() ILoopInfiniteStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopInfiniteStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopInfiniteStatementContext)
}

func (s *FunctionSupportStatementContext) LoopJumpStatement() ILoopJumpStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopJumpStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopJumpStatementContext)
}

func (s *FunctionSupportStatementContext) LoopContinueStatement() ILoopContinueStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopContinueStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopContinueStatementContext)
}

func (s *FunctionSupportStatementContext) UsingStatement() IUsingStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUsingStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUsingStatementContext)
}

func (s *FunctionSupportStatementContext) CheckStatement() ICheckStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICheckStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICheckStatementContext)
}

func (s *FunctionSupportStatementContext) ReportStatement() IReportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReportStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReportStatementContext)
}

func (s *FunctionSupportStatementContext) FunctionStatement() IFunctionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionStatementContext)
}

func (s *FunctionSupportStatementContext) VariableStatement() IVariableStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableStatementContext)
}

func (s *FunctionSupportStatementContext) VariableDeclaredStatement() IVariableDeclaredStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclaredStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclaredStatementContext)
}

func (s *FunctionSupportStatementContext) ChannelAssignStatement() IChannelAssignStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChannelAssignStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChannelAssignStatementContext)
}

func (s *FunctionSupportStatementContext) AssignStatement() IAssignStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignStatementContext)
}

func (s *FunctionSupportStatementContext) ExpressionStatement() IExpressionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionStatementContext)
}

func (s *FunctionSupportStatementContext) New_Line() antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, 0)
}

func (s *FunctionSupportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionSupportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionSupportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitFunctionSupportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) FunctionSupportStatement() (localctx IFunctionSupportStatementContext) {
	localctx = NewFunctionSupportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, LiteParserRULE_functionSupportStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(885)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 83, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(866)
			p.ReturnStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(867)
			p.JudgeCaseStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(868)
			p.JudgeStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(869)
			p.LoopStatement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(870)
			p.LoopEachStatement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(871)
			p.LoopCaseStatement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(872)
			p.LoopInfiniteStatement()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(873)
			p.LoopJumpStatement()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(874)
			p.LoopContinueStatement()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(875)
			p.UsingStatement()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(876)
			p.CheckStatement()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(877)
			p.ReportStatement()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(878)
			p.FunctionStatement()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(879)
			p.VariableStatement()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(880)
			p.VariableDeclaredStatement()
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(881)
			p.ChannelAssignStatement()
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(882)
			p.AssignStatement()
		}

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(883)
			p.ExpressionStatement()
		}

	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(884)
			p.Match(LiteParserNew_Line)
		}

	}

	return localctx
}

// IJudgeCaseStatementContext is an interface to support dynamic dispatch.
type IJudgeCaseStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJudgeCaseStatementContext differentiates from other interfaces.
	IsJudgeCaseStatementContext()
}

type JudgeCaseStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJudgeCaseStatementContext() *JudgeCaseStatementContext {
	var p = new(JudgeCaseStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_judgeCaseStatement
	return p
}

func (*JudgeCaseStatementContext) IsJudgeCaseStatementContext() {}

func NewJudgeCaseStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JudgeCaseStatementContext {
	var p = new(JudgeCaseStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_judgeCaseStatement

	return p
}

func (s *JudgeCaseStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *JudgeCaseStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *JudgeCaseStatementContext) Question() antlr.TerminalNode {
	return s.GetToken(LiteParserQuestion, 0)
}

func (s *JudgeCaseStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *JudgeCaseStatementContext) AllCaseStatement() []ICaseStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICaseStatementContext)(nil)).Elem())
	var tst = make([]ICaseStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICaseStatementContext)
		}
	}

	return tst
}

func (s *JudgeCaseStatementContext) CaseStatement(i int) ICaseStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICaseStatementContext)
}

func (s *JudgeCaseStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JudgeCaseStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JudgeCaseStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitJudgeCaseStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) JudgeCaseStatement() (localctx IJudgeCaseStatementContext) {
	localctx = NewJudgeCaseStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, LiteParserRULE_judgeCaseStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(887)
		p.expression(0)
	}
	{
		p.SetState(888)
		p.Match(LiteParserQuestion)
	}
	p.SetState(890)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<LiteParserLinqFrom)|(1<<LiteParserLinqBy)|(1<<LiteParserLinqSelect)|(1<<LiteParserLinqWhere)|(1<<LiteParserLinqGroup)|(1<<LiteParserLinqInto)|(1<<LiteParserLinqOrderby)|(1<<LiteParserLinqJoin)|(1<<LiteParserLinqLet)|(1<<LiteParserLinqIn)|(1<<LiteParserLinqOn)|(1<<LiteParserLinqEquals)|(1<<LiteParserLinqAscending)|(1<<LiteParserLinqDescending))) != 0) || (((_la-36)&-(0x1f+1)) == 0 && ((1<<uint((_la-36)))&((1<<(LiteParserLeft_Flow-36))|(1<<(LiteParserLess-36))|(1<<(LiteParserLeft_Paren-36))|(1<<(LiteParserLeft_Brace-36))|(1<<(LiteParserLeft_Brack-36))|(1<<(LiteParserColon-36))|(1<<(LiteParserQuestion-36))|(1<<(LiteParserBang-36))|(1<<(LiteParserWave-36))|(1<<(LiteParserAdd-36))|(1<<(LiteParserSub-36))|(1<<(LiteParserTypeI8-36))|(1<<(LiteParserTypeU8-36))|(1<<(LiteParserTypeI16-36))|(1<<(LiteParserTypeU16-36))|(1<<(LiteParserTypeI32-36))|(1<<(LiteParserTypeU32-36))|(1<<(LiteParserTypeI64-36)))) != 0) || (((_la-68)&-(0x1f+1)) == 0 && ((1<<uint((_la-68)))&((1<<(LiteParserTypeU64-68))|(1<<(LiteParserTypeF32-68))|(1<<(LiteParserTypeF64-68))|(1<<(LiteParserTypeChr-68))|(1<<(LiteParserTypeStr-68))|(1<<(LiteParserTypeBool-68))|(1<<(LiteParserTypeInt-68))|(1<<(LiteParserTypeNum-68))|(1<<(LiteParserTypeByte-68))|(1<<(LiteParserTypeAny-68))|(1<<(LiteParserNilLiteral-68))|(1<<(LiteParserTrueLiteral-68))|(1<<(LiteParserFalseLiteral-68))|(1<<(LiteParserUndefinedLiteral-68))|(1<<(LiteParserNumberLiteral-68))|(1<<(LiteParserTextLiteral-68))|(1<<(LiteParserCharLiteral-68))|(1<<(LiteParserIDPrivate-68))|(1<<(LiteParserIDPublic-68))|(1<<(LiteParserDiscard-68)))) != 0) {
		{
			p.SetState(889)
			p.CaseStatement()
		}

		p.SetState(892)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(894)
		p.End()
	}

	return localctx
}

// ICaseStatementContext is an interface to support dynamic dispatch.
type ICaseStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaseStatementContext differentiates from other interfaces.
	IsCaseStatementContext()
}

type CaseStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaseStatementContext() *CaseStatementContext {
	var p = new(CaseStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_caseStatement
	return p
}

func (*CaseStatementContext) IsCaseStatementContext() {}

func NewCaseStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseStatementContext {
	var p = new(CaseStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_caseStatement

	return p
}

func (s *CaseStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseStatementContext) AllCaseExprStatement() []ICaseExprStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICaseExprStatementContext)(nil)).Elem())
	var tst = make([]ICaseExprStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICaseExprStatementContext)
		}
	}

	return tst
}

func (s *CaseStatementContext) CaseExprStatement(i int) ICaseExprStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseExprStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICaseExprStatementContext)
}

func (s *CaseStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *CaseStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *CaseStatementContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *CaseStatementContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *CaseStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *CaseStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *CaseStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitCaseStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) CaseStatement() (localctx ICaseStatementContext) {
	localctx = NewCaseStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, LiteParserRULE_caseStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(896)
		p.CaseExprStatement()
	}
	p.SetState(902)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserComma {
		{
			p.SetState(897)
			p.More()
		}
		{
			p.SetState(898)
			p.CaseExprStatement()
		}

		p.SetState(904)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(905)
		p.Left_brace()
	}
	p.SetState(909)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 86, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(906)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(911)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 86, p.GetParserRuleContext())
	}
	{
		p.SetState(912)
		p.Right_brace()
	}

	return localctx
}

// ICaseExprStatementContext is an interface to support dynamic dispatch.
type ICaseExprStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaseExprStatementContext differentiates from other interfaces.
	IsCaseExprStatementContext()
}

type CaseExprStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaseExprStatementContext() *CaseExprStatementContext {
	var p = new(CaseExprStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_caseExprStatement
	return p
}

func (*CaseExprStatementContext) IsCaseExprStatementContext() {}

func NewCaseExprStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseExprStatementContext {
	var p = new(CaseExprStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_caseExprStatement

	return p
}

func (s *CaseExprStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseExprStatementContext) Discard() antlr.TerminalNode {
	return s.GetToken(LiteParserDiscard, 0)
}

func (s *CaseExprStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CaseExprStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(LiteParserColon, 0)
}

func (s *CaseExprStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *CaseExprStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *CaseExprStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseExprStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseExprStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitCaseExprStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) CaseExprStatement() (localctx ICaseExprStatementContext) {
	localctx = NewCaseExprStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, LiteParserRULE_caseExprStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(921)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 88, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(914)
			p.Match(LiteParserDiscard)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(915)
			p.expression(0)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(917)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<LiteParserLinqFrom)|(1<<LiteParserLinqBy)|(1<<LiteParserLinqSelect)|(1<<LiteParserLinqWhere)|(1<<LiteParserLinqGroup)|(1<<LiteParserLinqInto)|(1<<LiteParserLinqOrderby)|(1<<LiteParserLinqJoin)|(1<<LiteParserLinqLet)|(1<<LiteParserLinqIn)|(1<<LiteParserLinqOn)|(1<<LiteParserLinqEquals)|(1<<LiteParserLinqAscending)|(1<<LiteParserLinqDescending))) != 0) || (((_la-61)&-(0x1f+1)) == 0 && ((1<<uint((_la-61)))&((1<<(LiteParserTypeI8-61))|(1<<(LiteParserTypeU8-61))|(1<<(LiteParserTypeI16-61))|(1<<(LiteParserTypeU16-61))|(1<<(LiteParserTypeI32-61))|(1<<(LiteParserTypeU32-61))|(1<<(LiteParserTypeI64-61))|(1<<(LiteParserTypeU64-61))|(1<<(LiteParserTypeF32-61))|(1<<(LiteParserTypeF64-61))|(1<<(LiteParserTypeChr-61))|(1<<(LiteParserTypeStr-61))|(1<<(LiteParserTypeBool-61))|(1<<(LiteParserTypeInt-61))|(1<<(LiteParserTypeNum-61))|(1<<(LiteParserTypeByte-61))|(1<<(LiteParserTypeAny-61))|(1<<(LiteParserIDPrivate-61))|(1<<(LiteParserIDPublic-61)))) != 0) {
			{
				p.SetState(916)
				p.Id()
			}

		}
		{
			p.SetState(919)
			p.Match(LiteParserColon)
		}
		{
			p.SetState(920)
			p.TypeType()
		}

	}

	return localctx
}

// IJudgeStatementContext is an interface to support dynamic dispatch.
type IJudgeStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJudgeStatementContext differentiates from other interfaces.
	IsJudgeStatementContext()
}

type JudgeStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJudgeStatementContext() *JudgeStatementContext {
	var p = new(JudgeStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_judgeStatement
	return p
}

func (*JudgeStatementContext) IsJudgeStatementContext() {}

func NewJudgeStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JudgeStatementContext {
	var p = new(JudgeStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_judgeStatement

	return p
}

func (s *JudgeStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *JudgeStatementContext) JudgeIfStatement() IJudgeIfStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJudgeIfStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJudgeIfStatementContext)
}

func (s *JudgeStatementContext) JudgeElseStatement() IJudgeElseStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJudgeElseStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJudgeElseStatementContext)
}

func (s *JudgeStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *JudgeStatementContext) AllJudgeElseIfStatement() []IJudgeElseIfStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IJudgeElseIfStatementContext)(nil)).Elem())
	var tst = make([]IJudgeElseIfStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IJudgeElseIfStatementContext)
		}
	}

	return tst
}

func (s *JudgeStatementContext) JudgeElseIfStatement(i int) IJudgeElseIfStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJudgeElseIfStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IJudgeElseIfStatementContext)
}

func (s *JudgeStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JudgeStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JudgeStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitJudgeStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) JudgeStatement() (localctx IJudgeStatementContext) {
	localctx = NewJudgeStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, LiteParserRULE_judgeStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(942)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 91, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(923)
			p.JudgeIfStatement()
		}
		p.SetState(927)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 89, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(924)
					p.JudgeElseIfStatement()
				}

			}
			p.SetState(929)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 89, p.GetParserRuleContext())
		}
		{
			p.SetState(930)
			p.JudgeElseStatement()
		}
		{
			p.SetState(931)
			p.End()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(933)
			p.JudgeIfStatement()
		}
		p.SetState(937)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<LiteParserLinqFrom)|(1<<LiteParserLinqBy)|(1<<LiteParserLinqSelect)|(1<<LiteParserLinqWhere)|(1<<LiteParserLinqGroup)|(1<<LiteParserLinqInto)|(1<<LiteParserLinqOrderby)|(1<<LiteParserLinqJoin)|(1<<LiteParserLinqLet)|(1<<LiteParserLinqIn)|(1<<LiteParserLinqOn)|(1<<LiteParserLinqEquals)|(1<<LiteParserLinqAscending)|(1<<LiteParserLinqDescending))) != 0) || (((_la-36)&-(0x1f+1)) == 0 && ((1<<uint((_la-36)))&((1<<(LiteParserLeft_Flow-36))|(1<<(LiteParserLess-36))|(1<<(LiteParserLeft_Paren-36))|(1<<(LiteParserLeft_Brace-36))|(1<<(LiteParserLeft_Brack-36))|(1<<(LiteParserQuestion-36))|(1<<(LiteParserBang-36))|(1<<(LiteParserWave-36))|(1<<(LiteParserAdd-36))|(1<<(LiteParserSub-36))|(1<<(LiteParserTypeI8-36))|(1<<(LiteParserTypeU8-36))|(1<<(LiteParserTypeI16-36))|(1<<(LiteParserTypeU16-36))|(1<<(LiteParserTypeI32-36))|(1<<(LiteParserTypeU32-36))|(1<<(LiteParserTypeI64-36)))) != 0) || (((_la-68)&-(0x1f+1)) == 0 && ((1<<uint((_la-68)))&((1<<(LiteParserTypeU64-68))|(1<<(LiteParserTypeF32-68))|(1<<(LiteParserTypeF64-68))|(1<<(LiteParserTypeChr-68))|(1<<(LiteParserTypeStr-68))|(1<<(LiteParserTypeBool-68))|(1<<(LiteParserTypeInt-68))|(1<<(LiteParserTypeNum-68))|(1<<(LiteParserTypeByte-68))|(1<<(LiteParserTypeAny-68))|(1<<(LiteParserNilLiteral-68))|(1<<(LiteParserTrueLiteral-68))|(1<<(LiteParserFalseLiteral-68))|(1<<(LiteParserUndefinedLiteral-68))|(1<<(LiteParserNumberLiteral-68))|(1<<(LiteParserTextLiteral-68))|(1<<(LiteParserCharLiteral-68))|(1<<(LiteParserIDPrivate-68))|(1<<(LiteParserIDPublic-68))|(1<<(LiteParserDiscard-68)))) != 0) {
			{
				p.SetState(934)
				p.JudgeElseIfStatement()
			}

			p.SetState(939)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(940)
			p.End()
		}

	}

	return localctx
}

// IJudgeElseStatementContext is an interface to support dynamic dispatch.
type IJudgeElseStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJudgeElseStatementContext differentiates from other interfaces.
	IsJudgeElseStatementContext()
}

type JudgeElseStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJudgeElseStatementContext() *JudgeElseStatementContext {
	var p = new(JudgeElseStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_judgeElseStatement
	return p
}

func (*JudgeElseStatementContext) IsJudgeElseStatementContext() {}

func NewJudgeElseStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JudgeElseStatementContext {
	var p = new(JudgeElseStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_judgeElseStatement

	return p
}

func (s *JudgeElseStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *JudgeElseStatementContext) Discard() antlr.TerminalNode {
	return s.GetToken(LiteParserDiscard, 0)
}

func (s *JudgeElseStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *JudgeElseStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *JudgeElseStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *JudgeElseStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *JudgeElseStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JudgeElseStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JudgeElseStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitJudgeElseStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) JudgeElseStatement() (localctx IJudgeElseStatementContext) {
	localctx = NewJudgeElseStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, LiteParserRULE_judgeElseStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(944)
		p.Match(LiteParserDiscard)
	}
	{
		p.SetState(945)
		p.Left_brace()
	}
	p.SetState(949)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 92, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(946)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(951)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 92, p.GetParserRuleContext())
	}
	{
		p.SetState(952)
		p.Right_brace()
	}

	return localctx
}

// IJudgeIfStatementContext is an interface to support dynamic dispatch.
type IJudgeIfStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJudgeIfStatementContext differentiates from other interfaces.
	IsJudgeIfStatementContext()
}

type JudgeIfStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJudgeIfStatementContext() *JudgeIfStatementContext {
	var p = new(JudgeIfStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_judgeIfStatement
	return p
}

func (*JudgeIfStatementContext) IsJudgeIfStatementContext() {}

func NewJudgeIfStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JudgeIfStatementContext {
	var p = new(JudgeIfStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_judgeIfStatement

	return p
}

func (s *JudgeIfStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *JudgeIfStatementContext) Question() antlr.TerminalNode {
	return s.GetToken(LiteParserQuestion, 0)
}

func (s *JudgeIfStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *JudgeIfStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *JudgeIfStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *JudgeIfStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *JudgeIfStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *JudgeIfStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JudgeIfStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JudgeIfStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitJudgeIfStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) JudgeIfStatement() (localctx IJudgeIfStatementContext) {
	localctx = NewJudgeIfStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, LiteParserRULE_judgeIfStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(954)
		p.Match(LiteParserQuestion)
	}
	{
		p.SetState(955)
		p.expression(0)
	}
	{
		p.SetState(956)
		p.Left_brace()
	}
	p.SetState(960)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 93, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(957)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(962)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 93, p.GetParserRuleContext())
	}
	{
		p.SetState(963)
		p.Right_brace()
	}

	return localctx
}

// IJudgeElseIfStatementContext is an interface to support dynamic dispatch.
type IJudgeElseIfStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJudgeElseIfStatementContext differentiates from other interfaces.
	IsJudgeElseIfStatementContext()
}

type JudgeElseIfStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJudgeElseIfStatementContext() *JudgeElseIfStatementContext {
	var p = new(JudgeElseIfStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_judgeElseIfStatement
	return p
}

func (*JudgeElseIfStatementContext) IsJudgeElseIfStatementContext() {}

func NewJudgeElseIfStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JudgeElseIfStatementContext {
	var p = new(JudgeElseIfStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_judgeElseIfStatement

	return p
}

func (s *JudgeElseIfStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *JudgeElseIfStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *JudgeElseIfStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *JudgeElseIfStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *JudgeElseIfStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *JudgeElseIfStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *JudgeElseIfStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JudgeElseIfStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JudgeElseIfStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitJudgeElseIfStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) JudgeElseIfStatement() (localctx IJudgeElseIfStatementContext) {
	localctx = NewJudgeElseIfStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, LiteParserRULE_judgeElseIfStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(965)
		p.expression(0)
	}
	{
		p.SetState(966)
		p.Left_brace()
	}
	p.SetState(970)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 94, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(967)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(972)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 94, p.GetParserRuleContext())
	}
	{
		p.SetState(973)
		p.Right_brace()
	}

	return localctx
}

// ILoopStatementContext is an interface to support dynamic dispatch.
type ILoopStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoopStatementContext differentiates from other interfaces.
	IsLoopStatementContext()
}

type LoopStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoopStatementContext() *LoopStatementContext {
	var p = new(LoopStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_loopStatement
	return p
}

func (*LoopStatementContext) IsLoopStatementContext() {}

func NewLoopStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopStatementContext {
	var p = new(LoopStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_loopStatement

	return p
}

func (s *LoopStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopStatementContext) IteratorStatement() IIteratorStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIteratorStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIteratorStatementContext)
}

func (s *LoopStatementContext) At() antlr.TerminalNode {
	return s.GetToken(LiteParserAt, 0)
}

func (s *LoopStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *LoopStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *LoopStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *LoopStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *LoopStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *LoopStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *LoopStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitLoopStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) LoopStatement() (localctx ILoopStatementContext) {
	localctx = NewLoopStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, LiteParserRULE_loopStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(975)
		p.IteratorStatement()
	}
	{
		p.SetState(976)
		p.Match(LiteParserAt)
	}
	{
		p.SetState(977)
		p.Id()
	}
	{
		p.SetState(978)
		p.Left_brace()
	}
	p.SetState(982)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 95, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(979)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(984)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 95, p.GetParserRuleContext())
	}
	{
		p.SetState(985)
		p.Right_brace()
	}
	{
		p.SetState(986)
		p.End()
	}

	return localctx
}

// ILoopEachStatementContext is an interface to support dynamic dispatch.
type ILoopEachStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoopEachStatementContext differentiates from other interfaces.
	IsLoopEachStatementContext()
}

type LoopEachStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoopEachStatementContext() *LoopEachStatementContext {
	var p = new(LoopEachStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_loopEachStatement
	return p
}

func (*LoopEachStatementContext) IsLoopEachStatementContext() {}

func NewLoopEachStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopEachStatementContext {
	var p = new(LoopEachStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_loopEachStatement

	return p
}

func (s *LoopEachStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopEachStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LoopEachStatementContext) At() antlr.TerminalNode {
	return s.GetToken(LiteParserAt, 0)
}

func (s *LoopEachStatementContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *LoopEachStatementContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *LoopEachStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *LoopEachStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *LoopEachStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *LoopEachStatementContext) Left_Brack() antlr.TerminalNode {
	return s.GetToken(LiteParserLeft_Brack, 0)
}

func (s *LoopEachStatementContext) Right_Brack() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Brack, 0)
}

func (s *LoopEachStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *LoopEachStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *LoopEachStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopEachStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopEachStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitLoopEachStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) LoopEachStatement() (localctx ILoopEachStatementContext) {
	localctx = NewLoopEachStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, LiteParserRULE_loopEachStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(988)
		p.expression(0)
	}
	{
		p.SetState(989)
		p.Match(LiteParserAt)
	}
	p.SetState(994)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Brack {
		{
			p.SetState(990)
			p.Match(LiteParserLeft_Brack)
		}
		{
			p.SetState(991)
			p.Id()
		}
		{
			p.SetState(992)
			p.Match(LiteParserRight_Brack)
		}

	}
	{
		p.SetState(996)
		p.Id()
	}
	{
		p.SetState(997)
		p.Left_brace()
	}
	p.SetState(1001)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 97, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(998)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(1003)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 97, p.GetParserRuleContext())
	}
	{
		p.SetState(1004)
		p.Right_brace()
	}
	{
		p.SetState(1005)
		p.End()
	}

	return localctx
}

// ILoopCaseStatementContext is an interface to support dynamic dispatch.
type ILoopCaseStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoopCaseStatementContext differentiates from other interfaces.
	IsLoopCaseStatementContext()
}

type LoopCaseStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoopCaseStatementContext() *LoopCaseStatementContext {
	var p = new(LoopCaseStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_loopCaseStatement
	return p
}

func (*LoopCaseStatementContext) IsLoopCaseStatementContext() {}

func NewLoopCaseStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopCaseStatementContext {
	var p = new(LoopCaseStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_loopCaseStatement

	return p
}

func (s *LoopCaseStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopCaseStatementContext) At() antlr.TerminalNode {
	return s.GetToken(LiteParserAt, 0)
}

func (s *LoopCaseStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LoopCaseStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *LoopCaseStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *LoopCaseStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *LoopCaseStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *LoopCaseStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *LoopCaseStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopCaseStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopCaseStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitLoopCaseStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) LoopCaseStatement() (localctx ILoopCaseStatementContext) {
	localctx = NewLoopCaseStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, LiteParserRULE_loopCaseStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1007)
		p.Match(LiteParserAt)
	}
	{
		p.SetState(1008)
		p.expression(0)
	}
	{
		p.SetState(1009)
		p.Left_brace()
	}
	p.SetState(1013)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 98, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1010)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(1015)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 98, p.GetParserRuleContext())
	}
	{
		p.SetState(1016)
		p.Right_brace()
	}
	{
		p.SetState(1017)
		p.End()
	}

	return localctx
}

// ILoopInfiniteStatementContext is an interface to support dynamic dispatch.
type ILoopInfiniteStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoopInfiniteStatementContext differentiates from other interfaces.
	IsLoopInfiniteStatementContext()
}

type LoopInfiniteStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoopInfiniteStatementContext() *LoopInfiniteStatementContext {
	var p = new(LoopInfiniteStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_loopInfiniteStatement
	return p
}

func (*LoopInfiniteStatementContext) IsLoopInfiniteStatementContext() {}

func NewLoopInfiniteStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopInfiniteStatementContext {
	var p = new(LoopInfiniteStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_loopInfiniteStatement

	return p
}

func (s *LoopInfiniteStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopInfiniteStatementContext) At() antlr.TerminalNode {
	return s.GetToken(LiteParserAt, 0)
}

func (s *LoopInfiniteStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *LoopInfiniteStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *LoopInfiniteStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *LoopInfiniteStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *LoopInfiniteStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *LoopInfiniteStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopInfiniteStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopInfiniteStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitLoopInfiniteStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) LoopInfiniteStatement() (localctx ILoopInfiniteStatementContext) {
	localctx = NewLoopInfiniteStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, LiteParserRULE_loopInfiniteStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1019)
		p.Match(LiteParserAt)
	}
	{
		p.SetState(1020)
		p.Left_brace()
	}
	p.SetState(1024)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 99, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1021)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(1026)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 99, p.GetParserRuleContext())
	}
	{
		p.SetState(1027)
		p.Right_brace()
	}
	{
		p.SetState(1028)
		p.End()
	}

	return localctx
}

// ILoopJumpStatementContext is an interface to support dynamic dispatch.
type ILoopJumpStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoopJumpStatementContext differentiates from other interfaces.
	IsLoopJumpStatementContext()
}

type LoopJumpStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoopJumpStatementContext() *LoopJumpStatementContext {
	var p = new(LoopJumpStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_loopJumpStatement
	return p
}

func (*LoopJumpStatementContext) IsLoopJumpStatementContext() {}

func NewLoopJumpStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopJumpStatementContext {
	var p = new(LoopJumpStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_loopJumpStatement

	return p
}

func (s *LoopJumpStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopJumpStatementContext) Left_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserLeft_Arrow, 0)
}

func (s *LoopJumpStatementContext) At() antlr.TerminalNode {
	return s.GetToken(LiteParserAt, 0)
}

func (s *LoopJumpStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *LoopJumpStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopJumpStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopJumpStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitLoopJumpStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) LoopJumpStatement() (localctx ILoopJumpStatementContext) {
	localctx = NewLoopJumpStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, LiteParserRULE_loopJumpStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1030)
		p.Match(LiteParserLeft_Arrow)
	}
	{
		p.SetState(1031)
		p.Match(LiteParserAt)
	}
	{
		p.SetState(1032)
		p.End()
	}

	return localctx
}

// ILoopContinueStatementContext is an interface to support dynamic dispatch.
type ILoopContinueStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoopContinueStatementContext differentiates from other interfaces.
	IsLoopContinueStatementContext()
}

type LoopContinueStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoopContinueStatementContext() *LoopContinueStatementContext {
	var p = new(LoopContinueStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_loopContinueStatement
	return p
}

func (*LoopContinueStatementContext) IsLoopContinueStatementContext() {}

func NewLoopContinueStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopContinueStatementContext {
	var p = new(LoopContinueStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_loopContinueStatement

	return p
}

func (s *LoopContinueStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopContinueStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *LoopContinueStatementContext) At() antlr.TerminalNode {
	return s.GetToken(LiteParserAt, 0)
}

func (s *LoopContinueStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *LoopContinueStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopContinueStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopContinueStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitLoopContinueStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) LoopContinueStatement() (localctx ILoopContinueStatementContext) {
	localctx = NewLoopContinueStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, LiteParserRULE_loopContinueStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1034)
		p.Match(LiteParserRight_Arrow)
	}
	{
		p.SetState(1035)
		p.Match(LiteParserAt)
	}
	{
		p.SetState(1036)
		p.End()
	}

	return localctx
}

// ICheckStatementContext is an interface to support dynamic dispatch.
type ICheckStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCheckStatementContext differentiates from other interfaces.
	IsCheckStatementContext()
}

type CheckStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCheckStatementContext() *CheckStatementContext {
	var p = new(CheckStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_checkStatement
	return p
}

func (*CheckStatementContext) IsCheckStatementContext() {}

func NewCheckStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CheckStatementContext {
	var p = new(CheckStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_checkStatement

	return p
}

func (s *CheckStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CheckStatementContext) Bang() antlr.TerminalNode {
	return s.GetToken(LiteParserBang, 0)
}

func (s *CheckStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *CheckStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *CheckStatementContext) CheckFinallyStatment() ICheckFinallyStatmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICheckFinallyStatmentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICheckFinallyStatmentContext)
}

func (s *CheckStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *CheckStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *CheckStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *CheckStatementContext) AllCheckErrorStatement() []ICheckErrorStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICheckErrorStatementContext)(nil)).Elem())
	var tst = make([]ICheckErrorStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICheckErrorStatementContext)
		}
	}

	return tst
}

func (s *CheckStatementContext) CheckErrorStatement(i int) ICheckErrorStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICheckErrorStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICheckErrorStatementContext)
}

func (s *CheckStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CheckStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CheckStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitCheckStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) CheckStatement() (localctx ICheckStatementContext) {
	localctx = NewCheckStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, LiteParserRULE_checkStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(1072)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 104, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1038)
			p.Match(LiteParserBang)
		}
		{
			p.SetState(1039)
			p.Left_brace()
		}
		p.SetState(1043)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 100, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1040)
					p.FunctionSupportStatement()
				}

			}
			p.SetState(1045)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 100, p.GetParserRuleContext())
		}
		{
			p.SetState(1046)
			p.Right_brace()
		}
		p.SetState(1050)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<LiteParserLinqFrom)|(1<<LiteParserLinqBy)|(1<<LiteParserLinqSelect)|(1<<LiteParserLinqWhere)|(1<<LiteParserLinqGroup)|(1<<LiteParserLinqInto)|(1<<LiteParserLinqOrderby)|(1<<LiteParserLinqJoin)|(1<<LiteParserLinqLet)|(1<<LiteParserLinqIn)|(1<<LiteParserLinqOn)|(1<<LiteParserLinqEquals)|(1<<LiteParserLinqAscending)|(1<<LiteParserLinqDescending))) != 0) || (((_la-61)&-(0x1f+1)) == 0 && ((1<<uint((_la-61)))&((1<<(LiteParserTypeI8-61))|(1<<(LiteParserTypeU8-61))|(1<<(LiteParserTypeI16-61))|(1<<(LiteParserTypeU16-61))|(1<<(LiteParserTypeI32-61))|(1<<(LiteParserTypeU32-61))|(1<<(LiteParserTypeI64-61))|(1<<(LiteParserTypeU64-61))|(1<<(LiteParserTypeF32-61))|(1<<(LiteParserTypeF64-61))|(1<<(LiteParserTypeChr-61))|(1<<(LiteParserTypeStr-61))|(1<<(LiteParserTypeBool-61))|(1<<(LiteParserTypeInt-61))|(1<<(LiteParserTypeNum-61))|(1<<(LiteParserTypeByte-61))|(1<<(LiteParserTypeAny-61))|(1<<(LiteParserIDPrivate-61))|(1<<(LiteParserIDPublic-61)))) != 0) {
			{
				p.SetState(1047)
				p.CheckErrorStatement()
			}

			p.SetState(1052)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1053)
			p.CheckFinallyStatment()
		}
		{
			p.SetState(1054)
			p.End()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1056)
			p.Match(LiteParserBang)
		}
		{
			p.SetState(1057)
			p.Left_brace()
		}
		p.SetState(1061)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 102, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1058)
					p.FunctionSupportStatement()
				}

			}
			p.SetState(1063)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 102, p.GetParserRuleContext())
		}
		{
			p.SetState(1064)
			p.Right_brace()
		}
		p.SetState(1066)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<LiteParserLinqFrom)|(1<<LiteParserLinqBy)|(1<<LiteParserLinqSelect)|(1<<LiteParserLinqWhere)|(1<<LiteParserLinqGroup)|(1<<LiteParserLinqInto)|(1<<LiteParserLinqOrderby)|(1<<LiteParserLinqJoin)|(1<<LiteParserLinqLet)|(1<<LiteParserLinqIn)|(1<<LiteParserLinqOn)|(1<<LiteParserLinqEquals)|(1<<LiteParserLinqAscending)|(1<<LiteParserLinqDescending))) != 0) || (((_la-61)&-(0x1f+1)) == 0 && ((1<<uint((_la-61)))&((1<<(LiteParserTypeI8-61))|(1<<(LiteParserTypeU8-61))|(1<<(LiteParserTypeI16-61))|(1<<(LiteParserTypeU16-61))|(1<<(LiteParserTypeI32-61))|(1<<(LiteParserTypeU32-61))|(1<<(LiteParserTypeI64-61))|(1<<(LiteParserTypeU64-61))|(1<<(LiteParserTypeF32-61))|(1<<(LiteParserTypeF64-61))|(1<<(LiteParserTypeChr-61))|(1<<(LiteParserTypeStr-61))|(1<<(LiteParserTypeBool-61))|(1<<(LiteParserTypeInt-61))|(1<<(LiteParserTypeNum-61))|(1<<(LiteParserTypeByte-61))|(1<<(LiteParserTypeAny-61))|(1<<(LiteParserIDPrivate-61))|(1<<(LiteParserIDPublic-61)))) != 0) {
			{
				p.SetState(1065)
				p.CheckErrorStatement()
			}

			p.SetState(1068)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1070)
			p.End()
		}

	}

	return localctx
}

// IUsingStatementContext is an interface to support dynamic dispatch.
type IUsingStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUsingStatementContext differentiates from other interfaces.
	IsUsingStatementContext()
}

type UsingStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUsingStatementContext() *UsingStatementContext {
	var p = new(UsingStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_usingStatement
	return p
}

func (*UsingStatementContext) IsUsingStatementContext() {}

func NewUsingStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UsingStatementContext {
	var p = new(UsingStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_usingStatement

	return p
}

func (s *UsingStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *UsingStatementContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *UsingStatementContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *UsingStatementContext) Bang() antlr.TerminalNode {
	return s.GetToken(LiteParserBang, 0)
}

func (s *UsingStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *UsingStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(LiteParserColon, 0)
}

func (s *UsingStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *UsingStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UsingStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UsingStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitUsingStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) UsingStatement() (localctx IUsingStatementContext) {
	localctx = NewUsingStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, LiteParserRULE_usingStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1074)
		p.expression(0)
	}
	{
		p.SetState(1075)
		p.Match(LiteParserBang)
	}
	{
		p.SetState(1076)
		p.expression(0)
	}
	p.SetState(1079)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserColon {
		{
			p.SetState(1077)
			p.Match(LiteParserColon)
		}
		{
			p.SetState(1078)
			p.TypeType()
		}

	}
	{
		p.SetState(1081)
		p.End()
	}

	return localctx
}

// ICheckErrorStatementContext is an interface to support dynamic dispatch.
type ICheckErrorStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCheckErrorStatementContext differentiates from other interfaces.
	IsCheckErrorStatementContext()
}

type CheckErrorStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCheckErrorStatementContext() *CheckErrorStatementContext {
	var p = new(CheckErrorStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_checkErrorStatement
	return p
}

func (*CheckErrorStatementContext) IsCheckErrorStatementContext() {}

func NewCheckErrorStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CheckErrorStatementContext {
	var p = new(CheckErrorStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_checkErrorStatement

	return p
}

func (s *CheckErrorStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CheckErrorStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *CheckErrorStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *CheckErrorStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *CheckErrorStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(LiteParserColon, 0)
}

func (s *CheckErrorStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *CheckErrorStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *CheckErrorStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *CheckErrorStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CheckErrorStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CheckErrorStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitCheckErrorStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) CheckErrorStatement() (localctx ICheckErrorStatementContext) {
	localctx = NewCheckErrorStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, LiteParserRULE_checkErrorStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1088)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 106, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1083)
			p.Id()
		}

	case 2:
		{
			p.SetState(1084)
			p.Id()
		}
		{
			p.SetState(1085)
			p.Match(LiteParserColon)
		}
		{
			p.SetState(1086)
			p.TypeType()
		}

	}
	{
		p.SetState(1090)
		p.Left_brace()
	}
	p.SetState(1094)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 107, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1091)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(1096)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 107, p.GetParserRuleContext())
	}
	{
		p.SetState(1097)
		p.Right_brace()
	}

	return localctx
}

// ICheckFinallyStatmentContext is an interface to support dynamic dispatch.
type ICheckFinallyStatmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCheckFinallyStatmentContext differentiates from other interfaces.
	IsCheckFinallyStatmentContext()
}

type CheckFinallyStatmentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCheckFinallyStatmentContext() *CheckFinallyStatmentContext {
	var p = new(CheckFinallyStatmentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_checkFinallyStatment
	return p
}

func (*CheckFinallyStatmentContext) IsCheckFinallyStatmentContext() {}

func NewCheckFinallyStatmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CheckFinallyStatmentContext {
	var p = new(CheckFinallyStatmentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_checkFinallyStatment

	return p
}

func (s *CheckFinallyStatmentContext) GetParser() antlr.Parser { return s.parser }

func (s *CheckFinallyStatmentContext) Discard() antlr.TerminalNode {
	return s.GetToken(LiteParserDiscard, 0)
}

func (s *CheckFinallyStatmentContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *CheckFinallyStatmentContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *CheckFinallyStatmentContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *CheckFinallyStatmentContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *CheckFinallyStatmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CheckFinallyStatmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CheckFinallyStatmentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitCheckFinallyStatment(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) CheckFinallyStatment() (localctx ICheckFinallyStatmentContext) {
	localctx = NewCheckFinallyStatmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, LiteParserRULE_checkFinallyStatment)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1099)
		p.Match(LiteParserDiscard)
	}
	{
		p.SetState(1100)
		p.Left_brace()
	}
	p.SetState(1104)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 108, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1101)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(1106)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 108, p.GetParserRuleContext())
	}
	{
		p.SetState(1107)
		p.Right_brace()
	}

	return localctx
}

// IReportStatementContext is an interface to support dynamic dispatch.
type IReportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReportStatementContext differentiates from other interfaces.
	IsReportStatementContext()
}

type ReportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReportStatementContext() *ReportStatementContext {
	var p = new(ReportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_reportStatement
	return p
}

func (*ReportStatementContext) IsReportStatementContext() {}

func NewReportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReportStatementContext {
	var p = new(ReportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_reportStatement

	return p
}

func (s *ReportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ReportStatementContext) Bang() antlr.TerminalNode {
	return s.GetToken(LiteParserBang, 0)
}

func (s *ReportStatementContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *ReportStatementContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *ReportStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ReportStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ReportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitReportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) ReportStatement() (localctx IReportStatementContext) {
	localctx = NewReportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, LiteParserRULE_reportStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1109)
		p.Match(LiteParserBang)
	}
	{
		p.SetState(1110)
		p.Left_paren()
	}
	p.SetState(1112)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<LiteParserLinqFrom)|(1<<LiteParserLinqBy)|(1<<LiteParserLinqSelect)|(1<<LiteParserLinqWhere)|(1<<LiteParserLinqGroup)|(1<<LiteParserLinqInto)|(1<<LiteParserLinqOrderby)|(1<<LiteParserLinqJoin)|(1<<LiteParserLinqLet)|(1<<LiteParserLinqIn)|(1<<LiteParserLinqOn)|(1<<LiteParserLinqEquals)|(1<<LiteParserLinqAscending)|(1<<LiteParserLinqDescending))) != 0) || (((_la-36)&-(0x1f+1)) == 0 && ((1<<uint((_la-36)))&((1<<(LiteParserLeft_Flow-36))|(1<<(LiteParserLess-36))|(1<<(LiteParserLeft_Paren-36))|(1<<(LiteParserLeft_Brace-36))|(1<<(LiteParserLeft_Brack-36))|(1<<(LiteParserQuestion-36))|(1<<(LiteParserBang-36))|(1<<(LiteParserWave-36))|(1<<(LiteParserAdd-36))|(1<<(LiteParserSub-36))|(1<<(LiteParserTypeI8-36))|(1<<(LiteParserTypeU8-36))|(1<<(LiteParserTypeI16-36))|(1<<(LiteParserTypeU16-36))|(1<<(LiteParserTypeI32-36))|(1<<(LiteParserTypeU32-36))|(1<<(LiteParserTypeI64-36)))) != 0) || (((_la-68)&-(0x1f+1)) == 0 && ((1<<uint((_la-68)))&((1<<(LiteParserTypeU64-68))|(1<<(LiteParserTypeF32-68))|(1<<(LiteParserTypeF64-68))|(1<<(LiteParserTypeChr-68))|(1<<(LiteParserTypeStr-68))|(1<<(LiteParserTypeBool-68))|(1<<(LiteParserTypeInt-68))|(1<<(LiteParserTypeNum-68))|(1<<(LiteParserTypeByte-68))|(1<<(LiteParserTypeAny-68))|(1<<(LiteParserNilLiteral-68))|(1<<(LiteParserTrueLiteral-68))|(1<<(LiteParserFalseLiteral-68))|(1<<(LiteParserUndefinedLiteral-68))|(1<<(LiteParserNumberLiteral-68))|(1<<(LiteParserTextLiteral-68))|(1<<(LiteParserCharLiteral-68))|(1<<(LiteParserIDPrivate-68))|(1<<(LiteParserIDPublic-68))|(1<<(LiteParserDiscard-68)))) != 0) {
		{
			p.SetState(1111)
			p.expression(0)
		}

	}
	{
		p.SetState(1114)
		p.Right_paren()
	}
	{
		p.SetState(1115)
		p.End()
	}

	return localctx
}

// IIteratorStatementContext is an interface to support dynamic dispatch.
type IIteratorStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsIteratorStatementContext differentiates from other interfaces.
	IsIteratorStatementContext()
}

type IteratorStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyIteratorStatementContext() *IteratorStatementContext {
	var p = new(IteratorStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_iteratorStatement
	return p
}

func (*IteratorStatementContext) IsIteratorStatementContext() {}

func NewIteratorStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IteratorStatementContext {
	var p = new(IteratorStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_iteratorStatement

	return p
}

func (s *IteratorStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *IteratorStatementContext) GetOp() antlr.Token { return s.op }

func (s *IteratorStatementContext) SetOp(v antlr.Token) { s.op = v }

func (s *IteratorStatementContext) Left_Brack() antlr.TerminalNode {
	return s.GetToken(LiteParserLeft_Brack, 0)
}

func (s *IteratorStatementContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *IteratorStatementContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IteratorStatementContext) More() IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *IteratorStatementContext) Right_Brack() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Brack, 0)
}

func (s *IteratorStatementContext) Less() antlr.TerminalNode {
	return s.GetToken(LiteParserLess, 0)
}

func (s *IteratorStatementContext) Less_Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserLess_Equal, 0)
}

func (s *IteratorStatementContext) Greater() antlr.TerminalNode {
	return s.GetToken(LiteParserGreater, 0)
}

func (s *IteratorStatementContext) Greater_Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserGreater_Equal, 0)
}

func (s *IteratorStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IteratorStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IteratorStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitIteratorStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) IteratorStatement() (localctx IIteratorStatementContext) {
	localctx = NewIteratorStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, LiteParserRULE_iteratorStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1131)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 110, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1117)
			p.Match(LiteParserLeft_Brack)
		}
		{
			p.SetState(1118)
			p.expression(0)
		}
		{
			p.SetState(1119)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*IteratorStatementContext).op = _lt

			_la = p.GetTokenStream().LA(1)

			if !(((_la-25)&-(0x1f+1)) == 0 && ((1<<uint((_la-25)))&((1<<(LiteParserLess_Equal-25))|(1<<(LiteParserGreater_Equal-25))|(1<<(LiteParserLess-25))|(1<<(LiteParserGreater-25)))) != 0) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*IteratorStatementContext).op = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1120)
			p.expression(0)
		}
		{
			p.SetState(1121)
			p.More()
		}
		{
			p.SetState(1122)
			p.expression(0)
		}
		{
			p.SetState(1123)
			p.Match(LiteParserRight_Brack)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1125)
			p.Match(LiteParserLeft_Brack)
		}
		{
			p.SetState(1126)
			p.expression(0)
		}
		{
			p.SetState(1127)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*IteratorStatementContext).op = _lt

			_la = p.GetTokenStream().LA(1)

			if !(((_la-25)&-(0x1f+1)) == 0 && ((1<<uint((_la-25)))&((1<<(LiteParserLess_Equal-25))|(1<<(LiteParserGreater_Equal-25))|(1<<(LiteParserLess-25))|(1<<(LiteParserGreater-25)))) != 0) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*IteratorStatementContext).op = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1128)
			p.expression(0)
		}
		{
			p.SetState(1129)
			p.Match(LiteParserRight_Brack)
		}

	}

	return localctx
}

// IVariableStatementContext is an interface to support dynamic dispatch.
type IVariableStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableStatementContext differentiates from other interfaces.
	IsVariableStatementContext()
}

type VariableStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableStatementContext() *VariableStatementContext {
	var p = new(VariableStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_variableStatement
	return p
}

func (*VariableStatementContext) IsVariableStatementContext() {}

func NewVariableStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableStatementContext {
	var p = new(VariableStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_variableStatement

	return p
}

func (s *VariableStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableStatementContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *VariableStatementContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *VariableStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *VariableStatementContext) Colon_Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserColon_Equal, 0)
}

func (s *VariableStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(LiteParserColon, 0)
}

func (s *VariableStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *VariableStatementContext) Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserEqual, 0)
}

func (s *VariableStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitVariableStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) VariableStatement() (localctx IVariableStatementContext) {
	localctx = NewVariableStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, LiteParserRULE_variableStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1133)
		p.expression(0)
	}
	p.SetState(1139)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case LiteParserColon_Equal:
		{
			p.SetState(1134)
			p.Match(LiteParserColon_Equal)
		}

	case LiteParserColon:
		{
			p.SetState(1135)
			p.Match(LiteParserColon)
		}
		{
			p.SetState(1136)
			p.TypeType()
		}
		{
			p.SetState(1137)
			p.Match(LiteParserEqual)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(1141)
		p.expression(0)
	}
	{
		p.SetState(1142)
		p.End()
	}

	return localctx
}

// IVariableDeclaredStatementContext is an interface to support dynamic dispatch.
type IVariableDeclaredStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableDeclaredStatementContext differentiates from other interfaces.
	IsVariableDeclaredStatementContext()
}

type VariableDeclaredStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableDeclaredStatementContext() *VariableDeclaredStatementContext {
	var p = new(VariableDeclaredStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_variableDeclaredStatement
	return p
}

func (*VariableDeclaredStatementContext) IsVariableDeclaredStatementContext() {}

func NewVariableDeclaredStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDeclaredStatementContext {
	var p = new(VariableDeclaredStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_variableDeclaredStatement

	return p
}

func (s *VariableDeclaredStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDeclaredStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *VariableDeclaredStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(LiteParserColon, 0)
}

func (s *VariableDeclaredStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *VariableDeclaredStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *VariableDeclaredStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDeclaredStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableDeclaredStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitVariableDeclaredStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) VariableDeclaredStatement() (localctx IVariableDeclaredStatementContext) {
	localctx = NewVariableDeclaredStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, LiteParserRULE_variableDeclaredStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1144)
		p.expression(0)
	}
	{
		p.SetState(1145)
		p.Match(LiteParserColon)
	}
	{
		p.SetState(1146)
		p.TypeType()
	}
	{
		p.SetState(1147)
		p.End()
	}

	return localctx
}

// IChannelAssignStatementContext is an interface to support dynamic dispatch.
type IChannelAssignStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChannelAssignStatementContext differentiates from other interfaces.
	IsChannelAssignStatementContext()
}

type ChannelAssignStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChannelAssignStatementContext() *ChannelAssignStatementContext {
	var p = new(ChannelAssignStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_channelAssignStatement
	return p
}

func (*ChannelAssignStatementContext) IsChannelAssignStatementContext() {}

func NewChannelAssignStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ChannelAssignStatementContext {
	var p = new(ChannelAssignStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_channelAssignStatement

	return p
}

func (s *ChannelAssignStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ChannelAssignStatementContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ChannelAssignStatementContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ChannelAssignStatementContext) Left_Brack() antlr.TerminalNode {
	return s.GetToken(LiteParserLeft_Brack, 0)
}

func (s *ChannelAssignStatementContext) Left_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserLeft_Arrow, 0)
}

func (s *ChannelAssignStatementContext) Right_Brack() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Brack, 0)
}

func (s *ChannelAssignStatementContext) Assign() IAssignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignContext)
}

func (s *ChannelAssignStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ChannelAssignStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ChannelAssignStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ChannelAssignStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitChannelAssignStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) ChannelAssignStatement() (localctx IChannelAssignStatementContext) {
	localctx = NewChannelAssignStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, LiteParserRULE_channelAssignStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1149)
		p.expression(0)
	}
	{
		p.SetState(1150)
		p.Match(LiteParserLeft_Brack)
	}
	{
		p.SetState(1151)
		p.Match(LiteParserLeft_Arrow)
	}
	{
		p.SetState(1152)
		p.Match(LiteParserRight_Brack)
	}
	{
		p.SetState(1153)
		p.Assign()
	}
	{
		p.SetState(1154)
		p.expression(0)
	}
	{
		p.SetState(1155)
		p.End()
	}

	return localctx
}

// IAssignStatementContext is an interface to support dynamic dispatch.
type IAssignStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignStatementContext differentiates from other interfaces.
	IsAssignStatementContext()
}

type AssignStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignStatementContext() *AssignStatementContext {
	var p = new(AssignStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_assignStatement
	return p
}

func (*AssignStatementContext) IsAssignStatementContext() {}

func NewAssignStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignStatementContext {
	var p = new(AssignStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_assignStatement

	return p
}

func (s *AssignStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignStatementContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *AssignStatementContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *AssignStatementContext) Assign() IAssignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignContext)
}

func (s *AssignStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *AssignStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitAssignStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) AssignStatement() (localctx IAssignStatementContext) {
	localctx = NewAssignStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, LiteParserRULE_assignStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1157)
		p.expression(0)
	}
	{
		p.SetState(1158)
		p.Assign()
	}
	{
		p.SetState(1159)
		p.expression(0)
	}
	{
		p.SetState(1160)
		p.End()
	}

	return localctx
}

// IExpressionStatementContext is an interface to support dynamic dispatch.
type IExpressionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionStatementContext differentiates from other interfaces.
	IsExpressionStatementContext()
}

type ExpressionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionStatementContext() *ExpressionStatementContext {
	var p = new(ExpressionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_expressionStatement
	return p
}

func (*ExpressionStatementContext) IsExpressionStatementContext() {}

func NewExpressionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionStatementContext {
	var p = new(ExpressionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_expressionStatement

	return p
}

func (s *ExpressionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ExpressionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitExpressionStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) ExpressionStatement() (localctx IExpressionStatementContext) {
	localctx = NewExpressionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, LiteParserRULE_expressionStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1162)
		p.expression(0)
	}
	{
		p.SetState(1163)
		p.End()
	}

	return localctx
}

// IPrimaryExpressionContext is an interface to support dynamic dispatch.
type IPrimaryExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// IsPrimaryExpressionContext differentiates from other interfaces.
	IsPrimaryExpressionContext()
}

type PrimaryExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
}

func NewEmptyPrimaryExpressionContext() *PrimaryExpressionContext {
	var p = new(PrimaryExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_primaryExpression
	return p
}

func (*PrimaryExpressionContext) IsPrimaryExpressionContext() {}

func NewPrimaryExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimaryExpressionContext {
	var p = new(PrimaryExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_primaryExpression

	return p
}

func (s *PrimaryExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimaryExpressionContext) GetT() antlr.Token { return s.t }

func (s *PrimaryExpressionContext) SetT(v antlr.Token) { s.t = v }

func (s *PrimaryExpressionContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *PrimaryExpressionContext) TemplateCall() ITemplateCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateCallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateCallContext)
}

func (s *PrimaryExpressionContext) Discard() antlr.TerminalNode {
	return s.GetToken(LiteParserDiscard, 0)
}

func (s *PrimaryExpressionContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *PrimaryExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PrimaryExpressionContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *PrimaryExpressionContext) DataStatement() IDataStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDataStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDataStatementContext)
}

func (s *PrimaryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimaryExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitPrimaryExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) PrimaryExpression() (localctx IPrimaryExpressionContext) {
	localctx = NewPrimaryExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, LiteParserRULE_primaryExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1175)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case LiteParserLinqFrom, LiteParserLinqBy, LiteParserLinqSelect, LiteParserLinqWhere, LiteParserLinqGroup, LiteParserLinqInto, LiteParserLinqOrderby, LiteParserLinqJoin, LiteParserLinqLet, LiteParserLinqIn, LiteParserLinqOn, LiteParserLinqEquals, LiteParserLinqAscending, LiteParserLinqDescending, LiteParserTypeI8, LiteParserTypeU8, LiteParserTypeI16, LiteParserTypeU16, LiteParserTypeI32, LiteParserTypeU32, LiteParserTypeI64, LiteParserTypeU64, LiteParserTypeF32, LiteParserTypeF64, LiteParserTypeChr, LiteParserTypeStr, LiteParserTypeBool, LiteParserTypeInt, LiteParserTypeNum, LiteParserTypeByte, LiteParserTypeAny, LiteParserIDPrivate, LiteParserIDPublic:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1165)
			p.Id()
		}
		p.SetState(1167)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 112, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1166)
				p.TemplateCall()
			}

		}

	case LiteParserDiscard:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1169)

			var _m = p.Match(LiteParserDiscard)

			localctx.(*PrimaryExpressionContext).t = _m
		}

	case LiteParserLeft_Paren:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1170)
			p.Left_paren()
		}
		{
			p.SetState(1171)
			p.expression(0)
		}
		{
			p.SetState(1172)
			p.Right_paren()
		}

	case LiteParserNilLiteral, LiteParserTrueLiteral, LiteParserFalseLiteral, LiteParserUndefinedLiteral, LiteParserNumberLiteral, LiteParserTextLiteral, LiteParserCharLiteral:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1174)
			p.DataStatement()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_expression
	return p
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) GetOp() antlr.Token { return s.op }

func (s *ExpressionContext) SetOp(v antlr.Token) { s.op = v }

func (s *ExpressionContext) Linq() ILinqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILinqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILinqContext)
}

func (s *ExpressionContext) PrimaryExpression() IPrimaryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryExpressionContext)
}

func (s *ExpressionContext) CallNew() ICallNewContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallNewContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallNewContext)
}

func (s *ExpressionContext) CallPkg() ICallPkgContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallPkgContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallPkgContext)
}

func (s *ExpressionContext) GetType() IGetTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGetTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGetTypeContext)
}

func (s *ExpressionContext) CallAwait() ICallAwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallAwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallAwaitContext)
}

func (s *ExpressionContext) List() IListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IListContext)
}

func (s *ExpressionContext) Set() ISetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetContext)
}

func (s *ExpressionContext) Dictionary() IDictionaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDictionaryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDictionaryContext)
}

func (s *ExpressionContext) Lambda() ILambdaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILambdaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILambdaContext)
}

func (s *ExpressionContext) FunctionExpression() IFunctionExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionExpressionContext)
}

func (s *ExpressionContext) PkgAnonymous() IPkgAnonymousContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPkgAnonymousContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPkgAnonymousContext)
}

func (s *ExpressionContext) TupleExpression() ITupleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleExpressionContext)
}

func (s *ExpressionContext) PlusMinus() IPlusMinusContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPlusMinusContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPlusMinusContext)
}

func (s *ExpressionContext) Negate() INegateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INegateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INegateContext)
}

func (s *ExpressionContext) StringExpression() IStringExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringExpressionContext)
}

func (s *ExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionContext) Judge() IJudgeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJudgeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJudgeContext)
}

func (s *ExpressionContext) Add() IAddContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAddContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAddContext)
}

func (s *ExpressionContext) Mul() IMulContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMulContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMulContext)
}

func (s *ExpressionContext) Pow() IPowContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPowContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPowContext)
}

func (s *ExpressionContext) Bang() antlr.TerminalNode {
	return s.GetToken(LiteParserBang, 0)
}

func (s *ExpressionContext) Question() antlr.TerminalNode {
	return s.GetToken(LiteParserQuestion, 0)
}

func (s *ExpressionContext) Left_Flow() antlr.TerminalNode {
	return s.GetToken(LiteParserLeft_Flow, 0)
}

func (s *ExpressionContext) TypeConversion() ITypeConversionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeConversionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeConversionContext)
}

func (s *ExpressionContext) CallFunc() ICallFuncContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallFuncContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallFuncContext)
}

func (s *ExpressionContext) CallChannel() ICallChannelContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallChannelContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallChannelContext)
}

func (s *ExpressionContext) CallElement() ICallElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallElementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallElementContext)
}

func (s *ExpressionContext) CallExpression() ICallExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallExpressionContext)
}

func (s *ExpressionContext) JudgeType() IJudgeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJudgeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJudgeTypeContext)
}

func (s *ExpressionContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Expression() (localctx IExpressionContext) {
	return p.expression(0)
}

func (p *LiteParser) expression(_p int) (localctx IExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 130
	p.EnterRecursionRule(localctx, 130, LiteParserRULE_expression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1194)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 114, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1178)
			p.Linq()
		}

	case 2:
		{
			p.SetState(1179)
			p.PrimaryExpression()
		}

	case 3:
		{
			p.SetState(1180)
			p.CallNew()
		}

	case 4:
		{
			p.SetState(1181)
			p.CallPkg()
		}

	case 5:
		{
			p.SetState(1182)
			p.GetType()
		}

	case 6:
		{
			p.SetState(1183)
			p.CallAwait()
		}

	case 7:
		{
			p.SetState(1184)
			p.List()
		}

	case 8:
		{
			p.SetState(1185)
			p.Set()
		}

	case 9:
		{
			p.SetState(1186)
			p.Dictionary()
		}

	case 10:
		{
			p.SetState(1187)
			p.Lambda()
		}

	case 11:
		{
			p.SetState(1188)
			p.FunctionExpression()
		}

	case 12:
		{
			p.SetState(1189)
			p.PkgAnonymous()
		}

	case 13:
		{
			p.SetState(1190)
			p.TupleExpression()
		}

	case 14:
		{
			p.SetState(1191)
			p.PlusMinus()
		}

	case 15:
		{
			p.SetState(1192)
			p.Negate()
		}

	case 16:
		{
			p.SetState(1193)
			p.StringExpression()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1234)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 116, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1232)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 115, p.GetParserRuleContext()) {
			case 1:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, LiteParserRULE_expression)
				p.SetState(1196)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(1197)
					p.Judge()
				}
				{
					p.SetState(1198)
					p.expression(6)
				}

			case 2:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, LiteParserRULE_expression)
				p.SetState(1200)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(1201)
					p.Add()
				}
				{
					p.SetState(1202)
					p.expression(5)
				}

			case 3:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, LiteParserRULE_expression)
				p.SetState(1204)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(1205)
					p.Mul()
				}
				{
					p.SetState(1206)
					p.expression(4)
				}

			case 4:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, LiteParserRULE_expression)
				p.SetState(1208)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(1209)
					p.Pow()
				}
				{
					p.SetState(1210)
					p.expression(3)
				}

			case 5:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, LiteParserRULE_expression)
				p.SetState(1212)

				if !(p.Precpred(p.GetParserRuleContext(), 14)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 14)", ""))
				}
				{
					p.SetState(1213)

					var _m = p.Match(LiteParserBang)

					localctx.(*ExpressionContext).op = _m
				}

			case 6:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, LiteParserRULE_expression)
				p.SetState(1214)

				if !(p.Precpred(p.GetParserRuleContext(), 13)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 13)", ""))
				}
				{
					p.SetState(1215)

					var _m = p.Match(LiteParserQuestion)

					localctx.(*ExpressionContext).op = _m
				}

			case 7:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, LiteParserRULE_expression)
				p.SetState(1216)

				if !(p.Precpred(p.GetParserRuleContext(), 12)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 12)", ""))
				}
				{
					p.SetState(1217)

					var _m = p.Match(LiteParserLeft_Flow)

					localctx.(*ExpressionContext).op = _m
				}

			case 8:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, LiteParserRULE_expression)
				p.SetState(1218)

				if !(p.Precpred(p.GetParserRuleContext(), 11)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 11)", ""))
				}
				{
					p.SetState(1219)
					p.TypeConversion()
				}

			case 9:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, LiteParserRULE_expression)
				p.SetState(1220)

				if !(p.Precpred(p.GetParserRuleContext(), 10)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 10)", ""))
				}
				{
					p.SetState(1221)
					p.CallFunc()
				}

			case 10:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, LiteParserRULE_expression)
				p.SetState(1222)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
				}
				{
					p.SetState(1223)
					p.CallChannel()
				}

			case 11:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, LiteParserRULE_expression)
				p.SetState(1224)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
				}
				{
					p.SetState(1225)
					p.CallElement()
				}

			case 12:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, LiteParserRULE_expression)
				p.SetState(1226)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
				}
				{
					p.SetState(1227)
					p.CallExpression()
				}

			case 13:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, LiteParserRULE_expression)
				p.SetState(1228)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(1229)
					p.JudgeType()
				}
				{
					p.SetState(1230)
					p.TypeType()
				}

			}

		}
		p.SetState(1236)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 116, p.GetParserRuleContext())
	}

	return localctx
}

// ICallExpressionContext is an interface to support dynamic dispatch.
type ICallExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallExpressionContext differentiates from other interfaces.
	IsCallExpressionContext()
}

type CallExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallExpressionContext() *CallExpressionContext {
	var p = new(CallExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_callExpression
	return p
}

func (*CallExpressionContext) IsCallExpressionContext() {}

func NewCallExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallExpressionContext {
	var p = new(CallExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_callExpression

	return p
}

func (s *CallExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *CallExpressionContext) Call() ICallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallContext)
}

func (s *CallExpressionContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *CallExpressionContext) New_Line() antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, 0)
}

func (s *CallExpressionContext) TemplateCall() ITemplateCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateCallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateCallContext)
}

func (s *CallExpressionContext) CallFunc() ICallFuncContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallFuncContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallFuncContext)
}

func (s *CallExpressionContext) CallChannel() ICallChannelContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallChannelContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallChannelContext)
}

func (s *CallExpressionContext) CallElement() ICallElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallElementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallElementContext)
}

func (s *CallExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitCallExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) CallExpression() (localctx ICallExpressionContext) {
	localctx = NewCallExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, LiteParserRULE_callExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1237)
		p.Call()
	}
	p.SetState(1239)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserNew_Line {
		{
			p.SetState(1238)
			p.Match(LiteParserNew_Line)
		}

	}
	{
		p.SetState(1241)
		p.Id()
	}
	p.SetState(1243)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 118, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1242)
			p.TemplateCall()
		}

	}
	p.SetState(1248)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 119, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1245)
			p.CallFunc()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 119, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(1246)
			p.CallChannel()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 119, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(1247)
			p.CallElement()
		}

	}

	return localctx
}

// ITupleContext is an interface to support dynamic dispatch.
type ITupleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTupleContext differentiates from other interfaces.
	IsTupleContext()
}

type TupleContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTupleContext() *TupleContext {
	var p = new(TupleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_tuple
	return p
}

func (*TupleContext) IsTupleContext() {}

func NewTupleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TupleContext {
	var p = new(TupleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_tuple

	return p
}

func (s *TupleContext) GetParser() antlr.Parser { return s.parser }

func (s *TupleContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *TupleContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *TupleContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *TupleContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TupleContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *TupleContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *TupleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TupleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTuple(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Tuple() (localctx ITupleContext) {
	localctx = NewTupleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, LiteParserRULE_tuple)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1250)
		p.Left_paren()
	}
	p.SetState(1260)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<LiteParserLinqFrom)|(1<<LiteParserLinqBy)|(1<<LiteParserLinqSelect)|(1<<LiteParserLinqWhere)|(1<<LiteParserLinqGroup)|(1<<LiteParserLinqInto)|(1<<LiteParserLinqOrderby)|(1<<LiteParserLinqJoin)|(1<<LiteParserLinqLet)|(1<<LiteParserLinqIn)|(1<<LiteParserLinqOn)|(1<<LiteParserLinqEquals)|(1<<LiteParserLinqAscending)|(1<<LiteParserLinqDescending))) != 0) || (((_la-36)&-(0x1f+1)) == 0 && ((1<<uint((_la-36)))&((1<<(LiteParserLeft_Flow-36))|(1<<(LiteParserLess-36))|(1<<(LiteParserLeft_Paren-36))|(1<<(LiteParserLeft_Brace-36))|(1<<(LiteParserLeft_Brack-36))|(1<<(LiteParserQuestion-36))|(1<<(LiteParserBang-36))|(1<<(LiteParserWave-36))|(1<<(LiteParserAdd-36))|(1<<(LiteParserSub-36))|(1<<(LiteParserTypeI8-36))|(1<<(LiteParserTypeU8-36))|(1<<(LiteParserTypeI16-36))|(1<<(LiteParserTypeU16-36))|(1<<(LiteParserTypeI32-36))|(1<<(LiteParserTypeU32-36))|(1<<(LiteParserTypeI64-36)))) != 0) || (((_la-68)&-(0x1f+1)) == 0 && ((1<<uint((_la-68)))&((1<<(LiteParserTypeU64-68))|(1<<(LiteParserTypeF32-68))|(1<<(LiteParserTypeF64-68))|(1<<(LiteParserTypeChr-68))|(1<<(LiteParserTypeStr-68))|(1<<(LiteParserTypeBool-68))|(1<<(LiteParserTypeInt-68))|(1<<(LiteParserTypeNum-68))|(1<<(LiteParserTypeByte-68))|(1<<(LiteParserTypeAny-68))|(1<<(LiteParserNilLiteral-68))|(1<<(LiteParserTrueLiteral-68))|(1<<(LiteParserFalseLiteral-68))|(1<<(LiteParserUndefinedLiteral-68))|(1<<(LiteParserNumberLiteral-68))|(1<<(LiteParserTextLiteral-68))|(1<<(LiteParserCharLiteral-68))|(1<<(LiteParserIDPrivate-68))|(1<<(LiteParserIDPublic-68))|(1<<(LiteParserDiscard-68)))) != 0) {
		{
			p.SetState(1251)
			p.expression(0)
		}
		p.SetState(1257)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == LiteParserComma {
			{
				p.SetState(1252)
				p.More()
			}
			{
				p.SetState(1253)
				p.expression(0)
			}

			p.SetState(1259)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(1262)
		p.Right_paren()
	}

	return localctx
}

// IExpressionListContext is an interface to support dynamic dispatch.
type IExpressionListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionListContext differentiates from other interfaces.
	IsExpressionListContext()
}

type ExpressionListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionListContext() *ExpressionListContext {
	var p = new(ExpressionListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_expressionList
	return p
}

func (*ExpressionListContext) IsExpressionListContext() {}

func NewExpressionListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionListContext {
	var p = new(ExpressionListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_expressionList

	return p
}

func (s *ExpressionListContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionListContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionListContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionListContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *ExpressionListContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *ExpressionListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitExpressionList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) ExpressionList() (localctx IExpressionListContext) {
	localctx = NewExpressionListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, LiteParserRULE_expressionList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1264)
		p.expression(0)
	}
	p.SetState(1270)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserComma {
		{
			p.SetState(1265)
			p.More()
		}
		{
			p.SetState(1266)
			p.expression(0)
		}

		p.SetState(1272)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAnnotationSupportContext is an interface to support dynamic dispatch.
type IAnnotationSupportContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnnotationSupportContext differentiates from other interfaces.
	IsAnnotationSupportContext()
}

type AnnotationSupportContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnnotationSupportContext() *AnnotationSupportContext {
	var p = new(AnnotationSupportContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_annotationSupport
	return p
}

func (*AnnotationSupportContext) IsAnnotationSupportContext() {}

func NewAnnotationSupportContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnnotationSupportContext {
	var p = new(AnnotationSupportContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_annotationSupport

	return p
}

func (s *AnnotationSupportContext) GetParser() antlr.Parser { return s.parser }

func (s *AnnotationSupportContext) Annotation() IAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *AnnotationSupportContext) New_Line() antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, 0)
}

func (s *AnnotationSupportContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnnotationSupportContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnnotationSupportContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitAnnotationSupport(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) AnnotationSupport() (localctx IAnnotationSupportContext) {
	localctx = NewAnnotationSupportContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, LiteParserRULE_annotationSupport)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1273)
		p.Annotation()
	}
	p.SetState(1275)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserNew_Line {
		{
			p.SetState(1274)
			p.Match(LiteParserNew_Line)
		}

	}

	return localctx
}

// IAnnotationContext is an interface to support dynamic dispatch.
type IAnnotationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnnotationContext differentiates from other interfaces.
	IsAnnotationContext()
}

type AnnotationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnnotationContext() *AnnotationContext {
	var p = new(AnnotationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_annotation
	return p
}

func (*AnnotationContext) IsAnnotationContext() {}

func NewAnnotationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnnotationContext {
	var p = new(AnnotationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_annotation

	return p
}

func (s *AnnotationContext) GetParser() antlr.Parser { return s.parser }

func (s *AnnotationContext) Left_Brack() antlr.TerminalNode {
	return s.GetToken(LiteParserLeft_Brack, 0)
}

func (s *AnnotationContext) AnnotationList() IAnnotationListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationListContext)
}

func (s *AnnotationContext) Right_Brack() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Brack, 0)
}

func (s *AnnotationContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *AnnotationContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *AnnotationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnnotationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnnotationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitAnnotation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Annotation() (localctx IAnnotationContext) {
	localctx = NewAnnotationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, LiteParserRULE_annotation)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1277)
		p.Match(LiteParserLeft_Brack)
	}
	p.SetState(1281)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 124, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1278)
			p.Id()
		}
		{
			p.SetState(1279)
			p.Match(LiteParserRight_Arrow)
		}

	}
	{
		p.SetState(1283)
		p.AnnotationList()
	}
	{
		p.SetState(1284)
		p.Match(LiteParserRight_Brack)
	}

	return localctx
}

// IAnnotationListContext is an interface to support dynamic dispatch.
type IAnnotationListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnnotationListContext differentiates from other interfaces.
	IsAnnotationListContext()
}

type AnnotationListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnnotationListContext() *AnnotationListContext {
	var p = new(AnnotationListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_annotationList
	return p
}

func (*AnnotationListContext) IsAnnotationListContext() {}

func NewAnnotationListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnnotationListContext {
	var p = new(AnnotationListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_annotationList

	return p
}

func (s *AnnotationListContext) GetParser() antlr.Parser { return s.parser }

func (s *AnnotationListContext) AllAnnotationItem() []IAnnotationItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAnnotationItemContext)(nil)).Elem())
	var tst = make([]IAnnotationItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAnnotationItemContext)
		}
	}

	return tst
}

func (s *AnnotationListContext) AnnotationItem(i int) IAnnotationItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAnnotationItemContext)
}

func (s *AnnotationListContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *AnnotationListContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *AnnotationListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnnotationListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnnotationListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitAnnotationList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) AnnotationList() (localctx IAnnotationListContext) {
	localctx = NewAnnotationListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, LiteParserRULE_annotationList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1286)
		p.AnnotationItem()
	}
	p.SetState(1292)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserComma {
		{
			p.SetState(1287)
			p.More()
		}
		{
			p.SetState(1288)
			p.AnnotationItem()
		}

		p.SetState(1294)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAnnotationItemContext is an interface to support dynamic dispatch.
type IAnnotationItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnnotationItemContext differentiates from other interfaces.
	IsAnnotationItemContext()
}

type AnnotationItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnnotationItemContext() *AnnotationItemContext {
	var p = new(AnnotationItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_annotationItem
	return p
}

func (*AnnotationItemContext) IsAnnotationItemContext() {}

func NewAnnotationItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnnotationItemContext {
	var p = new(AnnotationItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_annotationItem

	return p
}

func (s *AnnotationItemContext) GetParser() antlr.Parser { return s.parser }

func (s *AnnotationItemContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *AnnotationItemContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *AnnotationItemContext) AllAnnotationAssign() []IAnnotationAssignContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAnnotationAssignContext)(nil)).Elem())
	var tst = make([]IAnnotationAssignContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAnnotationAssignContext)
		}
	}

	return tst
}

func (s *AnnotationItemContext) AnnotationAssign(i int) IAnnotationAssignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationAssignContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAnnotationAssignContext)
}

func (s *AnnotationItemContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *AnnotationItemContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *AnnotationItemContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *AnnotationItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnnotationItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnnotationItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitAnnotationItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) AnnotationItem() (localctx IAnnotationItemContext) {
	localctx = NewAnnotationItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, LiteParserRULE_annotationItem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1295)
		p.Id()
	}
	p.SetState(1308)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Paren {
		{
			p.SetState(1296)
			p.Left_paren()
		}
		{
			p.SetState(1297)
			p.AnnotationAssign()
		}
		p.SetState(1303)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == LiteParserComma {
			{
				p.SetState(1298)
				p.More()
			}
			{
				p.SetState(1299)
				p.AnnotationAssign()
			}

			p.SetState(1305)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1306)
			p.Right_paren()
		}

	}

	return localctx
}

// IAnnotationAssignContext is an interface to support dynamic dispatch.
type IAnnotationAssignContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnnotationAssignContext differentiates from other interfaces.
	IsAnnotationAssignContext()
}

type AnnotationAssignContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnnotationAssignContext() *AnnotationAssignContext {
	var p = new(AnnotationAssignContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_annotationAssign
	return p
}

func (*AnnotationAssignContext) IsAnnotationAssignContext() {}

func NewAnnotationAssignContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnnotationAssignContext {
	var p = new(AnnotationAssignContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_annotationAssign

	return p
}

func (s *AnnotationAssignContext) GetParser() antlr.Parser { return s.parser }

func (s *AnnotationAssignContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *AnnotationAssignContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *AnnotationAssignContext) Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserEqual, 0)
}

func (s *AnnotationAssignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnnotationAssignContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnnotationAssignContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitAnnotationAssign(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) AnnotationAssign() (localctx IAnnotationAssignContext) {
	localctx = NewAnnotationAssignContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, LiteParserRULE_annotationAssign)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1313)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 128, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1310)
			p.Id()
		}
		{
			p.SetState(1311)
			p.Match(LiteParserEqual)
		}

	}
	{
		p.SetState(1315)
		p.expression(0)
	}

	return localctx
}

// ICallFuncContext is an interface to support dynamic dispatch.
type ICallFuncContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallFuncContext differentiates from other interfaces.
	IsCallFuncContext()
}

type CallFuncContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallFuncContext() *CallFuncContext {
	var p = new(CallFuncContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_callFunc
	return p
}

func (*CallFuncContext) IsCallFuncContext() {}

func NewCallFuncContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallFuncContext {
	var p = new(CallFuncContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_callFunc

	return p
}

func (s *CallFuncContext) GetParser() antlr.Parser { return s.parser }

func (s *CallFuncContext) Tuple() ITupleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleContext)
}

func (s *CallFuncContext) Lambda() ILambdaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILambdaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILambdaContext)
}

func (s *CallFuncContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallFuncContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallFuncContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitCallFunc(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) CallFunc() (localctx ICallFuncContext) {
	localctx = NewCallFuncContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, LiteParserRULE_callFunc)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1319)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case LiteParserLeft_Paren:
		{
			p.SetState(1317)
			p.Tuple()
		}

	case LiteParserLeft_Brace:
		{
			p.SetState(1318)
			p.Lambda()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICallChannelContext is an interface to support dynamic dispatch.
type ICallChannelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallChannelContext differentiates from other interfaces.
	IsCallChannelContext()
}

type CallChannelContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallChannelContext() *CallChannelContext {
	var p = new(CallChannelContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_callChannel
	return p
}

func (*CallChannelContext) IsCallChannelContext() {}

func NewCallChannelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallChannelContext {
	var p = new(CallChannelContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_callChannel

	return p
}

func (s *CallChannelContext) GetParser() antlr.Parser { return s.parser }

func (s *CallChannelContext) Left_Brack() antlr.TerminalNode {
	return s.GetToken(LiteParserLeft_Brack, 0)
}

func (s *CallChannelContext) Left_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserLeft_Arrow, 0)
}

func (s *CallChannelContext) Right_Brack() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Brack, 0)
}

func (s *CallChannelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallChannelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallChannelContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitCallChannel(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) CallChannel() (localctx ICallChannelContext) {
	localctx = NewCallChannelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, LiteParserRULE_callChannel)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1321)
		p.Match(LiteParserLeft_Brack)
	}
	{
		p.SetState(1322)
		p.Match(LiteParserLeft_Arrow)
	}
	{
		p.SetState(1323)
		p.Match(LiteParserRight_Brack)
	}

	return localctx
}

// ICallElementContext is an interface to support dynamic dispatch.
type ICallElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallElementContext differentiates from other interfaces.
	IsCallElementContext()
}

type CallElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallElementContext() *CallElementContext {
	var p = new(CallElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_callElement
	return p
}

func (*CallElementContext) IsCallElementContext() {}

func NewCallElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallElementContext {
	var p = new(CallElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_callElement

	return p
}

func (s *CallElementContext) GetParser() antlr.Parser { return s.parser }

func (s *CallElementContext) Left_Brack() antlr.TerminalNode {
	return s.GetToken(LiteParserLeft_Brack, 0)
}

func (s *CallElementContext) Right_Brack() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Brack, 0)
}

func (s *CallElementContext) Slice() ISliceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISliceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISliceContext)
}

func (s *CallElementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CallElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitCallElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) CallElement() (localctx ICallElementContext) {
	localctx = NewCallElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, LiteParserRULE_callElement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1325)
		p.Match(LiteParserLeft_Brack)
	}
	p.SetState(1328)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 130, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1326)
			p.Slice()
		}

	case 2:
		{
			p.SetState(1327)
			p.expression(0)
		}

	}
	{
		p.SetState(1330)
		p.Match(LiteParserRight_Brack)
	}

	return localctx
}

// ICallPkgContext is an interface to support dynamic dispatch.
type ICallPkgContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallPkgContext differentiates from other interfaces.
	IsCallPkgContext()
}

type CallPkgContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallPkgContext() *CallPkgContext {
	var p = new(CallPkgContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_callPkg
	return p
}

func (*CallPkgContext) IsCallPkgContext() {}

func NewCallPkgContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallPkgContext {
	var p = new(CallPkgContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_callPkg

	return p
}

func (s *CallPkgContext) GetParser() antlr.Parser { return s.parser }

func (s *CallPkgContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *CallPkgContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *CallPkgContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *CallPkgContext) PkgAssign() IPkgAssignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPkgAssignContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPkgAssignContext)
}

func (s *CallPkgContext) ListAssign() IListAssignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IListAssignContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IListAssignContext)
}

func (s *CallPkgContext) SetAssign() ISetAssignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetAssignContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetAssignContext)
}

func (s *CallPkgContext) DictionaryAssign() IDictionaryAssignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDictionaryAssignContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDictionaryAssignContext)
}

func (s *CallPkgContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallPkgContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallPkgContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitCallPkg(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) CallPkg() (localctx ICallPkgContext) {
	localctx = NewCallPkgContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, LiteParserRULE_callPkg)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1332)
		p.TypeType()
	}
	{
		p.SetState(1333)
		p.Left_brace()
	}
	p.SetState(1338)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 131, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1334)
			p.PkgAssign()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 131, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(1335)
			p.ListAssign()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 131, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(1336)
			p.SetAssign()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 131, p.GetParserRuleContext()) == 4 {
		{
			p.SetState(1337)
			p.DictionaryAssign()
		}

	}
	{
		p.SetState(1340)
		p.Right_brace()
	}

	return localctx
}

// ICallNewContext is an interface to support dynamic dispatch.
type ICallNewContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallNewContext differentiates from other interfaces.
	IsCallNewContext()
}

type CallNewContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallNewContext() *CallNewContext {
	var p = new(CallNewContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_callNew
	return p
}

func (*CallNewContext) IsCallNewContext() {}

func NewCallNewContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallNewContext {
	var p = new(CallNewContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_callNew

	return p
}

func (s *CallNewContext) GetParser() antlr.Parser { return s.parser }

func (s *CallNewContext) Less() antlr.TerminalNode {
	return s.GetToken(LiteParserLess, 0)
}

func (s *CallNewContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *CallNewContext) Greater() antlr.TerminalNode {
	return s.GetToken(LiteParserGreater, 0)
}

func (s *CallNewContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *CallNewContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *CallNewContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *CallNewContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *CallNewContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *CallNewContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallNewContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallNewContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitCallNew(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) CallNew() (localctx ICallNewContext) {
	localctx = NewCallNewContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, LiteParserRULE_callNew)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1342)
		p.Match(LiteParserLess)
	}
	{
		p.SetState(1343)
		p.TypeType()
	}
	{
		p.SetState(1344)
		p.Match(LiteParserGreater)
	}
	{
		p.SetState(1345)
		p.Left_paren()
	}
	p.SetState(1347)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 132, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1346)
			p.Match(LiteParserNew_Line)
		}

	}
	p.SetState(1350)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<LiteParserLinqFrom)|(1<<LiteParserLinqBy)|(1<<LiteParserLinqSelect)|(1<<LiteParserLinqWhere)|(1<<LiteParserLinqGroup)|(1<<LiteParserLinqInto)|(1<<LiteParserLinqOrderby)|(1<<LiteParserLinqJoin)|(1<<LiteParserLinqLet)|(1<<LiteParserLinqIn)|(1<<LiteParserLinqOn)|(1<<LiteParserLinqEquals)|(1<<LiteParserLinqAscending)|(1<<LiteParserLinqDescending))) != 0) || (((_la-36)&-(0x1f+1)) == 0 && ((1<<uint((_la-36)))&((1<<(LiteParserLeft_Flow-36))|(1<<(LiteParserLess-36))|(1<<(LiteParserLeft_Paren-36))|(1<<(LiteParserLeft_Brace-36))|(1<<(LiteParserLeft_Brack-36))|(1<<(LiteParserQuestion-36))|(1<<(LiteParserBang-36))|(1<<(LiteParserWave-36))|(1<<(LiteParserAdd-36))|(1<<(LiteParserSub-36))|(1<<(LiteParserTypeI8-36))|(1<<(LiteParserTypeU8-36))|(1<<(LiteParserTypeI16-36))|(1<<(LiteParserTypeU16-36))|(1<<(LiteParserTypeI32-36))|(1<<(LiteParserTypeU32-36))|(1<<(LiteParserTypeI64-36)))) != 0) || (((_la-68)&-(0x1f+1)) == 0 && ((1<<uint((_la-68)))&((1<<(LiteParserTypeU64-68))|(1<<(LiteParserTypeF32-68))|(1<<(LiteParserTypeF64-68))|(1<<(LiteParserTypeChr-68))|(1<<(LiteParserTypeStr-68))|(1<<(LiteParserTypeBool-68))|(1<<(LiteParserTypeInt-68))|(1<<(LiteParserTypeNum-68))|(1<<(LiteParserTypeByte-68))|(1<<(LiteParserTypeAny-68))|(1<<(LiteParserNilLiteral-68))|(1<<(LiteParserTrueLiteral-68))|(1<<(LiteParserFalseLiteral-68))|(1<<(LiteParserUndefinedLiteral-68))|(1<<(LiteParserNumberLiteral-68))|(1<<(LiteParserTextLiteral-68))|(1<<(LiteParserCharLiteral-68))|(1<<(LiteParserIDPrivate-68))|(1<<(LiteParserIDPublic-68))|(1<<(LiteParserDiscard-68)))) != 0) {
		{
			p.SetState(1349)
			p.ExpressionList()
		}

	}
	p.SetState(1353)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserNew_Line {
		{
			p.SetState(1352)
			p.Match(LiteParserNew_Line)
		}

	}
	{
		p.SetState(1355)
		p.Right_paren()
	}

	return localctx
}

// IGetTypeContext is an interface to support dynamic dispatch.
type IGetTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGetTypeContext differentiates from other interfaces.
	IsGetTypeContext()
}

type GetTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGetTypeContext() *GetTypeContext {
	var p = new(GetTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_getType
	return p
}

func (*GetTypeContext) IsGetTypeContext() {}

func NewGetTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GetTypeContext {
	var p = new(GetTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_getType

	return p
}

func (s *GetTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *GetTypeContext) Question() antlr.TerminalNode {
	return s.GetToken(LiteParserQuestion, 0)
}

func (s *GetTypeContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *GetTypeContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *GetTypeContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *GetTypeContext) Colon() antlr.TerminalNode {
	return s.GetToken(LiteParserColon, 0)
}

func (s *GetTypeContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *GetTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GetTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GetTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitGetType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) GetType() (localctx IGetTypeContext) {
	localctx = NewGetTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, LiteParserRULE_getType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1357)
		p.Match(LiteParserQuestion)
	}
	{
		p.SetState(1358)
		p.Left_paren()
	}
	p.SetState(1362)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case LiteParserLinqFrom, LiteParserLinqBy, LiteParserLinqSelect, LiteParserLinqWhere, LiteParserLinqGroup, LiteParserLinqInto, LiteParserLinqOrderby, LiteParserLinqJoin, LiteParserLinqLet, LiteParserLinqIn, LiteParserLinqOn, LiteParserLinqEquals, LiteParserLinqAscending, LiteParserLinqDescending, LiteParserLeft_Flow, LiteParserLess, LiteParserLeft_Paren, LiteParserLeft_Brace, LiteParserLeft_Brack, LiteParserQuestion, LiteParserBang, LiteParserWave, LiteParserAdd, LiteParserSub, LiteParserTypeI8, LiteParserTypeU8, LiteParserTypeI16, LiteParserTypeU16, LiteParserTypeI32, LiteParserTypeU32, LiteParserTypeI64, LiteParserTypeU64, LiteParserTypeF32, LiteParserTypeF64, LiteParserTypeChr, LiteParserTypeStr, LiteParserTypeBool, LiteParserTypeInt, LiteParserTypeNum, LiteParserTypeByte, LiteParserTypeAny, LiteParserNilLiteral, LiteParserTrueLiteral, LiteParserFalseLiteral, LiteParserUndefinedLiteral, LiteParserNumberLiteral, LiteParserTextLiteral, LiteParserCharLiteral, LiteParserIDPrivate, LiteParserIDPublic, LiteParserDiscard:
		{
			p.SetState(1359)
			p.expression(0)
		}

	case LiteParserColon:
		{
			p.SetState(1360)
			p.Match(LiteParserColon)
		}
		{
			p.SetState(1361)
			p.TypeType()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(1364)
		p.Right_paren()
	}

	return localctx
}

// ITypeConversionContext is an interface to support dynamic dispatch.
type ITypeConversionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeConversionContext differentiates from other interfaces.
	IsTypeConversionContext()
}

type TypeConversionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeConversionContext() *TypeConversionContext {
	var p = new(TypeConversionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_typeConversion
	return p
}

func (*TypeConversionContext) IsTypeConversionContext() {}

func NewTypeConversionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeConversionContext {
	var p = new(TypeConversionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_typeConversion

	return p
}

func (s *TypeConversionContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeConversionContext) Colon() antlr.TerminalNode {
	return s.GetToken(LiteParserColon, 0)
}

func (s *TypeConversionContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *TypeConversionContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeConversionContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *TypeConversionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeConversionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeConversionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTypeConversion(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TypeConversion() (localctx ITypeConversionContext) {
	localctx = NewTypeConversionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, LiteParserRULE_typeConversion)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1366)
		p.Match(LiteParserColon)
	}
	{
		p.SetState(1367)
		p.Left_paren()
	}
	{
		p.SetState(1368)
		p.TypeType()
	}
	{
		p.SetState(1369)
		p.Right_paren()
	}

	return localctx
}

// IPkgAssignContext is an interface to support dynamic dispatch.
type IPkgAssignContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPkgAssignContext differentiates from other interfaces.
	IsPkgAssignContext()
}

type PkgAssignContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPkgAssignContext() *PkgAssignContext {
	var p = new(PkgAssignContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_pkgAssign
	return p
}

func (*PkgAssignContext) IsPkgAssignContext() {}

func NewPkgAssignContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PkgAssignContext {
	var p = new(PkgAssignContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_pkgAssign

	return p
}

func (s *PkgAssignContext) GetParser() antlr.Parser { return s.parser }

func (s *PkgAssignContext) AllPkgAssignElement() []IPkgAssignElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPkgAssignElementContext)(nil)).Elem())
	var tst = make([]IPkgAssignElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPkgAssignElementContext)
		}
	}

	return tst
}

func (s *PkgAssignContext) PkgAssignElement(i int) IPkgAssignElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPkgAssignElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPkgAssignElementContext)
}

func (s *PkgAssignContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *PkgAssignContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *PkgAssignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PkgAssignContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PkgAssignContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitPkgAssign(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) PkgAssign() (localctx IPkgAssignContext) {
	localctx = NewPkgAssignContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, LiteParserRULE_pkgAssign)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1371)
		p.PkgAssignElement()
	}
	p.SetState(1377)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserComma {
		{
			p.SetState(1372)
			p.More()
		}
		{
			p.SetState(1373)
			p.PkgAssignElement()
		}

		p.SetState(1379)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IPkgAssignElementContext is an interface to support dynamic dispatch.
type IPkgAssignElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPkgAssignElementContext differentiates from other interfaces.
	IsPkgAssignElementContext()
}

type PkgAssignElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPkgAssignElementContext() *PkgAssignElementContext {
	var p = new(PkgAssignElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_pkgAssignElement
	return p
}

func (*PkgAssignElementContext) IsPkgAssignElementContext() {}

func NewPkgAssignElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PkgAssignElementContext {
	var p = new(PkgAssignElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_pkgAssignElement

	return p
}

func (s *PkgAssignElementContext) GetParser() antlr.Parser { return s.parser }

func (s *PkgAssignElementContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *PkgAssignElementContext) Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserEqual, 0)
}

func (s *PkgAssignElementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PkgAssignElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PkgAssignElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PkgAssignElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitPkgAssignElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) PkgAssignElement() (localctx IPkgAssignElementContext) {
	localctx = NewPkgAssignElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, LiteParserRULE_pkgAssignElement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1380)
		p.Name()
	}
	{
		p.SetState(1381)
		p.Match(LiteParserEqual)
	}
	{
		p.SetState(1382)
		p.expression(0)
	}

	return localctx
}

// IListAssignContext is an interface to support dynamic dispatch.
type IListAssignContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsListAssignContext differentiates from other interfaces.
	IsListAssignContext()
}

type ListAssignContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyListAssignContext() *ListAssignContext {
	var p = new(ListAssignContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_listAssign
	return p
}

func (*ListAssignContext) IsListAssignContext() {}

func NewListAssignContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ListAssignContext {
	var p = new(ListAssignContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_listAssign

	return p
}

func (s *ListAssignContext) GetParser() antlr.Parser { return s.parser }

func (s *ListAssignContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ListAssignContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ListAssignContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *ListAssignContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *ListAssignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ListAssignContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ListAssignContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitListAssign(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) ListAssign() (localctx IListAssignContext) {
	localctx = NewListAssignContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, LiteParserRULE_listAssign)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1384)
		p.expression(0)
	}
	p.SetState(1390)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserComma {
		{
			p.SetState(1385)
			p.More()
		}
		{
			p.SetState(1386)
			p.expression(0)
		}

		p.SetState(1392)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ISetAssignContext is an interface to support dynamic dispatch.
type ISetAssignContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSetAssignContext differentiates from other interfaces.
	IsSetAssignContext()
}

type SetAssignContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetAssignContext() *SetAssignContext {
	var p = new(SetAssignContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_setAssign
	return p
}

func (*SetAssignContext) IsSetAssignContext() {}

func NewSetAssignContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetAssignContext {
	var p = new(SetAssignContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_setAssign

	return p
}

func (s *SetAssignContext) GetParser() antlr.Parser { return s.parser }

func (s *SetAssignContext) AllLeft_Brack() []antlr.TerminalNode {
	return s.GetTokens(LiteParserLeft_Brack)
}

func (s *SetAssignContext) Left_Brack(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserLeft_Brack, i)
}

func (s *SetAssignContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *SetAssignContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SetAssignContext) AllRight_Brack() []antlr.TerminalNode {
	return s.GetTokens(LiteParserRight_Brack)
}

func (s *SetAssignContext) Right_Brack(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Brack, i)
}

func (s *SetAssignContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *SetAssignContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *SetAssignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetAssignContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetAssignContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitSetAssign(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) SetAssign() (localctx ISetAssignContext) {
	localctx = NewSetAssignContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, LiteParserRULE_setAssign)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1393)
		p.Match(LiteParserLeft_Brack)
	}
	{
		p.SetState(1394)
		p.expression(0)
	}
	{
		p.SetState(1395)
		p.Match(LiteParserRight_Brack)
	}
	p.SetState(1403)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserComma {
		{
			p.SetState(1396)
			p.More()
		}
		{
			p.SetState(1397)
			p.Match(LiteParserLeft_Brack)
		}
		{
			p.SetState(1398)
			p.expression(0)
		}
		{
			p.SetState(1399)
			p.Match(LiteParserRight_Brack)
		}

		p.SetState(1405)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IDictionaryAssignContext is an interface to support dynamic dispatch.
type IDictionaryAssignContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDictionaryAssignContext differentiates from other interfaces.
	IsDictionaryAssignContext()
}

type DictionaryAssignContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDictionaryAssignContext() *DictionaryAssignContext {
	var p = new(DictionaryAssignContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_dictionaryAssign
	return p
}

func (*DictionaryAssignContext) IsDictionaryAssignContext() {}

func NewDictionaryAssignContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DictionaryAssignContext {
	var p = new(DictionaryAssignContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_dictionaryAssign

	return p
}

func (s *DictionaryAssignContext) GetParser() antlr.Parser { return s.parser }

func (s *DictionaryAssignContext) AllDictionaryElement() []IDictionaryElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDictionaryElementContext)(nil)).Elem())
	var tst = make([]IDictionaryElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDictionaryElementContext)
		}
	}

	return tst
}

func (s *DictionaryAssignContext) DictionaryElement(i int) IDictionaryElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDictionaryElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDictionaryElementContext)
}

func (s *DictionaryAssignContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *DictionaryAssignContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *DictionaryAssignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DictionaryAssignContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DictionaryAssignContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitDictionaryAssign(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) DictionaryAssign() (localctx IDictionaryAssignContext) {
	localctx = NewDictionaryAssignContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, LiteParserRULE_dictionaryAssign)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1406)
		p.DictionaryElement()
	}
	p.SetState(1412)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserComma {
		{
			p.SetState(1407)
			p.More()
		}
		{
			p.SetState(1408)
			p.DictionaryElement()
		}

		p.SetState(1414)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ICallAwaitContext is an interface to support dynamic dispatch.
type ICallAwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallAwaitContext differentiates from other interfaces.
	IsCallAwaitContext()
}

type CallAwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallAwaitContext() *CallAwaitContext {
	var p = new(CallAwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_callAwait
	return p
}

func (*CallAwaitContext) IsCallAwaitContext() {}

func NewCallAwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallAwaitContext {
	var p = new(CallAwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_callAwait

	return p
}

func (s *CallAwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *CallAwaitContext) Left_Flow() antlr.TerminalNode {
	return s.GetToken(LiteParserLeft_Flow, 0)
}

func (s *CallAwaitContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CallAwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallAwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallAwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitCallAwait(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) CallAwait() (localctx ICallAwaitContext) {
	localctx = NewCallAwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, LiteParserRULE_callAwait)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1415)
		p.Match(LiteParserLeft_Flow)
	}
	{
		p.SetState(1416)
		p.expression(0)
	}

	return localctx
}

// IListContext is an interface to support dynamic dispatch.
type IListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsListContext differentiates from other interfaces.
	IsListContext()
}

type ListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyListContext() *ListContext {
	var p = new(ListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_list
	return p
}

func (*ListContext) IsListContext() {}

func NewListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ListContext {
	var p = new(ListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_list

	return p
}

func (s *ListContext) GetParser() antlr.Parser { return s.parser }

func (s *ListContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *ListContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ListContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ListContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *ListContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *ListContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *ListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) List() (localctx IListContext) {
	localctx = NewListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, LiteParserRULE_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1418)
		p.Left_brace()
	}
	{
		p.SetState(1419)
		p.expression(0)
	}
	p.SetState(1425)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserComma {
		{
			p.SetState(1420)
			p.More()
		}
		{
			p.SetState(1421)
			p.expression(0)
		}

		p.SetState(1427)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1428)
		p.Right_brace()
	}

	return localctx
}

// ISetContext is an interface to support dynamic dispatch.
type ISetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSetContext differentiates from other interfaces.
	IsSetContext()
}

type SetContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetContext() *SetContext {
	var p = new(SetContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_set
	return p
}

func (*SetContext) IsSetContext() {}

func NewSetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetContext {
	var p = new(SetContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_set

	return p
}

func (s *SetContext) GetParser() antlr.Parser { return s.parser }

func (s *SetContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *SetContext) AllLeft_Brack() []antlr.TerminalNode {
	return s.GetTokens(LiteParserLeft_Brack)
}

func (s *SetContext) Left_Brack(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserLeft_Brack, i)
}

func (s *SetContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *SetContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SetContext) AllRight_Brack() []antlr.TerminalNode {
	return s.GetTokens(LiteParserRight_Brack)
}

func (s *SetContext) Right_Brack(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Brack, i)
}

func (s *SetContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *SetContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *SetContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *SetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitSet(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Set() (localctx ISetContext) {
	localctx = NewSetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, LiteParserRULE_set)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1430)
		p.Left_brace()
	}
	{
		p.SetState(1431)
		p.Match(LiteParserLeft_Brack)
	}
	{
		p.SetState(1432)
		p.expression(0)
	}
	{
		p.SetState(1433)
		p.Match(LiteParserRight_Brack)
	}
	p.SetState(1441)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserComma {
		{
			p.SetState(1434)
			p.More()
		}
		{
			p.SetState(1435)
			p.Match(LiteParserLeft_Brack)
		}
		{
			p.SetState(1436)
			p.expression(0)
		}
		{
			p.SetState(1437)
			p.Match(LiteParserRight_Brack)
		}

		p.SetState(1443)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1444)
		p.Right_brace()
	}

	return localctx
}

// IDictionaryContext is an interface to support dynamic dispatch.
type IDictionaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDictionaryContext differentiates from other interfaces.
	IsDictionaryContext()
}

type DictionaryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDictionaryContext() *DictionaryContext {
	var p = new(DictionaryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_dictionary
	return p
}

func (*DictionaryContext) IsDictionaryContext() {}

func NewDictionaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DictionaryContext {
	var p = new(DictionaryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_dictionary

	return p
}

func (s *DictionaryContext) GetParser() antlr.Parser { return s.parser }

func (s *DictionaryContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *DictionaryContext) AllDictionaryElement() []IDictionaryElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDictionaryElementContext)(nil)).Elem())
	var tst = make([]IDictionaryElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDictionaryElementContext)
		}
	}

	return tst
}

func (s *DictionaryContext) DictionaryElement(i int) IDictionaryElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDictionaryElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDictionaryElementContext)
}

func (s *DictionaryContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *DictionaryContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *DictionaryContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *DictionaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DictionaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DictionaryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitDictionary(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Dictionary() (localctx IDictionaryContext) {
	localctx = NewDictionaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, LiteParserRULE_dictionary)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1446)
		p.Left_brace()
	}
	{
		p.SetState(1447)
		p.DictionaryElement()
	}
	p.SetState(1453)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserComma {
		{
			p.SetState(1448)
			p.More()
		}
		{
			p.SetState(1449)
			p.DictionaryElement()
		}

		p.SetState(1455)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1456)
		p.Right_brace()
	}

	return localctx
}

// IDictionaryElementContext is an interface to support dynamic dispatch.
type IDictionaryElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDictionaryElementContext differentiates from other interfaces.
	IsDictionaryElementContext()
}

type DictionaryElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDictionaryElementContext() *DictionaryElementContext {
	var p = new(DictionaryElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_dictionaryElement
	return p
}

func (*DictionaryElementContext) IsDictionaryElementContext() {}

func NewDictionaryElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DictionaryElementContext {
	var p = new(DictionaryElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_dictionaryElement

	return p
}

func (s *DictionaryElementContext) GetParser() antlr.Parser { return s.parser }

func (s *DictionaryElementContext) Left_Brack() antlr.TerminalNode {
	return s.GetToken(LiteParserLeft_Brack, 0)
}

func (s *DictionaryElementContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *DictionaryElementContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *DictionaryElementContext) Right_Brack() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Brack, 0)
}

func (s *DictionaryElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DictionaryElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DictionaryElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitDictionaryElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) DictionaryElement() (localctx IDictionaryElementContext) {
	localctx = NewDictionaryElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, LiteParserRULE_dictionaryElement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1458)
		p.Match(LiteParserLeft_Brack)
	}
	{
		p.SetState(1459)
		p.expression(0)
	}
	{
		p.SetState(1460)
		p.Match(LiteParserRight_Brack)
	}
	{
		p.SetState(1461)
		p.expression(0)
	}

	return localctx
}

// ISliceContext is an interface to support dynamic dispatch.
type ISliceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSliceContext differentiates from other interfaces.
	IsSliceContext()
}

type SliceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySliceContext() *SliceContext {
	var p = new(SliceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_slice
	return p
}

func (*SliceContext) IsSliceContext() {}

func NewSliceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SliceContext {
	var p = new(SliceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_slice

	return p
}

func (s *SliceContext) GetParser() antlr.Parser { return s.parser }

func (s *SliceContext) SliceFull() ISliceFullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISliceFullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISliceFullContext)
}

func (s *SliceContext) SliceStart() ISliceStartContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISliceStartContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISliceStartContext)
}

func (s *SliceContext) SliceEnd() ISliceEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISliceEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISliceEndContext)
}

func (s *SliceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SliceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitSlice(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Slice() (localctx ISliceContext) {
	localctx = NewSliceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, LiteParserRULE_slice)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1466)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 143, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1463)
			p.SliceFull()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1464)
			p.SliceStart()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1465)
			p.SliceEnd()
		}

	}

	return localctx
}

// ISliceFullContext is an interface to support dynamic dispatch.
type ISliceFullContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsSliceFullContext differentiates from other interfaces.
	IsSliceFullContext()
}

type SliceFullContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptySliceFullContext() *SliceFullContext {
	var p = new(SliceFullContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_sliceFull
	return p
}

func (*SliceFullContext) IsSliceFullContext() {}

func NewSliceFullContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SliceFullContext {
	var p = new(SliceFullContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_sliceFull

	return p
}

func (s *SliceFullContext) GetParser() antlr.Parser { return s.parser }

func (s *SliceFullContext) GetOp() antlr.Token { return s.op }

func (s *SliceFullContext) SetOp(v antlr.Token) { s.op = v }

func (s *SliceFullContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *SliceFullContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SliceFullContext) Less() antlr.TerminalNode {
	return s.GetToken(LiteParserLess, 0)
}

func (s *SliceFullContext) Less_Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserLess_Equal, 0)
}

func (s *SliceFullContext) Greater() antlr.TerminalNode {
	return s.GetToken(LiteParserGreater, 0)
}

func (s *SliceFullContext) Greater_Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserGreater_Equal, 0)
}

func (s *SliceFullContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceFullContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SliceFullContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitSliceFull(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) SliceFull() (localctx ISliceFullContext) {
	localctx = NewSliceFullContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, LiteParserRULE_sliceFull)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1468)
		p.expression(0)
	}
	{
		p.SetState(1469)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*SliceFullContext).op = _lt

		_la = p.GetTokenStream().LA(1)

		if !(((_la-25)&-(0x1f+1)) == 0 && ((1<<uint((_la-25)))&((1<<(LiteParserLess_Equal-25))|(1<<(LiteParserGreater_Equal-25))|(1<<(LiteParserLess-25))|(1<<(LiteParserGreater-25)))) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*SliceFullContext).op = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1470)
		p.expression(0)
	}

	return localctx
}

// ISliceStartContext is an interface to support dynamic dispatch.
type ISliceStartContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsSliceStartContext differentiates from other interfaces.
	IsSliceStartContext()
}

type SliceStartContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptySliceStartContext() *SliceStartContext {
	var p = new(SliceStartContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_sliceStart
	return p
}

func (*SliceStartContext) IsSliceStartContext() {}

func NewSliceStartContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SliceStartContext {
	var p = new(SliceStartContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_sliceStart

	return p
}

func (s *SliceStartContext) GetParser() antlr.Parser { return s.parser }

func (s *SliceStartContext) GetOp() antlr.Token { return s.op }

func (s *SliceStartContext) SetOp(v antlr.Token) { s.op = v }

func (s *SliceStartContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SliceStartContext) Less() antlr.TerminalNode {
	return s.GetToken(LiteParserLess, 0)
}

func (s *SliceStartContext) Less_Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserLess_Equal, 0)
}

func (s *SliceStartContext) Greater() antlr.TerminalNode {
	return s.GetToken(LiteParserGreater, 0)
}

func (s *SliceStartContext) Greater_Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserGreater_Equal, 0)
}

func (s *SliceStartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceStartContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SliceStartContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitSliceStart(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) SliceStart() (localctx ISliceStartContext) {
	localctx = NewSliceStartContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, LiteParserRULE_sliceStart)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1472)
		p.expression(0)
	}
	{
		p.SetState(1473)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*SliceStartContext).op = _lt

		_la = p.GetTokenStream().LA(1)

		if !(((_la-25)&-(0x1f+1)) == 0 && ((1<<uint((_la-25)))&((1<<(LiteParserLess_Equal-25))|(1<<(LiteParserGreater_Equal-25))|(1<<(LiteParserLess-25))|(1<<(LiteParserGreater-25)))) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*SliceStartContext).op = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ISliceEndContext is an interface to support dynamic dispatch.
type ISliceEndContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsSliceEndContext differentiates from other interfaces.
	IsSliceEndContext()
}

type SliceEndContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptySliceEndContext() *SliceEndContext {
	var p = new(SliceEndContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_sliceEnd
	return p
}

func (*SliceEndContext) IsSliceEndContext() {}

func NewSliceEndContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SliceEndContext {
	var p = new(SliceEndContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_sliceEnd

	return p
}

func (s *SliceEndContext) GetParser() antlr.Parser { return s.parser }

func (s *SliceEndContext) GetOp() antlr.Token { return s.op }

func (s *SliceEndContext) SetOp(v antlr.Token) { s.op = v }

func (s *SliceEndContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SliceEndContext) Less() antlr.TerminalNode {
	return s.GetToken(LiteParserLess, 0)
}

func (s *SliceEndContext) Less_Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserLess_Equal, 0)
}

func (s *SliceEndContext) Greater() antlr.TerminalNode {
	return s.GetToken(LiteParserGreater, 0)
}

func (s *SliceEndContext) Greater_Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserGreater_Equal, 0)
}

func (s *SliceEndContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceEndContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SliceEndContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitSliceEnd(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) SliceEnd() (localctx ISliceEndContext) {
	localctx = NewSliceEndContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, LiteParserRULE_sliceEnd)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1475)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*SliceEndContext).op = _lt

		_la = p.GetTokenStream().LA(1)

		if !(((_la-25)&-(0x1f+1)) == 0 && ((1<<uint((_la-25)))&((1<<(LiteParserLess_Equal-25))|(1<<(LiteParserGreater_Equal-25))|(1<<(LiteParserLess-25))|(1<<(LiteParserGreater-25)))) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*SliceEndContext).op = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1476)
		p.expression(0)
	}

	return localctx
}

// INameSpaceItemContext is an interface to support dynamic dispatch.
type INameSpaceItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNameSpaceItemContext differentiates from other interfaces.
	IsNameSpaceItemContext()
}

type NameSpaceItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNameSpaceItemContext() *NameSpaceItemContext {
	var p = new(NameSpaceItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_nameSpaceItem
	return p
}

func (*NameSpaceItemContext) IsNameSpaceItemContext() {}

func NewNameSpaceItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NameSpaceItemContext {
	var p = new(NameSpaceItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_nameSpaceItem

	return p
}

func (s *NameSpaceItemContext) GetParser() antlr.Parser { return s.parser }

func (s *NameSpaceItemContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *NameSpaceItemContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *NameSpaceItemContext) AllCall() []ICallContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICallContext)(nil)).Elem())
	var tst = make([]ICallContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICallContext)
		}
	}

	return tst
}

func (s *NameSpaceItemContext) Call(i int) ICallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICallContext)
}

func (s *NameSpaceItemContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *NameSpaceItemContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *NameSpaceItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NameSpaceItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NameSpaceItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitNameSpaceItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) NameSpaceItem() (localctx INameSpaceItemContext) {
	localctx = NewNameSpaceItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, LiteParserRULE_nameSpaceItem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1485)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 145, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1478)
				p.Id()
			}
			{
				p.SetState(1479)
				p.Call()
			}
			p.SetState(1481)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == LiteParserNew_Line {
				{
					p.SetState(1480)
					p.Match(LiteParserNew_Line)
				}

			}

		}
		p.SetState(1487)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 145, p.GetParserRuleContext())
	}
	{
		p.SetState(1488)
		p.Id()
	}

	return localctx
}

// INameContext is an interface to support dynamic dispatch.
type INameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNameContext differentiates from other interfaces.
	IsNameContext()
}

type NameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNameContext() *NameContext {
	var p = new(NameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_name
	return p
}

func (*NameContext) IsNameContext() {}

func NewNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NameContext {
	var p = new(NameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_name

	return p
}

func (s *NameContext) GetParser() antlr.Parser { return s.parser }

func (s *NameContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *NameContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *NameContext) AllCall() []ICallContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICallContext)(nil)).Elem())
	var tst = make([]ICallContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICallContext)
		}
	}

	return tst
}

func (s *NameContext) Call(i int) ICallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICallContext)
}

func (s *NameContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *NameContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *NameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Name() (localctx INameContext) {
	localctx = NewNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, LiteParserRULE_name)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1490)
		p.Id()
	}
	p.SetState(1499)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserDot {
		{
			p.SetState(1491)
			p.Call()
		}
		p.SetState(1493)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == LiteParserNew_Line {
			{
				p.SetState(1492)
				p.Match(LiteParserNew_Line)
			}

		}
		{
			p.SetState(1495)
			p.Id()
		}

		p.SetState(1501)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITemplateDefineContext is an interface to support dynamic dispatch.
type ITemplateDefineContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateDefineContext differentiates from other interfaces.
	IsTemplateDefineContext()
}

type TemplateDefineContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateDefineContext() *TemplateDefineContext {
	var p = new(TemplateDefineContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_templateDefine
	return p
}

func (*TemplateDefineContext) IsTemplateDefineContext() {}

func NewTemplateDefineContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateDefineContext {
	var p = new(TemplateDefineContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_templateDefine

	return p
}

func (s *TemplateDefineContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateDefineContext) Less() antlr.TerminalNode {
	return s.GetToken(LiteParserLess, 0)
}

func (s *TemplateDefineContext) AllTemplateDefineItem() []ITemplateDefineItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITemplateDefineItemContext)(nil)).Elem())
	var tst = make([]ITemplateDefineItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITemplateDefineItemContext)
		}
	}

	return tst
}

func (s *TemplateDefineContext) TemplateDefineItem(i int) ITemplateDefineItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateDefineItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITemplateDefineItemContext)
}

func (s *TemplateDefineContext) Greater() antlr.TerminalNode {
	return s.GetToken(LiteParserGreater, 0)
}

func (s *TemplateDefineContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *TemplateDefineContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *TemplateDefineContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateDefineContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateDefineContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTemplateDefine(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TemplateDefine() (localctx ITemplateDefineContext) {
	localctx = NewTemplateDefineContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, LiteParserRULE_templateDefine)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1502)
		p.Match(LiteParserLess)
	}
	{
		p.SetState(1503)
		p.TemplateDefineItem()
	}
	p.SetState(1509)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserComma {
		{
			p.SetState(1504)
			p.More()
		}
		{
			p.SetState(1505)
			p.TemplateDefineItem()
		}

		p.SetState(1511)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1512)
		p.Match(LiteParserGreater)
	}

	return localctx
}

// ITemplateDefineItemContext is an interface to support dynamic dispatch.
type ITemplateDefineItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateDefineItemContext differentiates from other interfaces.
	IsTemplateDefineItemContext()
}

type TemplateDefineItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateDefineItemContext() *TemplateDefineItemContext {
	var p = new(TemplateDefineItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_templateDefineItem
	return p
}

func (*TemplateDefineItemContext) IsTemplateDefineItemContext() {}

func NewTemplateDefineItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateDefineItemContext {
	var p = new(TemplateDefineItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_templateDefineItem

	return p
}

func (s *TemplateDefineItemContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateDefineItemContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *TemplateDefineItemContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *TemplateDefineItemContext) Colon() antlr.TerminalNode {
	return s.GetToken(LiteParserColon, 0)
}

func (s *TemplateDefineItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateDefineItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateDefineItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTemplateDefineItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TemplateDefineItem() (localctx ITemplateDefineItemContext) {
	localctx = NewTemplateDefineItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, LiteParserRULE_templateDefineItem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1514)
		p.Id()
	}
	p.SetState(1517)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserColon {
		{
			p.SetState(1515)
			p.Match(LiteParserColon)
		}
		{
			p.SetState(1516)
			p.Id()
		}

	}

	return localctx
}

// ITemplateCallContext is an interface to support dynamic dispatch.
type ITemplateCallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateCallContext differentiates from other interfaces.
	IsTemplateCallContext()
}

type TemplateCallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateCallContext() *TemplateCallContext {
	var p = new(TemplateCallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_templateCall
	return p
}

func (*TemplateCallContext) IsTemplateCallContext() {}

func NewTemplateCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateCallContext {
	var p = new(TemplateCallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_templateCall

	return p
}

func (s *TemplateCallContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateCallContext) Less() antlr.TerminalNode {
	return s.GetToken(LiteParserLess, 0)
}

func (s *TemplateCallContext) AllTypeType() []ITypeTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem())
	var tst = make([]ITypeTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeTypeContext)
		}
	}

	return tst
}

func (s *TemplateCallContext) TypeType(i int) ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TemplateCallContext) Greater() antlr.TerminalNode {
	return s.GetToken(LiteParserGreater, 0)
}

func (s *TemplateCallContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *TemplateCallContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *TemplateCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateCallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTemplateCall(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TemplateCall() (localctx ITemplateCallContext) {
	localctx = NewTemplateCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 198, LiteParserRULE_templateCall)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1519)
		p.Match(LiteParserLess)
	}
	{
		p.SetState(1520)
		p.TypeType()
	}
	p.SetState(1526)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserComma {
		{
			p.SetState(1521)
			p.More()
		}
		{
			p.SetState(1522)
			p.TypeType()
		}

		p.SetState(1528)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1529)
		p.Match(LiteParserGreater)
	}

	return localctx
}

// ILambdaContext is an interface to support dynamic dispatch.
type ILambdaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// IsLambdaContext differentiates from other interfaces.
	IsLambdaContext()
}

type LambdaContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
}

func NewEmptyLambdaContext() *LambdaContext {
	var p = new(LambdaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_lambda
	return p
}

func (*LambdaContext) IsLambdaContext() {}

func NewLambdaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LambdaContext {
	var p = new(LambdaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_lambda

	return p
}

func (s *LambdaContext) GetParser() antlr.Parser { return s.parser }

func (s *LambdaContext) GetT() antlr.Token { return s.t }

func (s *LambdaContext) SetT(v antlr.Token) { s.t = v }

func (s *LambdaContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *LambdaContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *LambdaContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *LambdaContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *LambdaContext) Right_Flow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Flow, 0)
}

func (s *LambdaContext) LambdaIn() ILambdaInContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILambdaInContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILambdaInContext)
}

func (s *LambdaContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *LambdaContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *LambdaContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *LambdaContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *LambdaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LambdaContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitLambda(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Lambda() (localctx ILambdaContext) {
	localctx = NewLambdaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 200, LiteParserRULE_lambda)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(1564)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 156, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1531)
			p.Left_brace()
		}
		p.SetState(1533)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<LiteParserLinqFrom)|(1<<LiteParserLinqBy)|(1<<LiteParserLinqSelect)|(1<<LiteParserLinqWhere)|(1<<LiteParserLinqGroup)|(1<<LiteParserLinqInto)|(1<<LiteParserLinqOrderby)|(1<<LiteParserLinqJoin)|(1<<LiteParserLinqLet)|(1<<LiteParserLinqIn)|(1<<LiteParserLinqOn)|(1<<LiteParserLinqEquals)|(1<<LiteParserLinqAscending)|(1<<LiteParserLinqDescending))) != 0) || (((_la-61)&-(0x1f+1)) == 0 && ((1<<uint((_la-61)))&((1<<(LiteParserTypeI8-61))|(1<<(LiteParserTypeU8-61))|(1<<(LiteParserTypeI16-61))|(1<<(LiteParserTypeU16-61))|(1<<(LiteParserTypeI32-61))|(1<<(LiteParserTypeU32-61))|(1<<(LiteParserTypeI64-61))|(1<<(LiteParserTypeU64-61))|(1<<(LiteParserTypeF32-61))|(1<<(LiteParserTypeF64-61))|(1<<(LiteParserTypeChr-61))|(1<<(LiteParserTypeStr-61))|(1<<(LiteParserTypeBool-61))|(1<<(LiteParserTypeInt-61))|(1<<(LiteParserTypeNum-61))|(1<<(LiteParserTypeByte-61))|(1<<(LiteParserTypeAny-61))|(1<<(LiteParserIDPrivate-61))|(1<<(LiteParserIDPublic-61)))) != 0) {
			{
				p.SetState(1532)
				p.LambdaIn()
			}

		}
		{
			p.SetState(1535)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*LambdaContext).t = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == LiteParserRight_Arrow || _la == LiteParserRight_Flow) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*LambdaContext).t = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(1539)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == LiteParserNew_Line {
			{
				p.SetState(1536)
				p.Match(LiteParserNew_Line)
			}

			p.SetState(1541)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1542)
			p.ExpressionList()
		}
		{
			p.SetState(1543)
			p.Right_brace()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1545)
			p.Left_brace()
		}
		p.SetState(1547)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<LiteParserLinqFrom)|(1<<LiteParserLinqBy)|(1<<LiteParserLinqSelect)|(1<<LiteParserLinqWhere)|(1<<LiteParserLinqGroup)|(1<<LiteParserLinqInto)|(1<<LiteParserLinqOrderby)|(1<<LiteParserLinqJoin)|(1<<LiteParserLinqLet)|(1<<LiteParserLinqIn)|(1<<LiteParserLinqOn)|(1<<LiteParserLinqEquals)|(1<<LiteParserLinqAscending)|(1<<LiteParserLinqDescending))) != 0) || (((_la-61)&-(0x1f+1)) == 0 && ((1<<uint((_la-61)))&((1<<(LiteParserTypeI8-61))|(1<<(LiteParserTypeU8-61))|(1<<(LiteParserTypeI16-61))|(1<<(LiteParserTypeU16-61))|(1<<(LiteParserTypeI32-61))|(1<<(LiteParserTypeU32-61))|(1<<(LiteParserTypeI64-61))|(1<<(LiteParserTypeU64-61))|(1<<(LiteParserTypeF32-61))|(1<<(LiteParserTypeF64-61))|(1<<(LiteParserTypeChr-61))|(1<<(LiteParserTypeStr-61))|(1<<(LiteParserTypeBool-61))|(1<<(LiteParserTypeInt-61))|(1<<(LiteParserTypeNum-61))|(1<<(LiteParserTypeByte-61))|(1<<(LiteParserTypeAny-61))|(1<<(LiteParserIDPrivate-61))|(1<<(LiteParserIDPublic-61)))) != 0) {
			{
				p.SetState(1546)
				p.LambdaIn()
			}

		}
		{
			p.SetState(1549)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*LambdaContext).t = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == LiteParserRight_Arrow || _la == LiteParserRight_Flow) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*LambdaContext).t = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(1553)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 154, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1550)
					p.Match(LiteParserNew_Line)
				}

			}
			p.SetState(1555)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 154, p.GetParserRuleContext())
		}
		p.SetState(1559)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 155, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1556)
					p.FunctionSupportStatement()
				}

			}
			p.SetState(1561)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 155, p.GetParserRuleContext())
		}
		{
			p.SetState(1562)
			p.Right_brace()
		}

	}

	return localctx
}

// ILambdaInContext is an interface to support dynamic dispatch.
type ILambdaInContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLambdaInContext differentiates from other interfaces.
	IsLambdaInContext()
}

type LambdaInContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLambdaInContext() *LambdaInContext {
	var p = new(LambdaInContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_lambdaIn
	return p
}

func (*LambdaInContext) IsLambdaInContext() {}

func NewLambdaInContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LambdaInContext {
	var p = new(LambdaInContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_lambdaIn

	return p
}

func (s *LambdaInContext) GetParser() antlr.Parser { return s.parser }

func (s *LambdaInContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *LambdaInContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *LambdaInContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *LambdaInContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *LambdaInContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdaInContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LambdaInContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitLambdaIn(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) LambdaIn() (localctx ILambdaInContext) {
	localctx = NewLambdaInContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 202, LiteParserRULE_lambdaIn)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1566)
		p.Id()
	}
	p.SetState(1572)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserComma {
		{
			p.SetState(1567)
			p.More()
		}
		{
			p.SetState(1568)
			p.Id()
		}

		p.SetState(1574)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IPkgAnonymousContext is an interface to support dynamic dispatch.
type IPkgAnonymousContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPkgAnonymousContext differentiates from other interfaces.
	IsPkgAnonymousContext()
}

type PkgAnonymousContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPkgAnonymousContext() *PkgAnonymousContext {
	var p = new(PkgAnonymousContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_pkgAnonymous
	return p
}

func (*PkgAnonymousContext) IsPkgAnonymousContext() {}

func NewPkgAnonymousContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PkgAnonymousContext {
	var p = new(PkgAnonymousContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_pkgAnonymous

	return p
}

func (s *PkgAnonymousContext) GetParser() antlr.Parser { return s.parser }

func (s *PkgAnonymousContext) PkgAnonymousAssign() IPkgAnonymousAssignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPkgAnonymousAssignContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPkgAnonymousAssignContext)
}

func (s *PkgAnonymousContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PkgAnonymousContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PkgAnonymousContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitPkgAnonymous(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) PkgAnonymous() (localctx IPkgAnonymousContext) {
	localctx = NewPkgAnonymousContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 204, LiteParserRULE_pkgAnonymous)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1575)
		p.PkgAnonymousAssign()
	}

	return localctx
}

// IPkgAnonymousAssignContext is an interface to support dynamic dispatch.
type IPkgAnonymousAssignContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPkgAnonymousAssignContext differentiates from other interfaces.
	IsPkgAnonymousAssignContext()
}

type PkgAnonymousAssignContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPkgAnonymousAssignContext() *PkgAnonymousAssignContext {
	var p = new(PkgAnonymousAssignContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_pkgAnonymousAssign
	return p
}

func (*PkgAnonymousAssignContext) IsPkgAnonymousAssignContext() {}

func NewPkgAnonymousAssignContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PkgAnonymousAssignContext {
	var p = new(PkgAnonymousAssignContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_pkgAnonymousAssign

	return p
}

func (s *PkgAnonymousAssignContext) GetParser() antlr.Parser { return s.parser }

func (s *PkgAnonymousAssignContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *PkgAnonymousAssignContext) AllPkgAnonymousAssignElement() []IPkgAnonymousAssignElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPkgAnonymousAssignElementContext)(nil)).Elem())
	var tst = make([]IPkgAnonymousAssignElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPkgAnonymousAssignElementContext)
		}
	}

	return tst
}

func (s *PkgAnonymousAssignContext) PkgAnonymousAssignElement(i int) IPkgAnonymousAssignElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPkgAnonymousAssignElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPkgAnonymousAssignElementContext)
}

func (s *PkgAnonymousAssignContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *PkgAnonymousAssignContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *PkgAnonymousAssignContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *PkgAnonymousAssignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PkgAnonymousAssignContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PkgAnonymousAssignContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitPkgAnonymousAssign(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) PkgAnonymousAssign() (localctx IPkgAnonymousAssignContext) {
	localctx = NewPkgAnonymousAssignContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 206, LiteParserRULE_pkgAnonymousAssign)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1577)
		p.Left_brace()
	}
	{
		p.SetState(1578)
		p.PkgAnonymousAssignElement()
	}
	p.SetState(1584)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserComma {
		{
			p.SetState(1579)
			p.More()
		}
		{
			p.SetState(1580)
			p.PkgAnonymousAssignElement()
		}

		p.SetState(1586)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1587)
		p.Right_brace()
	}

	return localctx
}

// IPkgAnonymousAssignElementContext is an interface to support dynamic dispatch.
type IPkgAnonymousAssignElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPkgAnonymousAssignElementContext differentiates from other interfaces.
	IsPkgAnonymousAssignElementContext()
}

type PkgAnonymousAssignElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPkgAnonymousAssignElementContext() *PkgAnonymousAssignElementContext {
	var p = new(PkgAnonymousAssignElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_pkgAnonymousAssignElement
	return p
}

func (*PkgAnonymousAssignElementContext) IsPkgAnonymousAssignElementContext() {}

func NewPkgAnonymousAssignElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PkgAnonymousAssignElementContext {
	var p = new(PkgAnonymousAssignElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_pkgAnonymousAssignElement

	return p
}

func (s *PkgAnonymousAssignElementContext) GetParser() antlr.Parser { return s.parser }

func (s *PkgAnonymousAssignElementContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *PkgAnonymousAssignElementContext) Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserEqual, 0)
}

func (s *PkgAnonymousAssignElementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PkgAnonymousAssignElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PkgAnonymousAssignElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PkgAnonymousAssignElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitPkgAnonymousAssignElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) PkgAnonymousAssignElement() (localctx IPkgAnonymousAssignElementContext) {
	localctx = NewPkgAnonymousAssignElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 208, LiteParserRULE_pkgAnonymousAssignElement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1589)
		p.Name()
	}
	{
		p.SetState(1590)
		p.Match(LiteParserEqual)
	}
	{
		p.SetState(1591)
		p.expression(0)
	}

	return localctx
}

// IFunctionExpressionContext is an interface to support dynamic dispatch.
type IFunctionExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// IsFunctionExpressionContext differentiates from other interfaces.
	IsFunctionExpressionContext()
}

type FunctionExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
}

func NewEmptyFunctionExpressionContext() *FunctionExpressionContext {
	var p = new(FunctionExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_functionExpression
	return p
}

func (*FunctionExpressionContext) IsFunctionExpressionContext() {}

func NewFunctionExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionExpressionContext {
	var p = new(FunctionExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_functionExpression

	return p
}

func (s *FunctionExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionExpressionContext) GetT() antlr.Token { return s.t }

func (s *FunctionExpressionContext) SetT(v antlr.Token) { s.t = v }

func (s *FunctionExpressionContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *FunctionExpressionContext) ParameterClauseIn() IParameterClauseInContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseInContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseInContext)
}

func (s *FunctionExpressionContext) ParameterClauseOut() IParameterClauseOutContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseOutContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseOutContext)
}

func (s *FunctionExpressionContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *FunctionExpressionContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *FunctionExpressionContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *FunctionExpressionContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *FunctionExpressionContext) Right_Flow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Flow, 0)
}

func (s *FunctionExpressionContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *FunctionExpressionContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *FunctionExpressionContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *FunctionExpressionContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *FunctionExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitFunctionExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) FunctionExpression() (localctx IFunctionExpressionContext) {
	localctx = NewFunctionExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 210, LiteParserRULE_functionExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1593)
		p.Left_paren()
	}
	{
		p.SetState(1594)
		p.ParameterClauseIn()
	}
	{
		p.SetState(1595)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*FunctionExpressionContext).t = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == LiteParserRight_Arrow || _la == LiteParserRight_Flow) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*FunctionExpressionContext).t = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1599)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserNew_Line {
		{
			p.SetState(1596)
			p.Match(LiteParserNew_Line)
		}

		p.SetState(1601)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1602)
		p.ParameterClauseOut()
	}
	{
		p.SetState(1603)
		p.Right_paren()
	}
	{
		p.SetState(1604)
		p.Left_brace()
	}
	p.SetState(1608)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 160, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1605)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(1610)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 160, p.GetParserRuleContext())
	}
	{
		p.SetState(1611)
		p.Right_brace()
	}

	return localctx
}

// ITupleExpressionContext is an interface to support dynamic dispatch.
type ITupleExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTupleExpressionContext differentiates from other interfaces.
	IsTupleExpressionContext()
}

type TupleExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTupleExpressionContext() *TupleExpressionContext {
	var p = new(TupleExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_tupleExpression
	return p
}

func (*TupleExpressionContext) IsTupleExpressionContext() {}

func NewTupleExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TupleExpressionContext {
	var p = new(TupleExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_tupleExpression

	return p
}

func (s *TupleExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *TupleExpressionContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *TupleExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *TupleExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TupleExpressionContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *TupleExpressionContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *TupleExpressionContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *TupleExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TupleExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTupleExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TupleExpression() (localctx ITupleExpressionContext) {
	localctx = NewTupleExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 212, LiteParserRULE_tupleExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1613)
		p.Left_paren()
	}
	{
		p.SetState(1614)
		p.expression(0)
	}
	p.SetState(1620)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserComma {
		{
			p.SetState(1615)
			p.More()
		}
		{
			p.SetState(1616)
			p.expression(0)
		}

		p.SetState(1622)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1623)
		p.Right_paren()
	}

	return localctx
}

// IPlusMinusContext is an interface to support dynamic dispatch.
type IPlusMinusContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPlusMinusContext differentiates from other interfaces.
	IsPlusMinusContext()
}

type PlusMinusContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPlusMinusContext() *PlusMinusContext {
	var p = new(PlusMinusContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_plusMinus
	return p
}

func (*PlusMinusContext) IsPlusMinusContext() {}

func NewPlusMinusContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PlusMinusContext {
	var p = new(PlusMinusContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_plusMinus

	return p
}

func (s *PlusMinusContext) GetParser() antlr.Parser { return s.parser }

func (s *PlusMinusContext) Add() IAddContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAddContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAddContext)
}

func (s *PlusMinusContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PlusMinusContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PlusMinusContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PlusMinusContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitPlusMinus(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) PlusMinus() (localctx IPlusMinusContext) {
	localctx = NewPlusMinusContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 214, LiteParserRULE_plusMinus)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1625)
		p.Add()
	}
	{
		p.SetState(1626)
		p.expression(0)
	}

	return localctx
}

// INegateContext is an interface to support dynamic dispatch.
type INegateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNegateContext differentiates from other interfaces.
	IsNegateContext()
}

type NegateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNegateContext() *NegateContext {
	var p = new(NegateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_negate
	return p
}

func (*NegateContext) IsNegateContext() {}

func NewNegateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NegateContext {
	var p = new(NegateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_negate

	return p
}

func (s *NegateContext) GetParser() antlr.Parser { return s.parser }

func (s *NegateContext) Wave() IWaveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWaveContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWaveContext)
}

func (s *NegateContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NegateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NegateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NegateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitNegate(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Negate() (localctx INegateContext) {
	localctx = NewNegateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 216, LiteParserRULE_negate)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1628)
		p.Wave()
	}
	{
		p.SetState(1629)
		p.expression(0)
	}

	return localctx
}

// ILinqContext is an interface to support dynamic dispatch.
type ILinqContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetK returns the k token.
	GetK() antlr.Token

	// SetK sets the k token.
	SetK(antlr.Token)

	// IsLinqContext differentiates from other interfaces.
	IsLinqContext()
}

type LinqContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	k      antlr.Token
}

func NewEmptyLinqContext() *LinqContext {
	var p = new(LinqContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_linq
	return p
}

func (*LinqContext) IsLinqContext() {}

func NewLinqContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LinqContext {
	var p = new(LinqContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_linq

	return p
}

func (s *LinqContext) GetParser() antlr.Parser { return s.parser }

func (s *LinqContext) GetK() antlr.Token { return s.k }

func (s *LinqContext) SetK(v antlr.Token) { s.k = v }

func (s *LinqContext) LinqHeadKeyword() ILinqHeadKeywordContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILinqHeadKeywordContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILinqHeadKeywordContext)
}

func (s *LinqContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *LinqContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LinqContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *LinqContext) LinqSelect() antlr.TerminalNode {
	return s.GetToken(LiteParserLinqSelect, 0)
}

func (s *LinqContext) LinqBy() antlr.TerminalNode {
	return s.GetToken(LiteParserLinqBy, 0)
}

func (s *LinqContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *LinqContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *LinqContext) AllLinqItem() []ILinqItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILinqItemContext)(nil)).Elem())
	var tst = make([]ILinqItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILinqItemContext)
		}
	}

	return tst
}

func (s *LinqContext) LinqItem(i int) ILinqItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILinqItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILinqItemContext)
}

func (s *LinqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LinqContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LinqContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitLinq(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Linq() (localctx ILinqContext) {
	localctx = NewLinqContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 218, LiteParserRULE_linq)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1631)
		p.LinqHeadKeyword()
	}
	p.SetState(1633)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserNew_Line {
		{
			p.SetState(1632)
			p.Match(LiteParserNew_Line)
		}

	}
	{
		p.SetState(1635)
		p.expression(0)
	}
	{
		p.SetState(1636)
		p.Match(LiteParserRight_Arrow)
	}
	p.SetState(1638)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserNew_Line {
		{
			p.SetState(1637)
			p.Match(LiteParserNew_Line)
		}

	}
	p.SetState(1641)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(1640)
				p.LinqItem()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1643)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 164, p.GetParserRuleContext())
	}
	{
		p.SetState(1645)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*LinqContext).k = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == LiteParserLinqBy || _la == LiteParserLinqSelect) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*LinqContext).k = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1647)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserNew_Line {
		{
			p.SetState(1646)
			p.Match(LiteParserNew_Line)
		}

	}
	{
		p.SetState(1649)
		p.expression(0)
	}

	return localctx
}

// ILinqItemContext is an interface to support dynamic dispatch.
type ILinqItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLinqItemContext differentiates from other interfaces.
	IsLinqItemContext()
}

type LinqItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLinqItemContext() *LinqItemContext {
	var p = new(LinqItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_linqItem
	return p
}

func (*LinqItemContext) IsLinqItemContext() {}

func NewLinqItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LinqItemContext {
	var p = new(LinqItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_linqItem

	return p
}

func (s *LinqItemContext) GetParser() antlr.Parser { return s.parser }

func (s *LinqItemContext) LinqKeyword() ILinqKeywordContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILinqKeywordContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILinqKeywordContext)
}

func (s *LinqItemContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *LinqItemContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LinqItemContext) New_Line() antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, 0)
}

func (s *LinqItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LinqItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LinqItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitLinqItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) LinqItem() (localctx ILinqItemContext) {
	localctx = NewLinqItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 220, LiteParserRULE_linqItem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1651)
		p.LinqKeyword()
	}
	p.SetState(1653)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<LiteParserLinqFrom)|(1<<LiteParserLinqBy)|(1<<LiteParserLinqSelect)|(1<<LiteParserLinqWhere)|(1<<LiteParserLinqGroup)|(1<<LiteParserLinqInto)|(1<<LiteParserLinqOrderby)|(1<<LiteParserLinqJoin)|(1<<LiteParserLinqLet)|(1<<LiteParserLinqIn)|(1<<LiteParserLinqOn)|(1<<LiteParserLinqEquals)|(1<<LiteParserLinqAscending)|(1<<LiteParserLinqDescending))) != 0) || (((_la-36)&-(0x1f+1)) == 0 && ((1<<uint((_la-36)))&((1<<(LiteParserLeft_Flow-36))|(1<<(LiteParserLess-36))|(1<<(LiteParserLeft_Paren-36))|(1<<(LiteParserLeft_Brace-36))|(1<<(LiteParserLeft_Brack-36))|(1<<(LiteParserQuestion-36))|(1<<(LiteParserBang-36))|(1<<(LiteParserWave-36))|(1<<(LiteParserAdd-36))|(1<<(LiteParserSub-36))|(1<<(LiteParserTypeI8-36))|(1<<(LiteParserTypeU8-36))|(1<<(LiteParserTypeI16-36))|(1<<(LiteParserTypeU16-36))|(1<<(LiteParserTypeI32-36))|(1<<(LiteParserTypeU32-36))|(1<<(LiteParserTypeI64-36)))) != 0) || (((_la-68)&-(0x1f+1)) == 0 && ((1<<uint((_la-68)))&((1<<(LiteParserTypeU64-68))|(1<<(LiteParserTypeF32-68))|(1<<(LiteParserTypeF64-68))|(1<<(LiteParserTypeChr-68))|(1<<(LiteParserTypeStr-68))|(1<<(LiteParserTypeBool-68))|(1<<(LiteParserTypeInt-68))|(1<<(LiteParserTypeNum-68))|(1<<(LiteParserTypeByte-68))|(1<<(LiteParserTypeAny-68))|(1<<(LiteParserNilLiteral-68))|(1<<(LiteParserTrueLiteral-68))|(1<<(LiteParserFalseLiteral-68))|(1<<(LiteParserUndefinedLiteral-68))|(1<<(LiteParserNumberLiteral-68))|(1<<(LiteParserTextLiteral-68))|(1<<(LiteParserCharLiteral-68))|(1<<(LiteParserIDPrivate-68))|(1<<(LiteParserIDPublic-68))|(1<<(LiteParserDiscard-68)))) != 0) {
		{
			p.SetState(1652)
			p.expression(0)
		}

	}
	{
		p.SetState(1655)
		p.Match(LiteParserRight_Arrow)
	}
	p.SetState(1657)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserNew_Line {
		{
			p.SetState(1656)
			p.Match(LiteParserNew_Line)
		}

	}

	return localctx
}

// ILinqKeywordContext is an interface to support dynamic dispatch.
type ILinqKeywordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLinqKeywordContext differentiates from other interfaces.
	IsLinqKeywordContext()
}

type LinqKeywordContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLinqKeywordContext() *LinqKeywordContext {
	var p = new(LinqKeywordContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_linqKeyword
	return p
}

func (*LinqKeywordContext) IsLinqKeywordContext() {}

func NewLinqKeywordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LinqKeywordContext {
	var p = new(LinqKeywordContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_linqKeyword

	return p
}

func (s *LinqKeywordContext) GetParser() antlr.Parser { return s.parser }

func (s *LinqKeywordContext) LinqHeadKeyword() ILinqHeadKeywordContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILinqHeadKeywordContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILinqHeadKeywordContext)
}

func (s *LinqKeywordContext) LinqBodyKeyword() ILinqBodyKeywordContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILinqBodyKeywordContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILinqBodyKeywordContext)
}

func (s *LinqKeywordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LinqKeywordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LinqKeywordContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitLinqKeyword(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) LinqKeyword() (localctx ILinqKeywordContext) {
	localctx = NewLinqKeywordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 222, LiteParserRULE_linqKeyword)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1661)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case LiteParserLinqFrom:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1659)
			p.LinqHeadKeyword()
		}

	case LiteParserLinqBy, LiteParserLinqSelect, LiteParserLinqWhere, LiteParserLinqGroup, LiteParserLinqInto, LiteParserLinqOrderby, LiteParserLinqJoin, LiteParserLinqLet, LiteParserLinqIn, LiteParserLinqOn, LiteParserLinqEquals, LiteParserLinqAscending, LiteParserLinqDescending:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1660)
			p.LinqBodyKeyword()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ILinqHeadKeywordContext is an interface to support dynamic dispatch.
type ILinqHeadKeywordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetK returns the k token.
	GetK() antlr.Token

	// SetK sets the k token.
	SetK(antlr.Token)

	// IsLinqHeadKeywordContext differentiates from other interfaces.
	IsLinqHeadKeywordContext()
}

type LinqHeadKeywordContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	k      antlr.Token
}

func NewEmptyLinqHeadKeywordContext() *LinqHeadKeywordContext {
	var p = new(LinqHeadKeywordContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_linqHeadKeyword
	return p
}

func (*LinqHeadKeywordContext) IsLinqHeadKeywordContext() {}

func NewLinqHeadKeywordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LinqHeadKeywordContext {
	var p = new(LinqHeadKeywordContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_linqHeadKeyword

	return p
}

func (s *LinqHeadKeywordContext) GetParser() antlr.Parser { return s.parser }

func (s *LinqHeadKeywordContext) GetK() antlr.Token { return s.k }

func (s *LinqHeadKeywordContext) SetK(v antlr.Token) { s.k = v }

func (s *LinqHeadKeywordContext) LinqFrom() antlr.TerminalNode {
	return s.GetToken(LiteParserLinqFrom, 0)
}

func (s *LinqHeadKeywordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LinqHeadKeywordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LinqHeadKeywordContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitLinqHeadKeyword(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) LinqHeadKeyword() (localctx ILinqHeadKeywordContext) {
	localctx = NewLinqHeadKeywordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 224, LiteParserRULE_linqHeadKeyword)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1663)

		var _m = p.Match(LiteParserLinqFrom)

		localctx.(*LinqHeadKeywordContext).k = _m
	}

	return localctx
}

// ILinqBodyKeywordContext is an interface to support dynamic dispatch.
type ILinqBodyKeywordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetK returns the k token.
	GetK() antlr.Token

	// SetK sets the k token.
	SetK(antlr.Token)

	// IsLinqBodyKeywordContext differentiates from other interfaces.
	IsLinqBodyKeywordContext()
}

type LinqBodyKeywordContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	k      antlr.Token
}

func NewEmptyLinqBodyKeywordContext() *LinqBodyKeywordContext {
	var p = new(LinqBodyKeywordContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_linqBodyKeyword
	return p
}

func (*LinqBodyKeywordContext) IsLinqBodyKeywordContext() {}

func NewLinqBodyKeywordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LinqBodyKeywordContext {
	var p = new(LinqBodyKeywordContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_linqBodyKeyword

	return p
}

func (s *LinqBodyKeywordContext) GetParser() antlr.Parser { return s.parser }

func (s *LinqBodyKeywordContext) GetK() antlr.Token { return s.k }

func (s *LinqBodyKeywordContext) SetK(v antlr.Token) { s.k = v }

func (s *LinqBodyKeywordContext) LinqSelect() antlr.TerminalNode {
	return s.GetToken(LiteParserLinqSelect, 0)
}

func (s *LinqBodyKeywordContext) LinqBy() antlr.TerminalNode {
	return s.GetToken(LiteParserLinqBy, 0)
}

func (s *LinqBodyKeywordContext) LinqWhere() antlr.TerminalNode {
	return s.GetToken(LiteParserLinqWhere, 0)
}

func (s *LinqBodyKeywordContext) LinqGroup() antlr.TerminalNode {
	return s.GetToken(LiteParserLinqGroup, 0)
}

func (s *LinqBodyKeywordContext) LinqInto() antlr.TerminalNode {
	return s.GetToken(LiteParserLinqInto, 0)
}

func (s *LinqBodyKeywordContext) LinqOrderby() antlr.TerminalNode {
	return s.GetToken(LiteParserLinqOrderby, 0)
}

func (s *LinqBodyKeywordContext) LinqJoin() antlr.TerminalNode {
	return s.GetToken(LiteParserLinqJoin, 0)
}

func (s *LinqBodyKeywordContext) LinqLet() antlr.TerminalNode {
	return s.GetToken(LiteParserLinqLet, 0)
}

func (s *LinqBodyKeywordContext) LinqIn() antlr.TerminalNode {
	return s.GetToken(LiteParserLinqIn, 0)
}

func (s *LinqBodyKeywordContext) LinqOn() antlr.TerminalNode {
	return s.GetToken(LiteParserLinqOn, 0)
}

func (s *LinqBodyKeywordContext) LinqEquals() antlr.TerminalNode {
	return s.GetToken(LiteParserLinqEquals, 0)
}

func (s *LinqBodyKeywordContext) LinqAscending() antlr.TerminalNode {
	return s.GetToken(LiteParserLinqAscending, 0)
}

func (s *LinqBodyKeywordContext) LinqDescending() antlr.TerminalNode {
	return s.GetToken(LiteParserLinqDescending, 0)
}

func (s *LinqBodyKeywordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LinqBodyKeywordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LinqBodyKeywordContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitLinqBodyKeyword(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) LinqBodyKeyword() (localctx ILinqBodyKeywordContext) {
	localctx = NewLinqBodyKeywordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 226, LiteParserRULE_linqBodyKeyword)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1665)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*LinqBodyKeywordContext).k = _lt

		_la = p.GetTokenStream().LA(1)

		if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<LiteParserLinqBy)|(1<<LiteParserLinqSelect)|(1<<LiteParserLinqWhere)|(1<<LiteParserLinqGroup)|(1<<LiteParserLinqInto)|(1<<LiteParserLinqOrderby)|(1<<LiteParserLinqJoin)|(1<<LiteParserLinqLet)|(1<<LiteParserLinqIn)|(1<<LiteParserLinqOn)|(1<<LiteParserLinqEquals)|(1<<LiteParserLinqAscending)|(1<<LiteParserLinqDescending))) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*LinqBodyKeywordContext).k = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IStringExpressionContext is an interface to support dynamic dispatch.
type IStringExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStringExpressionContext differentiates from other interfaces.
	IsStringExpressionContext()
}

type StringExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStringExpressionContext() *StringExpressionContext {
	var p = new(StringExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_stringExpression
	return p
}

func (*StringExpressionContext) IsStringExpressionContext() {}

func NewStringExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StringExpressionContext {
	var p = new(StringExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_stringExpression

	return p
}

func (s *StringExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *StringExpressionContext) TextLiteral() antlr.TerminalNode {
	return s.GetToken(LiteParserTextLiteral, 0)
}

func (s *StringExpressionContext) AllStringExpressionElement() []IStringExpressionElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStringExpressionElementContext)(nil)).Elem())
	var tst = make([]IStringExpressionElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStringExpressionElementContext)
		}
	}

	return tst
}

func (s *StringExpressionContext) StringExpressionElement(i int) IStringExpressionElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringExpressionElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStringExpressionElementContext)
}

func (s *StringExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StringExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitStringExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) StringExpression() (localctx IStringExpressionContext) {
	localctx = NewStringExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 228, LiteParserRULE_stringExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1667)
		p.Match(LiteParserTextLiteral)
	}
	p.SetState(1669)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(1668)
				p.StringExpressionElement()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1671)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 169, p.GetParserRuleContext())
	}

	return localctx
}

// IStringExpressionElementContext is an interface to support dynamic dispatch.
type IStringExpressionElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStringExpressionElementContext differentiates from other interfaces.
	IsStringExpressionElementContext()
}

type StringExpressionElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStringExpressionElementContext() *StringExpressionElementContext {
	var p = new(StringExpressionElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_stringExpressionElement
	return p
}

func (*StringExpressionElementContext) IsStringExpressionElementContext() {}

func NewStringExpressionElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StringExpressionElementContext {
	var p = new(StringExpressionElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_stringExpressionElement

	return p
}

func (s *StringExpressionElementContext) GetParser() antlr.Parser { return s.parser }

func (s *StringExpressionElementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *StringExpressionElementContext) TextLiteral() antlr.TerminalNode {
	return s.GetToken(LiteParserTextLiteral, 0)
}

func (s *StringExpressionElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringExpressionElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StringExpressionElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitStringExpressionElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) StringExpressionElement() (localctx IStringExpressionElementContext) {
	localctx = NewStringExpressionElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 230, LiteParserRULE_stringExpressionElement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1673)
		p.expression(0)
	}
	{
		p.SetState(1674)
		p.Match(LiteParserTextLiteral)
	}

	return localctx
}

// IDataStatementContext is an interface to support dynamic dispatch.
type IDataStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// IsDataStatementContext differentiates from other interfaces.
	IsDataStatementContext()
}

type DataStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
}

func NewEmptyDataStatementContext() *DataStatementContext {
	var p = new(DataStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_dataStatement
	return p
}

func (*DataStatementContext) IsDataStatementContext() {}

func NewDataStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DataStatementContext {
	var p = new(DataStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_dataStatement

	return p
}

func (s *DataStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DataStatementContext) GetT() antlr.Token { return s.t }

func (s *DataStatementContext) SetT(v antlr.Token) { s.t = v }

func (s *DataStatementContext) FloatExpr() IFloatExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFloatExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFloatExprContext)
}

func (s *DataStatementContext) IntegerExpr() IIntegerExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntegerExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntegerExprContext)
}

func (s *DataStatementContext) TextLiteral() antlr.TerminalNode {
	return s.GetToken(LiteParserTextLiteral, 0)
}

func (s *DataStatementContext) CharLiteral() antlr.TerminalNode {
	return s.GetToken(LiteParserCharLiteral, 0)
}

func (s *DataStatementContext) TrueLiteral() antlr.TerminalNode {
	return s.GetToken(LiteParserTrueLiteral, 0)
}

func (s *DataStatementContext) FalseLiteral() antlr.TerminalNode {
	return s.GetToken(LiteParserFalseLiteral, 0)
}

func (s *DataStatementContext) NilExpr() INilExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INilExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INilExprContext)
}

func (s *DataStatementContext) UndefinedLiteral() antlr.TerminalNode {
	return s.GetToken(LiteParserUndefinedLiteral, 0)
}

func (s *DataStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DataStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DataStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitDataStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) DataStatement() (localctx IDataStatementContext) {
	localctx = NewDataStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 232, LiteParserRULE_dataStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1684)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 170, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1676)
			p.FloatExpr()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1677)
			p.IntegerExpr()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1678)

			var _m = p.Match(LiteParserTextLiteral)

			localctx.(*DataStatementContext).t = _m
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1679)

			var _m = p.Match(LiteParserCharLiteral)

			localctx.(*DataStatementContext).t = _m
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1680)

			var _m = p.Match(LiteParserTrueLiteral)

			localctx.(*DataStatementContext).t = _m
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1681)

			var _m = p.Match(LiteParserFalseLiteral)

			localctx.(*DataStatementContext).t = _m
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1682)
			p.NilExpr()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1683)

			var _m = p.Match(LiteParserUndefinedLiteral)

			localctx.(*DataStatementContext).t = _m
		}

	}

	return localctx
}

// IFloatExprContext is an interface to support dynamic dispatch.
type IFloatExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFloatExprContext differentiates from other interfaces.
	IsFloatExprContext()
}

type FloatExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFloatExprContext() *FloatExprContext {
	var p = new(FloatExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_floatExpr
	return p
}

func (*FloatExprContext) IsFloatExprContext() {}

func NewFloatExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FloatExprContext {
	var p = new(FloatExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_floatExpr

	return p
}

func (s *FloatExprContext) GetParser() antlr.Parser { return s.parser }

func (s *FloatExprContext) AllIntegerExpr() []IIntegerExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIntegerExprContext)(nil)).Elem())
	var tst = make([]IIntegerExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIntegerExprContext)
		}
	}

	return tst
}

func (s *FloatExprContext) IntegerExpr(i int) IIntegerExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntegerExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIntegerExprContext)
}

func (s *FloatExprContext) Call() ICallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallContext)
}

func (s *FloatExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FloatExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FloatExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitFloatExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) FloatExpr() (localctx IFloatExprContext) {
	localctx = NewFloatExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 234, LiteParserRULE_floatExpr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1686)
		p.IntegerExpr()
	}
	{
		p.SetState(1687)
		p.Call()
	}
	{
		p.SetState(1688)
		p.IntegerExpr()
	}

	return localctx
}

// IIntegerExprContext is an interface to support dynamic dispatch.
type IIntegerExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIntegerExprContext differentiates from other interfaces.
	IsIntegerExprContext()
}

type IntegerExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIntegerExprContext() *IntegerExprContext {
	var p = new(IntegerExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_integerExpr
	return p
}

func (*IntegerExprContext) IsIntegerExprContext() {}

func NewIntegerExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IntegerExprContext {
	var p = new(IntegerExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_integerExpr

	return p
}

func (s *IntegerExprContext) GetParser() antlr.Parser { return s.parser }

func (s *IntegerExprContext) NumberLiteral() antlr.TerminalNode {
	return s.GetToken(LiteParserNumberLiteral, 0)
}

func (s *IntegerExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntegerExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IntegerExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitIntegerExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) IntegerExpr() (localctx IIntegerExprContext) {
	localctx = NewIntegerExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 236, LiteParserRULE_integerExpr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1690)
		p.Match(LiteParserNumberLiteral)
	}

	return localctx
}

// ITypeNotNullContext is an interface to support dynamic dispatch.
type ITypeNotNullContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeNotNullContext differentiates from other interfaces.
	IsTypeNotNullContext()
}

type TypeNotNullContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeNotNullContext() *TypeNotNullContext {
	var p = new(TypeNotNullContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_typeNotNull
	return p
}

func (*TypeNotNullContext) IsTypeNotNullContext() {}

func NewTypeNotNullContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeNotNullContext {
	var p = new(TypeNotNullContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_typeNotNull

	return p
}

func (s *TypeNotNullContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeNotNullContext) TypeAny() ITypeAnyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAnyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAnyContext)
}

func (s *TypeNotNullContext) TypeTuple() ITypeTupleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTupleContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTupleContext)
}

func (s *TypeNotNullContext) TypeArray() ITypeArrayContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeArrayContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeArrayContext)
}

func (s *TypeNotNullContext) TypeList() ITypeListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeListContext)
}

func (s *TypeNotNullContext) TypeSet() ITypeSetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeSetContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeSetContext)
}

func (s *TypeNotNullContext) TypeDictionary() ITypeDictionaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeDictionaryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeDictionaryContext)
}

func (s *TypeNotNullContext) TypeChannel() ITypeChannelContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeChannelContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeChannelContext)
}

func (s *TypeNotNullContext) TypeBasic() ITypeBasicContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeBasicContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeBasicContext)
}

func (s *TypeNotNullContext) TypePackage() ITypePackageContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypePackageContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypePackageContext)
}

func (s *TypeNotNullContext) TypeFunction() ITypeFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeFunctionContext)
}

func (s *TypeNotNullContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeNotNullContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeNotNullContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTypeNotNull(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TypeNotNull() (localctx ITypeNotNullContext) {
	localctx = NewTypeNotNullContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 238, LiteParserRULE_typeNotNull)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1702)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 171, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1692)
			p.TypeAny()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1693)
			p.TypeTuple()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1694)
			p.TypeArray()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1695)
			p.TypeList()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1696)
			p.TypeSet()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1697)
			p.TypeDictionary()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1698)
			p.TypeChannel()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1699)
			p.TypeBasic()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1700)
			p.TypePackage()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1701)
			p.TypeFunction()
		}

	}

	return localctx
}

// ITypeReferenceContext is an interface to support dynamic dispatch.
type ITypeReferenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeReferenceContext differentiates from other interfaces.
	IsTypeReferenceContext()
}

type TypeReferenceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeReferenceContext() *TypeReferenceContext {
	var p = new(TypeReferenceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_typeReference
	return p
}

func (*TypeReferenceContext) IsTypeReferenceContext() {}

func NewTypeReferenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeReferenceContext {
	var p = new(TypeReferenceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_typeReference

	return p
}

func (s *TypeReferenceContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeReferenceContext) Bang() antlr.TerminalNode {
	return s.GetToken(LiteParserBang, 0)
}

func (s *TypeReferenceContext) TypeNotNull() ITypeNotNullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNotNullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNotNullContext)
}

func (s *TypeReferenceContext) TypeNullable() ITypeNullableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNullableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNullableContext)
}

func (s *TypeReferenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeReferenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeReferenceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTypeReference(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TypeReference() (localctx ITypeReferenceContext) {
	localctx = NewTypeReferenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 240, LiteParserRULE_typeReference)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1704)
		p.Match(LiteParserBang)
	}
	p.SetState(1707)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case LiteParserLinqFrom, LiteParserLinqBy, LiteParserLinqSelect, LiteParserLinqWhere, LiteParserLinqGroup, LiteParserLinqInto, LiteParserLinqOrderby, LiteParserLinqJoin, LiteParserLinqLet, LiteParserLinqIn, LiteParserLinqOn, LiteParserLinqEquals, LiteParserLinqAscending, LiteParserLinqDescending, LiteParserLeft_Paren, LiteParserLeft_Brack, LiteParserTypeI8, LiteParserTypeU8, LiteParserTypeI16, LiteParserTypeU16, LiteParserTypeI32, LiteParserTypeU32, LiteParserTypeI64, LiteParserTypeU64, LiteParserTypeF32, LiteParserTypeF64, LiteParserTypeChr, LiteParserTypeStr, LiteParserTypeBool, LiteParserTypeInt, LiteParserTypeNum, LiteParserTypeByte, LiteParserTypeAny, LiteParserIDPrivate, LiteParserIDPublic:
		{
			p.SetState(1705)
			p.TypeNotNull()
		}

	case LiteParserQuestion:
		{
			p.SetState(1706)
			p.TypeNullable()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITypeNullableContext is an interface to support dynamic dispatch.
type ITypeNullableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeNullableContext differentiates from other interfaces.
	IsTypeNullableContext()
}

type TypeNullableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeNullableContext() *TypeNullableContext {
	var p = new(TypeNullableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_typeNullable
	return p
}

func (*TypeNullableContext) IsTypeNullableContext() {}

func NewTypeNullableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeNullableContext {
	var p = new(TypeNullableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_typeNullable

	return p
}

func (s *TypeNullableContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeNullableContext) Question() antlr.TerminalNode {
	return s.GetToken(LiteParserQuestion, 0)
}

func (s *TypeNullableContext) TypeNotNull() ITypeNotNullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNotNullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNotNullContext)
}

func (s *TypeNullableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeNullableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeNullableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTypeNullable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TypeNullable() (localctx ITypeNullableContext) {
	localctx = NewTypeNullableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 242, LiteParserRULE_typeNullable)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1709)
		p.Match(LiteParserQuestion)
	}
	{
		p.SetState(1710)
		p.TypeNotNull()
	}

	return localctx
}

// ITypeTypeContext is an interface to support dynamic dispatch.
type ITypeTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeTypeContext differentiates from other interfaces.
	IsTypeTypeContext()
}

type TypeTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeTypeContext() *TypeTypeContext {
	var p = new(TypeTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_typeType
	return p
}

func (*TypeTypeContext) IsTypeTypeContext() {}

func NewTypeTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeTypeContext {
	var p = new(TypeTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_typeType

	return p
}

func (s *TypeTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeTypeContext) TypeNotNull() ITypeNotNullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNotNullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNotNullContext)
}

func (s *TypeTypeContext) TypeNullable() ITypeNullableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNullableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNullableContext)
}

func (s *TypeTypeContext) TypeReference() ITypeReferenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeReferenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeReferenceContext)
}

func (s *TypeTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTypeType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TypeType() (localctx ITypeTypeContext) {
	localctx = NewTypeTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 244, LiteParserRULE_typeType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1715)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case LiteParserLinqFrom, LiteParserLinqBy, LiteParserLinqSelect, LiteParserLinqWhere, LiteParserLinqGroup, LiteParserLinqInto, LiteParserLinqOrderby, LiteParserLinqJoin, LiteParserLinqLet, LiteParserLinqIn, LiteParserLinqOn, LiteParserLinqEquals, LiteParserLinqAscending, LiteParserLinqDescending, LiteParserLeft_Paren, LiteParserLeft_Brack, LiteParserTypeI8, LiteParserTypeU8, LiteParserTypeI16, LiteParserTypeU16, LiteParserTypeI32, LiteParserTypeU32, LiteParserTypeI64, LiteParserTypeU64, LiteParserTypeF32, LiteParserTypeF64, LiteParserTypeChr, LiteParserTypeStr, LiteParserTypeBool, LiteParserTypeInt, LiteParserTypeNum, LiteParserTypeByte, LiteParserTypeAny, LiteParserIDPrivate, LiteParserIDPublic:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1712)
			p.TypeNotNull()
		}

	case LiteParserQuestion:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1713)
			p.TypeNullable()
		}

	case LiteParserBang:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1714)
			p.TypeReference()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITypeTupleContext is an interface to support dynamic dispatch.
type ITypeTupleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeTupleContext differentiates from other interfaces.
	IsTypeTupleContext()
}

type TypeTupleContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeTupleContext() *TypeTupleContext {
	var p = new(TypeTupleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_typeTuple
	return p
}

func (*TypeTupleContext) IsTypeTupleContext() {}

func NewTypeTupleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeTupleContext {
	var p = new(TypeTupleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_typeTuple

	return p
}

func (s *TypeTupleContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeTupleContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *TypeTupleContext) AllTypeType() []ITypeTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem())
	var tst = make([]ITypeTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeTypeContext)
		}
	}

	return tst
}

func (s *TypeTupleContext) TypeType(i int) ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeTupleContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *TypeTupleContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *TypeTupleContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *TypeTupleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeTupleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeTupleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTypeTuple(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TypeTuple() (localctx ITypeTupleContext) {
	localctx = NewTypeTupleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 246, LiteParserRULE_typeTuple)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1717)
		p.Left_paren()
	}
	{
		p.SetState(1718)
		p.TypeType()
	}
	p.SetState(1722)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == LiteParserComma {
		{
			p.SetState(1719)
			p.More()
		}
		{
			p.SetState(1720)
			p.TypeType()
		}

		p.SetState(1724)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1726)
		p.Right_paren()
	}

	return localctx
}

// ITypeArrayContext is an interface to support dynamic dispatch.
type ITypeArrayContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeArrayContext differentiates from other interfaces.
	IsTypeArrayContext()
}

type TypeArrayContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeArrayContext() *TypeArrayContext {
	var p = new(TypeArrayContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_typeArray
	return p
}

func (*TypeArrayContext) IsTypeArrayContext() {}

func NewTypeArrayContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeArrayContext {
	var p = new(TypeArrayContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_typeArray

	return p
}

func (s *TypeArrayContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeArrayContext) Left_Brack() antlr.TerminalNode {
	return s.GetToken(LiteParserLeft_Brack, 0)
}

func (s *TypeArrayContext) Colon() antlr.TerminalNode {
	return s.GetToken(LiteParserColon, 0)
}

func (s *TypeArrayContext) Right_Brack() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Brack, 0)
}

func (s *TypeArrayContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeArrayContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeArrayContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeArrayContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTypeArray(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TypeArray() (localctx ITypeArrayContext) {
	localctx = NewTypeArrayContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 248, LiteParserRULE_typeArray)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1728)
		p.Match(LiteParserLeft_Brack)
	}
	{
		p.SetState(1729)
		p.Match(LiteParserColon)
	}
	{
		p.SetState(1730)
		p.Match(LiteParserRight_Brack)
	}
	{
		p.SetState(1731)
		p.TypeType()
	}

	return localctx
}

// ITypeListContext is an interface to support dynamic dispatch.
type ITypeListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeListContext differentiates from other interfaces.
	IsTypeListContext()
}

type TypeListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeListContext() *TypeListContext {
	var p = new(TypeListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_typeList
	return p
}

func (*TypeListContext) IsTypeListContext() {}

func NewTypeListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeListContext {
	var p = new(TypeListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_typeList

	return p
}

func (s *TypeListContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeListContext) Left_Brack() antlr.TerminalNode {
	return s.GetToken(LiteParserLeft_Brack, 0)
}

func (s *TypeListContext) Right_Brack() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Brack, 0)
}

func (s *TypeListContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTypeList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TypeList() (localctx ITypeListContext) {
	localctx = NewTypeListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 250, LiteParserRULE_typeList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1733)
		p.Match(LiteParserLeft_Brack)
	}
	{
		p.SetState(1734)
		p.Match(LiteParserRight_Brack)
	}
	{
		p.SetState(1735)
		p.TypeType()
	}

	return localctx
}

// ITypeSetContext is an interface to support dynamic dispatch.
type ITypeSetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeSetContext differentiates from other interfaces.
	IsTypeSetContext()
}

type TypeSetContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeSetContext() *TypeSetContext {
	var p = new(TypeSetContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_typeSet
	return p
}

func (*TypeSetContext) IsTypeSetContext() {}

func NewTypeSetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeSetContext {
	var p = new(TypeSetContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_typeSet

	return p
}

func (s *TypeSetContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeSetContext) Left_Brack() antlr.TerminalNode {
	return s.GetToken(LiteParserLeft_Brack, 0)
}

func (s *TypeSetContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeSetContext) Right_Brack() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Brack, 0)
}

func (s *TypeSetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeSetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeSetContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTypeSet(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TypeSet() (localctx ITypeSetContext) {
	localctx = NewTypeSetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 252, LiteParserRULE_typeSet)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1737)
		p.Match(LiteParserLeft_Brack)
	}
	{
		p.SetState(1738)
		p.TypeType()
	}
	{
		p.SetState(1739)
		p.Match(LiteParserRight_Brack)
	}

	return localctx
}

// ITypeDictionaryContext is an interface to support dynamic dispatch.
type ITypeDictionaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeDictionaryContext differentiates from other interfaces.
	IsTypeDictionaryContext()
}

type TypeDictionaryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeDictionaryContext() *TypeDictionaryContext {
	var p = new(TypeDictionaryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_typeDictionary
	return p
}

func (*TypeDictionaryContext) IsTypeDictionaryContext() {}

func NewTypeDictionaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeDictionaryContext {
	var p = new(TypeDictionaryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_typeDictionary

	return p
}

func (s *TypeDictionaryContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeDictionaryContext) Left_Brack() antlr.TerminalNode {
	return s.GetToken(LiteParserLeft_Brack, 0)
}

func (s *TypeDictionaryContext) AllTypeType() []ITypeTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem())
	var tst = make([]ITypeTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeTypeContext)
		}
	}

	return tst
}

func (s *TypeDictionaryContext) TypeType(i int) ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeDictionaryContext) Right_Brack() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Brack, 0)
}

func (s *TypeDictionaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeDictionaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeDictionaryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTypeDictionary(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TypeDictionary() (localctx ITypeDictionaryContext) {
	localctx = NewTypeDictionaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 254, LiteParserRULE_typeDictionary)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1741)
		p.Match(LiteParserLeft_Brack)
	}
	{
		p.SetState(1742)
		p.TypeType()
	}
	{
		p.SetState(1743)
		p.Match(LiteParserRight_Brack)
	}
	{
		p.SetState(1744)
		p.TypeType()
	}

	return localctx
}

// ITypeChannelContext is an interface to support dynamic dispatch.
type ITypeChannelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeChannelContext differentiates from other interfaces.
	IsTypeChannelContext()
}

type TypeChannelContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeChannelContext() *TypeChannelContext {
	var p = new(TypeChannelContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_typeChannel
	return p
}

func (*TypeChannelContext) IsTypeChannelContext() {}

func NewTypeChannelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeChannelContext {
	var p = new(TypeChannelContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_typeChannel

	return p
}

func (s *TypeChannelContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeChannelContext) Left_Brack() antlr.TerminalNode {
	return s.GetToken(LiteParserLeft_Brack, 0)
}

func (s *TypeChannelContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *TypeChannelContext) Right_Brack() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Brack, 0)
}

func (s *TypeChannelContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeChannelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeChannelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeChannelContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTypeChannel(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TypeChannel() (localctx ITypeChannelContext) {
	localctx = NewTypeChannelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 256, LiteParserRULE_typeChannel)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1746)
		p.Match(LiteParserLeft_Brack)
	}
	{
		p.SetState(1747)
		p.Match(LiteParserRight_Arrow)
	}
	{
		p.SetState(1748)
		p.Match(LiteParserRight_Brack)
	}
	{
		p.SetState(1749)
		p.TypeType()
	}

	return localctx
}

// ITypePackageContext is an interface to support dynamic dispatch.
type ITypePackageContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypePackageContext differentiates from other interfaces.
	IsTypePackageContext()
}

type TypePackageContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypePackageContext() *TypePackageContext {
	var p = new(TypePackageContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_typePackage
	return p
}

func (*TypePackageContext) IsTypePackageContext() {}

func NewTypePackageContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypePackageContext {
	var p = new(TypePackageContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_typePackage

	return p
}

func (s *TypePackageContext) GetParser() antlr.Parser { return s.parser }

func (s *TypePackageContext) NameSpaceItem() INameSpaceItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameSpaceItemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameSpaceItemContext)
}

func (s *TypePackageContext) TemplateCall() ITemplateCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateCallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateCallContext)
}

func (s *TypePackageContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypePackageContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypePackageContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTypePackage(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TypePackage() (localctx ITypePackageContext) {
	localctx = NewTypePackageContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 258, LiteParserRULE_typePackage)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1751)
		p.NameSpaceItem()
	}
	p.SetState(1753)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 175, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1752)
			p.TemplateCall()
		}

	}

	return localctx
}

// ITypeFunctionContext is an interface to support dynamic dispatch.
type ITypeFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// IsTypeFunctionContext differentiates from other interfaces.
	IsTypeFunctionContext()
}

type TypeFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
}

func NewEmptyTypeFunctionContext() *TypeFunctionContext {
	var p = new(TypeFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_typeFunction
	return p
}

func (*TypeFunctionContext) IsTypeFunctionContext() {}

func NewTypeFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeFunctionContext {
	var p = new(TypeFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_typeFunction

	return p
}

func (s *TypeFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeFunctionContext) GetT() antlr.Token { return s.t }

func (s *TypeFunctionContext) SetT(v antlr.Token) { s.t = v }

func (s *TypeFunctionContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *TypeFunctionContext) AllTypeFunctionParameterClause() []ITypeFunctionParameterClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeFunctionParameterClauseContext)(nil)).Elem())
	var tst = make([]ITypeFunctionParameterClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeFunctionParameterClauseContext)
		}
	}

	return tst
}

func (s *TypeFunctionContext) TypeFunctionParameterClause(i int) ITypeFunctionParameterClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeFunctionParameterClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeFunctionParameterClauseContext)
}

func (s *TypeFunctionContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *TypeFunctionContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *TypeFunctionContext) Right_Flow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Flow, 0)
}

func (s *TypeFunctionContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *TypeFunctionContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *TypeFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTypeFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TypeFunction() (localctx ITypeFunctionContext) {
	localctx = NewTypeFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 260, LiteParserRULE_typeFunction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1755)
		p.Left_paren()
	}
	{
		p.SetState(1756)
		p.TypeFunctionParameterClause()
	}
	{
		p.SetState(1757)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*TypeFunctionContext).t = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == LiteParserRight_Arrow || _la == LiteParserRight_Flow) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*TypeFunctionContext).t = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1761)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserNew_Line {
		{
			p.SetState(1758)
			p.Match(LiteParserNew_Line)
		}

		p.SetState(1763)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1764)
		p.TypeFunctionParameterClause()
	}
	{
		p.SetState(1765)
		p.Right_paren()
	}

	return localctx
}

// ITypeAnyContext is an interface to support dynamic dispatch.
type ITypeAnyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeAnyContext differentiates from other interfaces.
	IsTypeAnyContext()
}

type TypeAnyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeAnyContext() *TypeAnyContext {
	var p = new(TypeAnyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_typeAny
	return p
}

func (*TypeAnyContext) IsTypeAnyContext() {}

func NewTypeAnyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeAnyContext {
	var p = new(TypeAnyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_typeAny

	return p
}

func (s *TypeAnyContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeAnyContext) TypeAny() antlr.TerminalNode {
	return s.GetToken(LiteParserTypeAny, 0)
}

func (s *TypeAnyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeAnyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeAnyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTypeAny(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TypeAny() (localctx ITypeAnyContext) {
	localctx = NewTypeAnyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 262, LiteParserRULE_typeAny)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1767)
		p.Match(LiteParserTypeAny)
	}

	return localctx
}

// ITypeFunctionParameterClauseContext is an interface to support dynamic dispatch.
type ITypeFunctionParameterClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeFunctionParameterClauseContext differentiates from other interfaces.
	IsTypeFunctionParameterClauseContext()
}

type TypeFunctionParameterClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeFunctionParameterClauseContext() *TypeFunctionParameterClauseContext {
	var p = new(TypeFunctionParameterClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_typeFunctionParameterClause
	return p
}

func (*TypeFunctionParameterClauseContext) IsTypeFunctionParameterClauseContext() {}

func NewTypeFunctionParameterClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeFunctionParameterClauseContext {
	var p = new(TypeFunctionParameterClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_typeFunctionParameterClause

	return p
}

func (s *TypeFunctionParameterClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeFunctionParameterClauseContext) AllTypeType() []ITypeTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem())
	var tst = make([]ITypeTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeTypeContext)
		}
	}

	return tst
}

func (s *TypeFunctionParameterClauseContext) TypeType(i int) ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeFunctionParameterClauseContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *TypeFunctionParameterClauseContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *TypeFunctionParameterClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeFunctionParameterClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeFunctionParameterClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTypeFunctionParameterClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TypeFunctionParameterClause() (localctx ITypeFunctionParameterClauseContext) {
	localctx = NewTypeFunctionParameterClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 264, LiteParserRULE_typeFunctionParameterClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1770)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<LiteParserLinqFrom)|(1<<LiteParserLinqBy)|(1<<LiteParserLinqSelect)|(1<<LiteParserLinqWhere)|(1<<LiteParserLinqGroup)|(1<<LiteParserLinqInto)|(1<<LiteParserLinqOrderby)|(1<<LiteParserLinqJoin)|(1<<LiteParserLinqLet)|(1<<LiteParserLinqIn)|(1<<LiteParserLinqOn)|(1<<LiteParserLinqEquals)|(1<<LiteParserLinqAscending)|(1<<LiteParserLinqDescending))) != 0) || (((_la-41)&-(0x1f+1)) == 0 && ((1<<uint((_la-41)))&((1<<(LiteParserLeft_Paren-41))|(1<<(LiteParserLeft_Brack-41))|(1<<(LiteParserQuestion-41))|(1<<(LiteParserBang-41))|(1<<(LiteParserTypeI8-41))|(1<<(LiteParserTypeU8-41))|(1<<(LiteParserTypeI16-41))|(1<<(LiteParserTypeU16-41))|(1<<(LiteParserTypeI32-41))|(1<<(LiteParserTypeU32-41))|(1<<(LiteParserTypeI64-41))|(1<<(LiteParserTypeU64-41))|(1<<(LiteParserTypeF32-41))|(1<<(LiteParserTypeF64-41))|(1<<(LiteParserTypeChr-41))|(1<<(LiteParserTypeStr-41)))) != 0) || (((_la-73)&-(0x1f+1)) == 0 && ((1<<uint((_la-73)))&((1<<(LiteParserTypeBool-73))|(1<<(LiteParserTypeInt-73))|(1<<(LiteParserTypeNum-73))|(1<<(LiteParserTypeByte-73))|(1<<(LiteParserTypeAny-73))|(1<<(LiteParserIDPrivate-73))|(1<<(LiteParserIDPublic-73)))) != 0) {
		{
			p.SetState(1769)
			p.TypeType()
		}

	}
	p.SetState(1777)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserComma {
		{
			p.SetState(1772)
			p.More()
		}
		{
			p.SetState(1773)
			p.TypeType()
		}

		p.SetState(1779)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITypeBasicContext is an interface to support dynamic dispatch.
type ITypeBasicContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// IsTypeBasicContext differentiates from other interfaces.
	IsTypeBasicContext()
}

type TypeBasicContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
}

func NewEmptyTypeBasicContext() *TypeBasicContext {
	var p = new(TypeBasicContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_typeBasic
	return p
}

func (*TypeBasicContext) IsTypeBasicContext() {}

func NewTypeBasicContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeBasicContext {
	var p = new(TypeBasicContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_typeBasic

	return p
}

func (s *TypeBasicContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeBasicContext) GetT() antlr.Token { return s.t }

func (s *TypeBasicContext) SetT(v antlr.Token) { s.t = v }

func (s *TypeBasicContext) TypeI8() antlr.TerminalNode {
	return s.GetToken(LiteParserTypeI8, 0)
}

func (s *TypeBasicContext) TypeU8() antlr.TerminalNode {
	return s.GetToken(LiteParserTypeU8, 0)
}

func (s *TypeBasicContext) TypeI16() antlr.TerminalNode {
	return s.GetToken(LiteParserTypeI16, 0)
}

func (s *TypeBasicContext) TypeU16() antlr.TerminalNode {
	return s.GetToken(LiteParserTypeU16, 0)
}

func (s *TypeBasicContext) TypeI32() antlr.TerminalNode {
	return s.GetToken(LiteParserTypeI32, 0)
}

func (s *TypeBasicContext) TypeU32() antlr.TerminalNode {
	return s.GetToken(LiteParserTypeU32, 0)
}

func (s *TypeBasicContext) TypeI64() antlr.TerminalNode {
	return s.GetToken(LiteParserTypeI64, 0)
}

func (s *TypeBasicContext) TypeU64() antlr.TerminalNode {
	return s.GetToken(LiteParserTypeU64, 0)
}

func (s *TypeBasicContext) TypeF32() antlr.TerminalNode {
	return s.GetToken(LiteParserTypeF32, 0)
}

func (s *TypeBasicContext) TypeF64() antlr.TerminalNode {
	return s.GetToken(LiteParserTypeF64, 0)
}

func (s *TypeBasicContext) TypeChr() antlr.TerminalNode {
	return s.GetToken(LiteParserTypeChr, 0)
}

func (s *TypeBasicContext) TypeStr() antlr.TerminalNode {
	return s.GetToken(LiteParserTypeStr, 0)
}

func (s *TypeBasicContext) TypeBool() antlr.TerminalNode {
	return s.GetToken(LiteParserTypeBool, 0)
}

func (s *TypeBasicContext) TypeInt() antlr.TerminalNode {
	return s.GetToken(LiteParserTypeInt, 0)
}

func (s *TypeBasicContext) TypeNum() antlr.TerminalNode {
	return s.GetToken(LiteParserTypeNum, 0)
}

func (s *TypeBasicContext) TypeByte() antlr.TerminalNode {
	return s.GetToken(LiteParserTypeByte, 0)
}

func (s *TypeBasicContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeBasicContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeBasicContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTypeBasic(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TypeBasic() (localctx ITypeBasicContext) {
	localctx = NewTypeBasicContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 266, LiteParserRULE_typeBasic)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1796)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case LiteParserTypeI8:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1780)

			var _m = p.Match(LiteParserTypeI8)

			localctx.(*TypeBasicContext).t = _m
		}

	case LiteParserTypeU8:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1781)

			var _m = p.Match(LiteParserTypeU8)

			localctx.(*TypeBasicContext).t = _m
		}

	case LiteParserTypeI16:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1782)

			var _m = p.Match(LiteParserTypeI16)

			localctx.(*TypeBasicContext).t = _m
		}

	case LiteParserTypeU16:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1783)

			var _m = p.Match(LiteParserTypeU16)

			localctx.(*TypeBasicContext).t = _m
		}

	case LiteParserTypeI32:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1784)

			var _m = p.Match(LiteParserTypeI32)

			localctx.(*TypeBasicContext).t = _m
		}

	case LiteParserTypeU32:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1785)

			var _m = p.Match(LiteParserTypeU32)

			localctx.(*TypeBasicContext).t = _m
		}

	case LiteParserTypeI64:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1786)

			var _m = p.Match(LiteParserTypeI64)

			localctx.(*TypeBasicContext).t = _m
		}

	case LiteParserTypeU64:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1787)

			var _m = p.Match(LiteParserTypeU64)

			localctx.(*TypeBasicContext).t = _m
		}

	case LiteParserTypeF32:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1788)

			var _m = p.Match(LiteParserTypeF32)

			localctx.(*TypeBasicContext).t = _m
		}

	case LiteParserTypeF64:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1789)

			var _m = p.Match(LiteParserTypeF64)

			localctx.(*TypeBasicContext).t = _m
		}

	case LiteParserTypeChr:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1790)

			var _m = p.Match(LiteParserTypeChr)

			localctx.(*TypeBasicContext).t = _m
		}

	case LiteParserTypeStr:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1791)

			var _m = p.Match(LiteParserTypeStr)

			localctx.(*TypeBasicContext).t = _m
		}

	case LiteParserTypeBool:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(1792)

			var _m = p.Match(LiteParserTypeBool)

			localctx.(*TypeBasicContext).t = _m
		}

	case LiteParserTypeInt:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(1793)

			var _m = p.Match(LiteParserTypeInt)

			localctx.(*TypeBasicContext).t = _m
		}

	case LiteParserTypeNum:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(1794)

			var _m = p.Match(LiteParserTypeNum)

			localctx.(*TypeBasicContext).t = _m
		}

	case LiteParserTypeByte:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(1795)

			var _m = p.Match(LiteParserTypeByte)

			localctx.(*TypeBasicContext).t = _m
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// INilExprContext is an interface to support dynamic dispatch.
type INilExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNilExprContext differentiates from other interfaces.
	IsNilExprContext()
}

type NilExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNilExprContext() *NilExprContext {
	var p = new(NilExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_nilExpr
	return p
}

func (*NilExprContext) IsNilExprContext() {}

func NewNilExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NilExprContext {
	var p = new(NilExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_nilExpr

	return p
}

func (s *NilExprContext) GetParser() antlr.Parser { return s.parser }

func (s *NilExprContext) NilLiteral() antlr.TerminalNode {
	return s.GetToken(LiteParserNilLiteral, 0)
}

func (s *NilExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NilExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NilExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitNilExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) NilExpr() (localctx INilExprContext) {
	localctx = NewNilExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 268, LiteParserRULE_nilExpr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1798)
		p.Match(LiteParserNilLiteral)
	}

	return localctx
}

// IBoolExprContext is an interface to support dynamic dispatch.
type IBoolExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// IsBoolExprContext differentiates from other interfaces.
	IsBoolExprContext()
}

type BoolExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
}

func NewEmptyBoolExprContext() *BoolExprContext {
	var p = new(BoolExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_boolExpr
	return p
}

func (*BoolExprContext) IsBoolExprContext() {}

func NewBoolExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BoolExprContext {
	var p = new(BoolExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_boolExpr

	return p
}

func (s *BoolExprContext) GetParser() antlr.Parser { return s.parser }

func (s *BoolExprContext) GetT() antlr.Token { return s.t }

func (s *BoolExprContext) SetT(v antlr.Token) { s.t = v }

func (s *BoolExprContext) TrueLiteral() antlr.TerminalNode {
	return s.GetToken(LiteParserTrueLiteral, 0)
}

func (s *BoolExprContext) FalseLiteral() antlr.TerminalNode {
	return s.GetToken(LiteParserFalseLiteral, 0)
}

func (s *BoolExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BoolExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BoolExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitBoolExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) BoolExpr() (localctx IBoolExprContext) {
	localctx = NewBoolExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 270, LiteParserRULE_boolExpr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1802)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case LiteParserTrueLiteral:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1800)

			var _m = p.Match(LiteParserTrueLiteral)

			localctx.(*BoolExprContext).t = _m
		}

	case LiteParserFalseLiteral:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1801)

			var _m = p.Match(LiteParserFalseLiteral)

			localctx.(*BoolExprContext).t = _m
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IJudgeTypeContext is an interface to support dynamic dispatch.
type IJudgeTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsJudgeTypeContext differentiates from other interfaces.
	IsJudgeTypeContext()
}

type JudgeTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyJudgeTypeContext() *JudgeTypeContext {
	var p = new(JudgeTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_judgeType
	return p
}

func (*JudgeTypeContext) IsJudgeTypeContext() {}

func NewJudgeTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JudgeTypeContext {
	var p = new(JudgeTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_judgeType

	return p
}

func (s *JudgeTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *JudgeTypeContext) GetOp() antlr.Token { return s.op }

func (s *JudgeTypeContext) SetOp(v antlr.Token) { s.op = v }

func (s *JudgeTypeContext) Colon() antlr.TerminalNode {
	return s.GetToken(LiteParserColon, 0)
}

func (s *JudgeTypeContext) Equal_Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserEqual_Equal, 0)
}

func (s *JudgeTypeContext) Not_Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserNot_Equal, 0)
}

func (s *JudgeTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JudgeTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JudgeTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitJudgeType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) JudgeType() (localctx IJudgeTypeContext) {
	localctx = NewJudgeTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 272, LiteParserRULE_judgeType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1804)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*JudgeTypeContext).op = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == LiteParserEqual_Equal || _la == LiteParserNot_Equal) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*JudgeTypeContext).op = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1805)
		p.Match(LiteParserColon)
	}

	return localctx
}

// IJudgeContext is an interface to support dynamic dispatch.
type IJudgeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsJudgeContext differentiates from other interfaces.
	IsJudgeContext()
}

type JudgeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyJudgeContext() *JudgeContext {
	var p = new(JudgeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_judge
	return p
}

func (*JudgeContext) IsJudgeContext() {}

func NewJudgeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JudgeContext {
	var p = new(JudgeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_judge

	return p
}

func (s *JudgeContext) GetParser() antlr.Parser { return s.parser }

func (s *JudgeContext) GetOp() antlr.Token { return s.op }

func (s *JudgeContext) SetOp(v antlr.Token) { s.op = v }

func (s *JudgeContext) Or() antlr.TerminalNode {
	return s.GetToken(LiteParserOr, 0)
}

func (s *JudgeContext) And() antlr.TerminalNode {
	return s.GetToken(LiteParserAnd, 0)
}

func (s *JudgeContext) Equal_Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserEqual_Equal, 0)
}

func (s *JudgeContext) Not_Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserNot_Equal, 0)
}

func (s *JudgeContext) Less_Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserLess_Equal, 0)
}

func (s *JudgeContext) Greater_Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserGreater_Equal, 0)
}

func (s *JudgeContext) Less() antlr.TerminalNode {
	return s.GetToken(LiteParserLess, 0)
}

func (s *JudgeContext) Greater() antlr.TerminalNode {
	return s.GetToken(LiteParserGreater, 0)
}

func (s *JudgeContext) New_Line() antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, 0)
}

func (s *JudgeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JudgeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JudgeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitJudge(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Judge() (localctx IJudgeContext) {
	localctx = NewJudgeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 274, LiteParserRULE_judge)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1807)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*JudgeContext).op = _lt

		_la = p.GetTokenStream().LA(1)

		if !((((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<LiteParserEqual_Equal)|(1<<LiteParserLess_Equal)|(1<<LiteParserGreater_Equal)|(1<<LiteParserNot_Equal))) != 0) || (((_la-38)&-(0x1f+1)) == 0 && ((1<<uint((_la-38)))&((1<<(LiteParserLess-38))|(1<<(LiteParserGreater-38))|(1<<(LiteParserAnd-38))|(1<<(LiteParserOr-38)))) != 0)) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*JudgeContext).op = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1809)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserNew_Line {
		{
			p.SetState(1808)
			p.Match(LiteParserNew_Line)
		}

	}

	return localctx
}

// IAssignContext is an interface to support dynamic dispatch.
type IAssignContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsAssignContext differentiates from other interfaces.
	IsAssignContext()
}

type AssignContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyAssignContext() *AssignContext {
	var p = new(AssignContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_assign
	return p
}

func (*AssignContext) IsAssignContext() {}

func NewAssignContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignContext {
	var p = new(AssignContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_assign

	return p
}

func (s *AssignContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignContext) GetOp() antlr.Token { return s.op }

func (s *AssignContext) SetOp(v antlr.Token) { s.op = v }

func (s *AssignContext) Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserEqual, 0)
}

func (s *AssignContext) Add_Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserAdd_Equal, 0)
}

func (s *AssignContext) Sub_Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserSub_Equal, 0)
}

func (s *AssignContext) Mul_Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserMul_Equal, 0)
}

func (s *AssignContext) Div_Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserDiv_Equal, 0)
}

func (s *AssignContext) Mod_Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserMod_Equal, 0)
}

func (s *AssignContext) New_Line() antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, 0)
}

func (s *AssignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitAssign(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Assign() (localctx IAssignContext) {
	localctx = NewAssignContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 276, LiteParserRULE_assign)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1811)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*AssignContext).op = _lt

		_la = p.GetTokenStream().LA(1)

		if !(((_la-18)&-(0x1f+1)) == 0 && ((1<<uint((_la-18)))&((1<<(LiteParserAdd_Equal-18))|(1<<(LiteParserSub_Equal-18))|(1<<(LiteParserMul_Equal-18))|(1<<(LiteParserDiv_Equal-18))|(1<<(LiteParserMod_Equal-18))|(1<<(LiteParserEqual-18)))) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*AssignContext).op = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1813)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserNew_Line {
		{
			p.SetState(1812)
			p.Match(LiteParserNew_Line)
		}

	}

	return localctx
}

// IAddContext is an interface to support dynamic dispatch.
type IAddContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsAddContext differentiates from other interfaces.
	IsAddContext()
}

type AddContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyAddContext() *AddContext {
	var p = new(AddContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_add
	return p
}

func (*AddContext) IsAddContext() {}

func NewAddContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AddContext {
	var p = new(AddContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_add

	return p
}

func (s *AddContext) GetParser() antlr.Parser { return s.parser }

func (s *AddContext) GetOp() antlr.Token { return s.op }

func (s *AddContext) SetOp(v antlr.Token) { s.op = v }

func (s *AddContext) Add() antlr.TerminalNode {
	return s.GetToken(LiteParserAdd, 0)
}

func (s *AddContext) Sub() antlr.TerminalNode {
	return s.GetToken(LiteParserSub, 0)
}

func (s *AddContext) New_Line() antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, 0)
}

func (s *AddContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AddContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AddContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitAdd(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Add() (localctx IAddContext) {
	localctx = NewAddContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 278, LiteParserRULE_add)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1815)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*AddContext).op = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == LiteParserAdd || _la == LiteParserSub) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*AddContext).op = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1817)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserNew_Line {
		{
			p.SetState(1816)
			p.Match(LiteParserNew_Line)
		}

	}

	return localctx
}

// IMulContext is an interface to support dynamic dispatch.
type IMulContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsMulContext differentiates from other interfaces.
	IsMulContext()
}

type MulContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyMulContext() *MulContext {
	var p = new(MulContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_mul
	return p
}

func (*MulContext) IsMulContext() {}

func NewMulContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MulContext {
	var p = new(MulContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_mul

	return p
}

func (s *MulContext) GetParser() antlr.Parser { return s.parser }

func (s *MulContext) GetOp() antlr.Token { return s.op }

func (s *MulContext) SetOp(v antlr.Token) { s.op = v }

func (s *MulContext) Mul() antlr.TerminalNode {
	return s.GetToken(LiteParserMul, 0)
}

func (s *MulContext) Div() antlr.TerminalNode {
	return s.GetToken(LiteParserDiv, 0)
}

func (s *MulContext) Mod() antlr.TerminalNode {
	return s.GetToken(LiteParserMod, 0)
}

func (s *MulContext) New_Line() antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, 0)
}

func (s *MulContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MulContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MulContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitMul(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Mul() (localctx IMulContext) {
	localctx = NewMulContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 280, LiteParserRULE_mul)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1819)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*MulContext).op = _lt

		_la = p.GetTokenStream().LA(1)

		if !(((_la-55)&-(0x1f+1)) == 0 && ((1<<uint((_la-55)))&((1<<(LiteParserMul-55))|(1<<(LiteParserDiv-55))|(1<<(LiteParserMod-55)))) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*MulContext).op = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1821)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserNew_Line {
		{
			p.SetState(1820)
			p.Match(LiteParserNew_Line)
		}

	}

	return localctx
}

// IPowContext is an interface to support dynamic dispatch.
type IPowContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsPowContext differentiates from other interfaces.
	IsPowContext()
}

type PowContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyPowContext() *PowContext {
	var p = new(PowContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_pow
	return p
}

func (*PowContext) IsPowContext() {}

func NewPowContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PowContext {
	var p = new(PowContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_pow

	return p
}

func (s *PowContext) GetParser() antlr.Parser { return s.parser }

func (s *PowContext) GetOp() antlr.Token { return s.op }

func (s *PowContext) SetOp(v antlr.Token) { s.op = v }

func (s *PowContext) Pow() antlr.TerminalNode {
	return s.GetToken(LiteParserPow, 0)
}

func (s *PowContext) Root() antlr.TerminalNode {
	return s.GetToken(LiteParserRoot, 0)
}

func (s *PowContext) Log() antlr.TerminalNode {
	return s.GetToken(LiteParserLog, 0)
}

func (s *PowContext) New_Line() antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, 0)
}

func (s *PowContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PowContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PowContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitPow(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Pow() (localctx IPowContext) {
	localctx = NewPowContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 282, LiteParserRULE_pow)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1823)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*PowContext).op = _lt

		_la = p.GetTokenStream().LA(1)

		if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<LiteParserPow)|(1<<LiteParserRoot)|(1<<LiteParserLog))) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*PowContext).op = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1825)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserNew_Line {
		{
			p.SetState(1824)
			p.Match(LiteParserNew_Line)
		}

	}

	return localctx
}

// ICallContext is an interface to support dynamic dispatch.
type ICallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsCallContext differentiates from other interfaces.
	IsCallContext()
}

type CallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyCallContext() *CallContext {
	var p = new(CallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_call
	return p
}

func (*CallContext) IsCallContext() {}

func NewCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallContext {
	var p = new(CallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_call

	return p
}

func (s *CallContext) GetParser() antlr.Parser { return s.parser }

func (s *CallContext) GetOp() antlr.Token { return s.op }

func (s *CallContext) SetOp(v antlr.Token) { s.op = v }

func (s *CallContext) Dot() antlr.TerminalNode {
	return s.GetToken(LiteParserDot, 0)
}

func (s *CallContext) New_Line() antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, 0)
}

func (s *CallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitCall(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Call() (localctx ICallContext) {
	localctx = NewCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 284, LiteParserRULE_call)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1827)

		var _m = p.Match(LiteParserDot)

		localctx.(*CallContext).op = _m
	}
	p.SetState(1829)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 186, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1828)
			p.Match(LiteParserNew_Line)
		}

	}

	return localctx
}

// IWaveContext is an interface to support dynamic dispatch.
type IWaveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsWaveContext differentiates from other interfaces.
	IsWaveContext()
}

type WaveContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyWaveContext() *WaveContext {
	var p = new(WaveContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_wave
	return p
}

func (*WaveContext) IsWaveContext() {}

func NewWaveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WaveContext {
	var p = new(WaveContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_wave

	return p
}

func (s *WaveContext) GetParser() antlr.Parser { return s.parser }

func (s *WaveContext) GetOp() antlr.Token { return s.op }

func (s *WaveContext) SetOp(v antlr.Token) { s.op = v }

func (s *WaveContext) Wave() antlr.TerminalNode {
	return s.GetToken(LiteParserWave, 0)
}

func (s *WaveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WaveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WaveContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitWave(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Wave() (localctx IWaveContext) {
	localctx = NewWaveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 286, LiteParserRULE_wave)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1831)

		var _m = p.Match(LiteParserWave)

		localctx.(*WaveContext).op = _m
	}

	return localctx
}

// IIdContext is an interface to support dynamic dispatch.
type IIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdContext differentiates from other interfaces.
	IsIdContext()
}

type IdContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdContext() *IdContext {
	var p = new(IdContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_id
	return p
}

func (*IdContext) IsIdContext() {}

func NewIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdContext {
	var p = new(IdContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_id

	return p
}

func (s *IdContext) GetParser() antlr.Parser { return s.parser }

func (s *IdContext) IdItem() IIdItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdItemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdItemContext)
}

func (s *IdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitId(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Id() (localctx IIdContext) {
	localctx = NewIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 288, LiteParserRULE_id)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1833)
		p.IdItem()
	}

	return localctx
}

// IIdItemContext is an interface to support dynamic dispatch.
type IIdItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsIdItemContext differentiates from other interfaces.
	IsIdItemContext()
}

type IdItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyIdItemContext() *IdItemContext {
	var p = new(IdItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_idItem
	return p
}

func (*IdItemContext) IsIdItemContext() {}

func NewIdItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdItemContext {
	var p = new(IdItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_idItem

	return p
}

func (s *IdItemContext) GetParser() antlr.Parser { return s.parser }

func (s *IdItemContext) GetOp() antlr.Token { return s.op }

func (s *IdItemContext) SetOp(v antlr.Token) { s.op = v }

func (s *IdItemContext) IDPublic() antlr.TerminalNode {
	return s.GetToken(LiteParserIDPublic, 0)
}

func (s *IdItemContext) IDPrivate() antlr.TerminalNode {
	return s.GetToken(LiteParserIDPrivate, 0)
}

func (s *IdItemContext) TypeBasic() ITypeBasicContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeBasicContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeBasicContext)
}

func (s *IdItemContext) TypeAny() ITypeAnyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAnyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAnyContext)
}

func (s *IdItemContext) LinqKeyword() ILinqKeywordContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILinqKeywordContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILinqKeywordContext)
}

func (s *IdItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitIdItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) IdItem() (localctx IIdItemContext) {
	localctx = NewIdItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 290, LiteParserRULE_idItem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1839)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case LiteParserIDPrivate, LiteParserIDPublic:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1835)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*IdItemContext).op = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == LiteParserIDPrivate || _la == LiteParserIDPublic) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*IdItemContext).op = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case LiteParserTypeI8, LiteParserTypeU8, LiteParserTypeI16, LiteParserTypeU16, LiteParserTypeI32, LiteParserTypeU32, LiteParserTypeI64, LiteParserTypeU64, LiteParserTypeF32, LiteParserTypeF64, LiteParserTypeChr, LiteParserTypeStr, LiteParserTypeBool, LiteParserTypeInt, LiteParserTypeNum, LiteParserTypeByte:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1836)
			p.TypeBasic()
		}

	case LiteParserTypeAny:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1837)
			p.TypeAny()
		}

	case LiteParserLinqFrom, LiteParserLinqBy, LiteParserLinqSelect, LiteParserLinqWhere, LiteParserLinqGroup, LiteParserLinqInto, LiteParserLinqOrderby, LiteParserLinqJoin, LiteParserLinqLet, LiteParserLinqIn, LiteParserLinqOn, LiteParserLinqEquals, LiteParserLinqAscending, LiteParserLinqDescending:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1838)
			p.LinqKeyword()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IEndContext is an interface to support dynamic dispatch.
type IEndContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEndContext differentiates from other interfaces.
	IsEndContext()
}

type EndContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEndContext() *EndContext {
	var p = new(EndContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_end
	return p
}

func (*EndContext) IsEndContext() {}

func NewEndContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EndContext {
	var p = new(EndContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_end

	return p
}

func (s *EndContext) GetParser() antlr.Parser { return s.parser }

func (s *EndContext) Semi() antlr.TerminalNode {
	return s.GetToken(LiteParserSemi, 0)
}

func (s *EndContext) New_Line() antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, 0)
}

func (s *EndContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EndContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EndContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitEnd(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) End() (localctx IEndContext) {
	localctx = NewEndContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 292, LiteParserRULE_end)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1841)
		_la = p.GetTokenStream().LA(1)

		if !(_la == LiteParserSemi || _la == LiteParserNew_Line) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IMoreContext is an interface to support dynamic dispatch.
type IMoreContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMoreContext differentiates from other interfaces.
	IsMoreContext()
}

type MoreContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMoreContext() *MoreContext {
	var p = new(MoreContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_more
	return p
}

func (*MoreContext) IsMoreContext() {}

func NewMoreContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MoreContext {
	var p = new(MoreContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_more

	return p
}

func (s *MoreContext) GetParser() antlr.Parser { return s.parser }

func (s *MoreContext) Comma() antlr.TerminalNode {
	return s.GetToken(LiteParserComma, 0)
}

func (s *MoreContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *MoreContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *MoreContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MoreContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MoreContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitMore(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) More() (localctx IMoreContext) {
	localctx = NewMoreContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 294, LiteParserRULE_more)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1843)
		p.Match(LiteParserComma)
	}
	p.SetState(1847)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserNew_Line {
		{
			p.SetState(1844)
			p.Match(LiteParserNew_Line)
		}

		p.SetState(1849)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ILeft_braceContext is an interface to support dynamic dispatch.
type ILeft_braceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLeft_braceContext differentiates from other interfaces.
	IsLeft_braceContext()
}

type Left_braceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLeft_braceContext() *Left_braceContext {
	var p = new(Left_braceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_left_brace
	return p
}

func (*Left_braceContext) IsLeft_braceContext() {}

func NewLeft_braceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Left_braceContext {
	var p = new(Left_braceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_left_brace

	return p
}

func (s *Left_braceContext) GetParser() antlr.Parser { return s.parser }

func (s *Left_braceContext) Left_Brace() antlr.TerminalNode {
	return s.GetToken(LiteParserLeft_Brace, 0)
}

func (s *Left_braceContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *Left_braceContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *Left_braceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Left_braceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Left_braceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitLeft_brace(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Left_brace() (localctx ILeft_braceContext) {
	localctx = NewLeft_braceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 296, LiteParserRULE_left_brace)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1850)
		p.Match(LiteParserLeft_Brace)
	}
	p.SetState(1854)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 189, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1851)
				p.Match(LiteParserNew_Line)
			}

		}
		p.SetState(1856)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 189, p.GetParserRuleContext())
	}

	return localctx
}

// IRight_braceContext is an interface to support dynamic dispatch.
type IRight_braceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRight_braceContext differentiates from other interfaces.
	IsRight_braceContext()
}

type Right_braceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRight_braceContext() *Right_braceContext {
	var p = new(Right_braceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_right_brace
	return p
}

func (*Right_braceContext) IsRight_braceContext() {}

func NewRight_braceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Right_braceContext {
	var p = new(Right_braceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_right_brace

	return p
}

func (s *Right_braceContext) GetParser() antlr.Parser { return s.parser }

func (s *Right_braceContext) Right_Brace() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Brace, 0)
}

func (s *Right_braceContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *Right_braceContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *Right_braceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Right_braceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Right_braceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitRight_brace(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Right_brace() (localctx IRight_braceContext) {
	localctx = NewRight_braceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 298, LiteParserRULE_right_brace)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1860)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserNew_Line {
		{
			p.SetState(1857)
			p.Match(LiteParserNew_Line)
		}

		p.SetState(1862)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1863)
		p.Match(LiteParserRight_Brace)
	}

	return localctx
}

// ILeft_parenContext is an interface to support dynamic dispatch.
type ILeft_parenContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLeft_parenContext differentiates from other interfaces.
	IsLeft_parenContext()
}

type Left_parenContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLeft_parenContext() *Left_parenContext {
	var p = new(Left_parenContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_left_paren
	return p
}

func (*Left_parenContext) IsLeft_parenContext() {}

func NewLeft_parenContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Left_parenContext {
	var p = new(Left_parenContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_left_paren

	return p
}

func (s *Left_parenContext) GetParser() antlr.Parser { return s.parser }

func (s *Left_parenContext) Left_Paren() antlr.TerminalNode {
	return s.GetToken(LiteParserLeft_Paren, 0)
}

func (s *Left_parenContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Left_parenContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Left_parenContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitLeft_paren(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Left_paren() (localctx ILeft_parenContext) {
	localctx = NewLeft_parenContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 300, LiteParserRULE_left_paren)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1865)
		p.Match(LiteParserLeft_Paren)
	}

	return localctx
}

// IRight_parenContext is an interface to support dynamic dispatch.
type IRight_parenContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRight_parenContext differentiates from other interfaces.
	IsRight_parenContext()
}

type Right_parenContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRight_parenContext() *Right_parenContext {
	var p = new(Right_parenContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_right_paren
	return p
}

func (*Right_parenContext) IsRight_parenContext() {}

func NewRight_parenContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Right_parenContext {
	var p = new(Right_parenContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_right_paren

	return p
}

func (s *Right_parenContext) GetParser() antlr.Parser { return s.parser }

func (s *Right_parenContext) Right_Paren() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Paren, 0)
}

func (s *Right_parenContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Right_parenContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Right_parenContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitRight_paren(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Right_paren() (localctx IRight_parenContext) {
	localctx = NewRight_parenContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 302, LiteParserRULE_right_paren)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1867)
		p.Match(LiteParserRight_Paren)
	}

	return localctx
}

// ILeft_brackContext is an interface to support dynamic dispatch.
type ILeft_brackContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLeft_brackContext differentiates from other interfaces.
	IsLeft_brackContext()
}

type Left_brackContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLeft_brackContext() *Left_brackContext {
	var p = new(Left_brackContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_left_brack
	return p
}

func (*Left_brackContext) IsLeft_brackContext() {}

func NewLeft_brackContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Left_brackContext {
	var p = new(Left_brackContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_left_brack

	return p
}

func (s *Left_brackContext) GetParser() antlr.Parser { return s.parser }

func (s *Left_brackContext) Left_Brack() antlr.TerminalNode {
	return s.GetToken(LiteParserLeft_Brack, 0)
}

func (s *Left_brackContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *Left_brackContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *Left_brackContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Left_brackContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Left_brackContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitLeft_brack(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Left_brack() (localctx ILeft_brackContext) {
	localctx = NewLeft_brackContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 304, LiteParserRULE_left_brack)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1869)
		p.Match(LiteParserLeft_Brack)
	}
	p.SetState(1873)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 191, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1870)
				p.Match(LiteParserNew_Line)
			}

		}
		p.SetState(1875)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 191, p.GetParserRuleContext())
	}

	return localctx
}

// IRight_brackContext is an interface to support dynamic dispatch.
type IRight_brackContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRight_brackContext differentiates from other interfaces.
	IsRight_brackContext()
}

type Right_brackContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRight_brackContext() *Right_brackContext {
	var p = new(Right_brackContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_right_brack
	return p
}

func (*Right_brackContext) IsRight_brackContext() {}

func NewRight_brackContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Right_brackContext {
	var p = new(Right_brackContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_right_brack

	return p
}

func (s *Right_brackContext) GetParser() antlr.Parser { return s.parser }

func (s *Right_brackContext) Right_Brack() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Brack, 0)
}

func (s *Right_brackContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *Right_brackContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *Right_brackContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Right_brackContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Right_brackContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitRight_brack(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Right_brack() (localctx IRight_brackContext) {
	localctx = NewRight_brackContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 306, LiteParserRULE_right_brack)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1879)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserNew_Line {
		{
			p.SetState(1876)
			p.Match(LiteParserNew_Line)
		}

		p.SetState(1881)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1882)
		p.Match(LiteParserRight_Brack)
	}

	return localctx
}

func (p *LiteParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 65:
		var t *ExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ExpressionContext)
		}
		return p.Expression_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *LiteParser) Expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 1:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 14)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 13)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 12)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 11)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 10)

	case 9:
		return p.Precpred(p.GetParserRuleContext(), 9)

	case 10:
		return p.Precpred(p.GetParserRuleContext(), 8)

	case 11:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 12:
		return p.Precpred(p.GetParserRuleContext(), 6)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
