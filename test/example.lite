"main" {
    # "./project/package path" package. #
    fmt. "fmt"
}

main(->) {
    testGo()
    test(1, "2")
    testJudge()
    testLoop()
    m = man{}
    testProtocol(m?)
    testLambda( (a int -> b str) {
        <- ""
    })
}

pi : 3.14
eight int : 8

num1 = 1
num2 num = 12.345678

work => (str->)
doWork -> (str->) 

test(x int, y str -> r1 str, r2 int) {
    a = x * 3
    b int = 2
    <- "hello", a + b
}

testJudge(->) {
    a = 5
    ? 1 + 1 == 2 {
        a = 2
    } 2 * 3 == 6 {
        a = 1
    } _ {
        a = 5
    }
    
    a ? 1 {
        a = a + 1
    } 2, 3, 4 {
        a = a + 2
    } _ {
        a = 0
    }
}

testLoop(->) {
    a = 0
    arr = {1,2,3,4,5}
    i @ arr {
        a += i
    }
    i:v @ arr {
        a += i + v
    }
    dic = {"1":1,"2":2}
    i @ dic {
        a += i
    }
    i @ 0..<=10 {
        a += i
        ? i == 7 {
            ..@
        }
    }
    i @ 5..>0 {
        a += i
    }
    @ a > 0 {
        a -= 1
    }
    @ {
        @..
    }
}

human -> {
    name str
}

me ?human -> {
    sayName(-> n str) {
        <- me.name
    }
} 

man -> {
    human
    age int
}

me ?man -> {
    doSomething(work str ->) {
        Println(work)
    }
}

person <- {
    sayName(-> n str)
}

worker <- {
    person
    doSomething(work str ->)
}

testProtocol(w worker -> i any) {
    w.doSomething("protocol")
    <- w
}

test_define(->) {
    a = 1
    ? a == 1 {
        b = 2
        b = 3
        a = 3
        Println(b)
    } a == 2 {
        b = 2
        b = 3
        ? b == 2 {
            a = 1
        }
        Println(b)
    } _ {
        b = 2
        b = 3
        a = 3
        Println(b)
    }
    a ? 1 {
        b = 2
        b = 3
        a = 3
        ? a == 3 {
            b = 1
            a = 1
        } _ {
            a = 2
        }
        Println(b)
    } _ {
        b = 2
        b = 3
        a = 3
        Println(b)
    }
}

testGo(-> v int) {
    async = (->) {
        Println("async")
    }
    async() <~
    channel = [[->]int](1)
    channel.(<-) = 2
    <- channel.(<-)
}

testLambda(fn (int->str) ->) {
    fn(1)
}