// Code generated from LiteParser.g4 by ANTLR 4.7.2. DO NOT EDIT.

package parser // LiteParser

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 86, 2255,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9,
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65,
	4, 66, 9, 66, 4, 67, 9, 67, 4, 68, 9, 68, 4, 69, 9, 69, 4, 70, 9, 70, 4,
	71, 9, 71, 4, 72, 9, 72, 4, 73, 9, 73, 4, 74, 9, 74, 4, 75, 9, 75, 4, 76,
	9, 76, 4, 77, 9, 77, 4, 78, 9, 78, 4, 79, 9, 79, 4, 80, 9, 80, 4, 81, 9,
	81, 4, 82, 9, 82, 4, 83, 9, 83, 4, 84, 9, 84, 4, 85, 9, 85, 4, 86, 9, 86,
	4, 87, 9, 87, 4, 88, 9, 88, 4, 89, 9, 89, 4, 90, 9, 90, 4, 91, 9, 91, 4,
	92, 9, 92, 4, 93, 9, 93, 4, 94, 9, 94, 4, 95, 9, 95, 4, 96, 9, 96, 4, 97,
	9, 97, 4, 98, 9, 98, 4, 99, 9, 99, 4, 100, 9, 100, 4, 101, 9, 101, 4, 102,
	9, 102, 4, 103, 9, 103, 4, 104, 9, 104, 4, 105, 9, 105, 4, 106, 9, 106,
	4, 107, 9, 107, 4, 108, 9, 108, 4, 109, 9, 109, 4, 110, 9, 110, 4, 111,
	9, 111, 4, 112, 9, 112, 4, 113, 9, 113, 4, 114, 9, 114, 4, 115, 9, 115,
	4, 116, 9, 116, 4, 117, 9, 117, 4, 118, 9, 118, 4, 119, 9, 119, 4, 120,
	9, 120, 4, 121, 9, 121, 4, 122, 9, 122, 4, 123, 9, 123, 4, 124, 9, 124,
	4, 125, 9, 125, 4, 126, 9, 126, 4, 127, 9, 127, 4, 128, 9, 128, 4, 129,
	9, 129, 4, 130, 9, 130, 4, 131, 9, 131, 4, 132, 9, 132, 4, 133, 9, 133,
	4, 134, 9, 134, 4, 135, 9, 135, 4, 136, 9, 136, 4, 137, 9, 137, 4, 138,
	9, 138, 4, 139, 9, 139, 4, 140, 9, 140, 4, 141, 9, 141, 4, 142, 9, 142,
	4, 143, 9, 143, 4, 144, 9, 144, 4, 145, 9, 145, 4, 146, 9, 146, 4, 147,
	9, 147, 4, 148, 9, 148, 4, 149, 9, 149, 4, 150, 9, 150, 4, 151, 9, 151,
	4, 152, 9, 152, 4, 153, 9, 153, 4, 154, 9, 154, 4, 155, 9, 155, 4, 156,
	9, 156, 4, 157, 9, 157, 4, 158, 9, 158, 4, 159, 9, 159, 4, 160, 9, 160,
	4, 161, 9, 161, 4, 162, 9, 162, 4, 163, 9, 163, 4, 164, 9, 164, 4, 165,
	9, 165, 4, 166, 9, 166, 4, 167, 9, 167, 4, 168, 9, 168, 4, 169, 9, 169,
	4, 170, 9, 170, 4, 171, 9, 171, 4, 172, 9, 172, 4, 173, 9, 173, 4, 174,
	9, 174, 4, 175, 9, 175, 4, 176, 9, 176, 3, 2, 6, 2, 354, 10, 2, 13, 2,
	14, 2, 355, 3, 3, 7, 3, 359, 10, 3, 12, 3, 14, 3, 362, 11, 3, 3, 3, 5,
	3, 365, 10, 3, 3, 3, 3, 3, 7, 3, 369, 10, 3, 12, 3, 14, 3, 372, 11, 3,
	3, 3, 7, 3, 375, 10, 3, 12, 3, 14, 3, 378, 11, 3, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 7, 4, 385, 10, 4, 12, 4, 14, 4, 388, 11, 4, 3, 4, 3, 4, 3, 4,
	3, 5, 5, 5, 394, 10, 5, 3, 5, 3, 5, 5, 5, 398, 10, 5, 3, 5, 3, 5, 5, 5,
	402, 10, 5, 3, 5, 3, 5, 3, 5, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6,
	3, 6, 3, 6, 5, 6, 416, 10, 6, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 8, 3, 8,
	3, 8, 7, 8, 426, 10, 8, 12, 8, 14, 8, 429, 11, 8, 3, 8, 3, 8, 3, 8, 3,
	8, 3, 9, 5, 9, 436, 10, 9, 3, 9, 3, 9, 3, 9, 7, 9, 441, 10, 9, 12, 9, 14,
	9, 444, 11, 9, 3, 9, 3, 9, 3, 9, 3, 9, 5, 9, 450, 10, 9, 3, 9, 3, 9, 3,
	9, 3, 9, 5, 9, 456, 10, 9, 5, 9, 458, 10, 9, 3, 9, 3, 9, 7, 9, 462, 10,
	9, 12, 9, 14, 9, 465, 11, 9, 3, 9, 3, 9, 3, 9, 3, 10, 3, 10, 3, 10, 5,
	10, 473, 10, 10, 3, 10, 5, 10, 476, 10, 10, 3, 10, 3, 10, 3, 11, 5, 11,
	481, 10, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 5, 11, 489, 10,
	11, 5, 11, 491, 10, 11, 3, 11, 3, 11, 3, 12, 5, 12, 496, 10, 12, 3, 12,
	3, 12, 5, 12, 500, 10, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 13, 5, 13, 507,
	10, 13, 3, 13, 3, 13, 5, 13, 511, 10, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3,
	13, 5, 13, 518, 10, 13, 3, 13, 7, 13, 521, 10, 13, 12, 13, 14, 13, 524,
	11, 13, 3, 13, 3, 13, 5, 13, 528, 10, 13, 3, 13, 3, 13, 3, 13, 7, 13, 533,
	10, 13, 12, 13, 14, 13, 536, 11, 13, 3, 13, 3, 13, 3, 13, 3, 14, 5, 14,
	542, 10, 14, 3, 14, 3, 14, 5, 14, 546, 10, 14, 3, 14, 3, 14, 3, 14, 3,
	14, 3, 14, 5, 14, 553, 10, 14, 6, 14, 555, 10, 14, 13, 14, 14, 14, 556,
	3, 14, 3, 14, 3, 15, 3, 15, 5, 15, 563, 10, 15, 3, 15, 3, 15, 3, 15, 3,
	15, 5, 15, 569, 10, 15, 5, 15, 571, 10, 15, 3, 15, 3, 15, 7, 15, 575, 10,
	15, 12, 15, 14, 15, 578, 11, 15, 3, 15, 3, 15, 3, 16, 3, 16, 3, 16, 3,
	16, 3, 16, 3, 16, 3, 16, 5, 16, 589, 10, 16, 3, 17, 3, 17, 3, 17, 3, 17,
	3, 18, 5, 18, 596, 10, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 5, 18, 603,
	10, 18, 3, 18, 3, 18, 5, 18, 607, 10, 18, 3, 18, 3, 18, 5, 18, 611, 10,
	18, 3, 18, 3, 18, 3, 18, 3, 18, 5, 18, 617, 10, 18, 5, 18, 619, 10, 18,
	3, 18, 3, 18, 7, 18, 623, 10, 18, 12, 18, 14, 18, 626, 11, 18, 3, 18, 3,
	18, 3, 19, 5, 19, 631, 10, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19,
	5, 19, 639, 10, 19, 5, 19, 641, 10, 19, 3, 19, 3, 19, 3, 20, 5, 20, 646,
	10, 20, 3, 20, 3, 20, 5, 20, 650, 10, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3,
	20, 5, 20, 657, 10, 20, 3, 20, 7, 20, 660, 10, 20, 12, 20, 14, 20, 663,
	11, 20, 3, 20, 3, 20, 5, 20, 667, 10, 20, 3, 20, 3, 20, 3, 20, 7, 20, 672,
	10, 20, 12, 20, 14, 20, 675, 11, 20, 3, 20, 3, 20, 3, 20, 3, 21, 3, 21,
	3, 21, 3, 21, 3, 21, 5, 21, 685, 10, 21, 3, 21, 3, 21, 6, 21, 689, 10,
	21, 13, 21, 14, 21, 690, 3, 21, 3, 21, 3, 21, 3, 22, 3, 22, 3, 22, 3, 22,
	3, 22, 3, 22, 3, 22, 3, 23, 3, 23, 3, 23, 5, 23, 706, 10, 23, 3, 23, 3,
	23, 3, 23, 3, 23, 5, 23, 712, 10, 23, 5, 23, 714, 10, 23, 3, 23, 3, 23,
	7, 23, 718, 10, 23, 12, 23, 14, 23, 721, 11, 23, 3, 23, 3, 23, 3, 24, 3,
	24, 5, 24, 727, 10, 24, 3, 24, 3, 24, 3, 24, 5, 24, 732, 10, 24, 5, 24,
	734, 10, 24, 3, 24, 3, 24, 3, 24, 3, 24, 5, 24, 740, 10, 24, 6, 24, 742,
	10, 24, 13, 24, 14, 24, 743, 3, 24, 3, 24, 3, 25, 3, 25, 3, 25, 3, 25,
	3, 25, 5, 25, 753, 10, 25, 3, 26, 5, 26, 756, 10, 26, 3, 26, 3, 26, 3,
	26, 3, 26, 3, 26, 3, 26, 5, 26, 764, 10, 26, 5, 26, 766, 10, 26, 3, 26,
	3, 26, 3, 27, 5, 27, 771, 10, 27, 3, 27, 3, 27, 5, 27, 775, 10, 27, 3,
	27, 3, 27, 3, 27, 3, 27, 3, 27, 5, 27, 782, 10, 27, 3, 27, 7, 27, 785,
	10, 27, 12, 27, 14, 27, 788, 11, 27, 3, 27, 3, 27, 5, 27, 792, 10, 27,
	3, 27, 3, 27, 3, 27, 7, 27, 797, 10, 27, 12, 27, 14, 27, 800, 11, 27, 3,
	27, 3, 27, 3, 27, 3, 28, 5, 28, 806, 10, 28, 3, 28, 3, 28, 5, 28, 810,
	10, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 5, 28, 818, 10, 28, 5,
	28, 820, 10, 28, 3, 28, 3, 28, 3, 29, 5, 29, 825, 10, 29, 3, 29, 3, 29,
	5, 29, 829, 10, 29, 3, 29, 3, 29, 5, 29, 833, 10, 29, 3, 29, 3, 29, 3,
	29, 3, 29, 3, 29, 5, 29, 840, 10, 29, 3, 29, 7, 29, 843, 10, 29, 12, 29,
	14, 29, 846, 11, 29, 3, 29, 3, 29, 5, 29, 850, 10, 29, 3, 29, 3, 29, 3,
	29, 7, 29, 855, 10, 29, 12, 29, 14, 29, 858, 11, 29, 3, 29, 3, 29, 3, 29,
	3, 30, 5, 30, 864, 10, 30, 3, 30, 3, 30, 5, 30, 868, 10, 30, 3, 30, 3,
	30, 3, 30, 3, 30, 3, 30, 5, 30, 875, 10, 30, 3, 30, 3, 30, 3, 30, 3, 30,
	5, 30, 881, 10, 30, 5, 30, 883, 10, 30, 3, 30, 3, 30, 7, 30, 887, 10, 30,
	12, 30, 14, 30, 890, 11, 30, 3, 30, 3, 30, 3, 30, 3, 31, 3, 31, 3, 31,
	3, 31, 5, 31, 899, 10, 31, 3, 32, 5, 32, 902, 10, 32, 3, 32, 3, 32, 3,
	32, 3, 32, 3, 32, 3, 32, 5, 32, 910, 10, 32, 5, 32, 912, 10, 32, 3, 32,
	3, 32, 3, 33, 5, 33, 917, 10, 33, 3, 33, 3, 33, 5, 33, 921, 10, 33, 3,
	33, 3, 33, 3, 33, 3, 33, 5, 33, 927, 10, 33, 3, 33, 7, 33, 930, 10, 33,
	12, 33, 14, 33, 933, 11, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 34, 3, 34,
	5, 34, 941, 10, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 5, 34, 948, 10,
	34, 3, 34, 7, 34, 951, 10, 34, 12, 34, 14, 34, 954, 11, 34, 3, 34, 3, 34,
	5, 34, 958, 10, 34, 3, 34, 3, 34, 3, 34, 7, 34, 963, 10, 34, 12, 34, 14,
	34, 966, 11, 34, 3, 34, 3, 34, 3, 34, 3, 35, 3, 35, 5, 35, 973, 10, 35,
	3, 35, 3, 35, 3, 36, 3, 36, 5, 36, 979, 10, 36, 3, 36, 3, 36, 3, 37, 3,
	37, 3, 37, 3, 37, 3, 37, 3, 38, 3, 38, 3, 38, 3, 38, 3, 39, 5, 39, 993,
	10, 39, 3, 39, 3, 39, 3, 39, 7, 39, 998, 10, 39, 12, 39, 14, 39, 1001,
	11, 39, 3, 40, 5, 40, 1004, 10, 40, 3, 40, 3, 40, 3, 40, 7, 40, 1009, 10,
	40, 12, 40, 14, 40, 1012, 11, 40, 3, 41, 5, 41, 1015, 10, 41, 3, 41, 3,
	41, 5, 41, 1019, 10, 41, 3, 41, 3, 41, 3, 41, 5, 41, 1024, 10, 41, 3, 42,
	3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3,
	42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 5, 42,
	1047, 10, 42, 3, 43, 3, 43, 3, 43, 6, 43, 1052, 10, 43, 13, 43, 14, 43,
	1053, 3, 43, 3, 43, 3, 44, 3, 44, 3, 44, 3, 44, 7, 44, 1062, 10, 44, 12,
	44, 14, 44, 1065, 11, 44, 3, 44, 3, 44, 7, 44, 1069, 10, 44, 12, 44, 14,
	44, 1072, 11, 44, 3, 44, 3, 44, 3, 45, 3, 45, 3, 45, 3, 45, 5, 45, 1080,
	10, 45, 3, 45, 5, 45, 1083, 10, 45, 3, 46, 3, 46, 7, 46, 1087, 10, 46,
	12, 46, 14, 46, 1090, 11, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 7, 46,
	1097, 10, 46, 12, 46, 14, 46, 1100, 11, 46, 3, 46, 3, 46, 5, 46, 1104,
	10, 46, 3, 47, 3, 47, 3, 47, 7, 47, 1109, 10, 47, 12, 47, 14, 47, 1112,
	11, 47, 3, 47, 3, 47, 3, 48, 3, 48, 3, 48, 3, 48, 7, 48, 1120, 10, 48,
	12, 48, 14, 48, 1123, 11, 48, 3, 48, 3, 48, 3, 49, 3, 49, 3, 49, 7, 49,
	1130, 10, 49, 12, 49, 14, 49, 1133, 11, 49, 3, 49, 3, 49, 3, 50, 3, 50,
	3, 50, 3, 50, 3, 50, 7, 50, 1142, 10, 50, 12, 50, 14, 50, 1145, 11, 50,
	3, 50, 3, 50, 5, 50, 1149, 10, 50, 3, 50, 3, 50, 3, 51, 3, 51, 3, 51, 3,
	51, 5, 51, 1157, 10, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 7, 51, 1164,
	10, 51, 12, 51, 14, 51, 1167, 11, 51, 3, 51, 3, 51, 5, 51, 1171, 10, 51,
	3, 51, 3, 51, 3, 52, 3, 52, 3, 52, 3, 52, 7, 52, 1179, 10, 52, 12, 52,
	14, 52, 1182, 11, 52, 3, 52, 3, 52, 5, 52, 1186, 10, 52, 3, 52, 3, 52,
	3, 53, 3, 53, 3, 53, 7, 53, 1193, 10, 53, 12, 53, 14, 53, 1196, 11, 53,
	3, 53, 3, 53, 3, 54, 3, 54, 3, 54, 3, 54, 3, 55, 3, 55, 3, 55, 3, 55, 3,
	56, 3, 56, 3, 56, 7, 56, 1211, 10, 56, 12, 56, 14, 56, 1214, 11, 56, 3,
	56, 3, 56, 7, 56, 1218, 10, 56, 12, 56, 14, 56, 1221, 11, 56, 3, 56, 3,
	56, 3, 56, 3, 56, 3, 56, 3, 56, 7, 56, 1229, 10, 56, 12, 56, 14, 56, 1232,
	11, 56, 3, 56, 3, 56, 6, 56, 1236, 10, 56, 13, 56, 14, 56, 1237, 3, 56,
	3, 56, 5, 56, 1242, 10, 56, 3, 57, 3, 57, 3, 57, 5, 57, 1247, 10, 57, 3,
	57, 3, 57, 3, 57, 3, 57, 3, 58, 3, 58, 3, 58, 3, 58, 5, 58, 1257, 10, 58,
	3, 58, 3, 58, 7, 58, 1261, 10, 58, 12, 58, 14, 58, 1264, 11, 58, 3, 58,
	3, 58, 3, 59, 3, 59, 3, 59, 7, 59, 1271, 10, 59, 12, 59, 14, 59, 1274,
	11, 59, 3, 59, 3, 59, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 3, 61, 3, 61,
	3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 5, 61, 1293, 10,
	61, 3, 62, 3, 62, 5, 62, 1297, 10, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 63,
	3, 63, 3, 63, 3, 63, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3,
	64, 3, 64, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 3, 66, 3, 66, 3, 66, 3, 67,
	3, 67, 3, 67, 3, 67, 7, 67, 1328, 10, 67, 12, 67, 14, 67, 1331, 11, 67,
	3, 68, 3, 68, 5, 68, 1335, 10, 68, 3, 69, 3, 69, 3, 69, 3, 69, 7, 69, 1341,
	10, 69, 12, 69, 14, 69, 1344, 11, 69, 3, 70, 3, 70, 5, 70, 1348, 10, 70,
	3, 70, 3, 70, 3, 70, 3, 70, 3, 70, 3, 70, 5, 70, 1356, 10, 70, 3, 71, 3,
	71, 3, 71, 3, 71, 3, 71, 3, 71, 3, 71, 3, 71, 3, 71, 3, 71, 3, 71, 3, 71,
	3, 71, 3, 71, 3, 71, 3, 71, 3, 71, 3, 71, 3, 71, 3, 71, 3, 71, 5, 71, 1379,
	10, 71, 3, 71, 3, 71, 3, 71, 3, 71, 3, 71, 3, 71, 3, 71, 3, 71, 3, 71,
	3, 71, 3, 71, 3, 71, 3, 71, 3, 71, 3, 71, 3, 71, 3, 71, 3, 71, 3, 71, 3,
	71, 3, 71, 3, 71, 3, 71, 3, 71, 3, 71, 3, 71, 3, 71, 3, 71, 3, 71, 3, 71,
	3, 71, 3, 71, 3, 71, 3, 71, 3, 71, 3, 71, 3, 71, 3, 71, 3, 71, 3, 71, 3,
	71, 3, 71, 7, 71, 1423, 10, 71, 12, 71, 14, 71, 1426, 11, 71, 3, 72, 3,
	72, 5, 72, 1430, 10, 72, 3, 72, 3, 72, 5, 72, 1434, 10, 72, 3, 72, 3, 72,
	3, 72, 5, 72, 1439, 10, 72, 3, 73, 3, 73, 3, 73, 3, 73, 3, 73, 7, 73, 1446,
	10, 73, 12, 73, 14, 73, 1449, 11, 73, 5, 73, 1451, 10, 73, 3, 73, 3, 73,
	3, 74, 3, 74, 3, 74, 3, 74, 7, 74, 1459, 10, 74, 12, 74, 14, 74, 1462,
	11, 74, 3, 75, 3, 75, 5, 75, 1466, 10, 75, 3, 76, 3, 76, 3, 76, 3, 76,
	5, 76, 1472, 10, 76, 3, 76, 3, 76, 3, 76, 3, 77, 3, 77, 3, 77, 3, 77, 7,
	77, 1481, 10, 77, 12, 77, 14, 77, 1484, 11, 77, 3, 78, 3, 78, 3, 78, 5,
	78, 1489, 10, 78, 3, 79, 3, 79, 5, 79, 1493, 10, 79, 3, 80, 3, 80, 3, 80,
	3, 80, 3, 80, 3, 81, 3, 81, 3, 81, 3, 81, 5, 81, 1504, 10, 81, 3, 81, 3,
	81, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 5, 82, 1514, 10, 82, 3, 82,
	3, 82, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 5, 83, 1523, 10, 83, 3, 83, 5,
	83, 1526, 10, 83, 3, 83, 5, 83, 1529, 10, 83, 3, 83, 3, 83, 3, 84, 3, 84,
	3, 84, 3, 84, 3, 85, 3, 85, 3, 85, 3, 85, 3, 85, 3, 86, 3, 86, 3, 86, 7,
	86, 1545, 10, 86, 12, 86, 14, 86, 1548, 11, 86, 3, 86, 3, 86, 3, 87, 3,
	87, 3, 87, 3, 87, 3, 88, 3, 88, 3, 88, 7, 88, 1559, 10, 88, 12, 88, 14,
	88, 1562, 11, 88, 3, 88, 3, 88, 3, 89, 3, 89, 3, 89, 3, 89, 3, 89, 7, 89,
	1571, 10, 89, 12, 89, 14, 89, 1574, 11, 89, 3, 90, 3, 90, 3, 90, 7, 90,
	1579, 10, 90, 12, 90, 14, 90, 1582, 11, 90, 3, 90, 3, 90, 3, 91, 3, 91,
	3, 91, 3, 92, 3, 92, 3, 92, 3, 93, 3, 93, 3, 93, 3, 93, 7, 93, 1596, 10,
	93, 12, 93, 14, 93, 1599, 11, 93, 3, 93, 3, 93, 3, 93, 3, 94, 3, 94, 3,
	94, 3, 94, 3, 94, 7, 94, 1609, 10, 94, 12, 94, 14, 94, 1612, 11, 94, 3,
	94, 3, 94, 3, 94, 3, 95, 3, 95, 3, 95, 3, 95, 7, 95, 1621, 10, 95, 12,
	95, 14, 95, 1624, 11, 95, 3, 95, 3, 95, 3, 95, 3, 96, 3, 96, 3, 96, 3,
	96, 3, 97, 3, 97, 3, 97, 5, 97, 1636, 10, 97, 3, 98, 3, 98, 3, 98, 3, 98,
	3, 99, 3, 99, 3, 99, 3, 100, 3, 100, 3, 100, 3, 101, 3, 101, 3, 101, 5,
	101, 1651, 10, 101, 7, 101, 1653, 10, 101, 12, 101, 14, 101, 1656, 11,
	101, 3, 101, 3, 101, 3, 102, 3, 102, 3, 102, 5, 102, 1663, 10, 102, 3,
	102, 3, 102, 7, 102, 1667, 10, 102, 12, 102, 14, 102, 1670, 11, 102, 3,
	103, 3, 103, 3, 103, 3, 103, 3, 103, 7, 103, 1677, 10, 103, 12, 103, 14,
	103, 1680, 11, 103, 3, 103, 3, 103, 3, 104, 3, 104, 5, 104, 1686, 10, 104,
	3, 105, 3, 105, 3, 105, 3, 105, 3, 105, 7, 105, 1693, 10, 105, 12, 105,
	14, 105, 1696, 11, 105, 3, 105, 3, 105, 3, 106, 3, 106, 5, 106, 1702, 10,
	106, 3, 106, 3, 106, 7, 106, 1706, 10, 106, 12, 106, 14, 106, 1709, 11,
	106, 3, 106, 3, 106, 3, 106, 3, 106, 3, 106, 5, 106, 1716, 10, 106, 3,
	106, 3, 106, 7, 106, 1720, 10, 106, 12, 106, 14, 106, 1723, 11, 106, 3,
	106, 7, 106, 1726, 10, 106, 12, 106, 14, 106, 1729, 11, 106, 3, 106, 3,
	106, 5, 106, 1733, 10, 106, 3, 107, 3, 107, 3, 107, 3, 107, 7, 107, 1739,
	10, 107, 12, 107, 14, 107, 1742, 11, 107, 3, 108, 3, 108, 3, 109, 3, 109,
	3, 109, 3, 109, 7, 109, 1750, 10, 109, 12, 109, 14, 109, 1753, 11, 109,
	3, 109, 3, 109, 3, 109, 3, 110, 3, 110, 3, 110, 3, 110, 3, 111, 3, 111,
	3, 111, 3, 111, 5, 111, 1766, 10, 111, 3, 111, 7, 111, 1769, 10, 111, 12,
	111, 14, 111, 1772, 11, 111, 3, 111, 3, 111, 3, 111, 3, 111, 7, 111, 1778,
	10, 111, 12, 111, 14, 111, 1781, 11, 111, 3, 111, 3, 111, 3, 112, 3, 112,
	3, 112, 3, 113, 3, 113, 3, 113, 3, 114, 3, 114, 3, 114, 3, 115, 3, 115,
	3, 115, 5, 115, 1797, 10, 115, 3, 115, 7, 115, 1800, 10, 115, 12, 115,
	14, 115, 1803, 11, 115, 3, 115, 3, 115, 5, 115, 1807, 10, 115, 3, 115,
	3, 115, 3, 116, 3, 116, 3, 116, 3, 116, 3, 117, 3, 117, 3, 117, 5, 117,
	1818, 10, 117, 5, 117, 1820, 10, 117, 3, 117, 3, 117, 5, 117, 1824, 10,
	117, 3, 118, 3, 118, 6, 118, 1828, 10, 118, 13, 118, 14, 118, 1829, 3,
	119, 3, 119, 3, 119, 3, 120, 3, 120, 7, 120, 1837, 10, 120, 12, 120, 14,
	120, 1840, 11, 120, 3, 120, 3, 120, 3, 121, 3, 121, 3, 121, 7, 121, 1847,
	10, 121, 12, 121, 14, 121, 1850, 11, 121, 3, 121, 3, 121, 3, 121, 3, 122,
	3, 122, 3, 122, 3, 122, 3, 122, 7, 122, 1860, 10, 122, 12, 122, 14, 122,
	1863, 11, 122, 3, 122, 3, 122, 3, 122, 3, 123, 3, 123, 3, 123, 7, 123,
	1871, 10, 123, 12, 123, 14, 123, 1874, 11, 123, 3, 123, 3, 123, 3, 123,
	3, 124, 3, 124, 3, 124, 6, 124, 1882, 10, 124, 13, 124, 14, 124, 1883,
	3, 125, 3, 125, 3, 125, 3, 125, 7, 125, 1890, 10, 125, 12, 125, 14, 125,
	1893, 11, 125, 3, 125, 3, 125, 7, 125, 1897, 10, 125, 12, 125, 14, 125,
	1900, 11, 125, 3, 125, 3, 125, 3, 125, 3, 126, 3, 126, 3, 126, 3, 126,
	3, 126, 3, 126, 7, 126, 1911, 10, 126, 12, 126, 14, 126, 1914, 11, 126,
	3, 126, 3, 126, 3, 126, 5, 126, 1919, 10, 126, 3, 127, 3, 127, 3, 127,
	5, 127, 1924, 10, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 3, 127,
	7, 127, 1932, 10, 127, 12, 127, 14, 127, 1935, 11, 127, 3, 127, 3, 127,
	3, 127, 5, 127, 1940, 10, 127, 3, 128, 3, 128, 3, 128, 7, 128, 1945, 10,
	128, 12, 128, 14, 128, 1948, 11, 128, 3, 128, 3, 128, 3, 128, 3, 129, 3,
	129, 3, 129, 3, 129, 7, 129, 1957, 10, 129, 12, 129, 14, 129, 1960, 11,
	129, 3, 129, 3, 129, 3, 129, 7, 129, 1965, 10, 129, 12, 129, 14, 129, 1968,
	11, 129, 3, 129, 3, 129, 3, 129, 3, 129, 3, 129, 3, 129, 7, 129, 1976,
	10, 129, 12, 129, 14, 129, 1979, 11, 129, 3, 129, 3, 129, 3, 129, 6, 129,
	1984, 10, 129, 13, 129, 14, 129, 1985, 5, 129, 1988, 10, 129, 3, 130, 3,
	130, 3, 130, 3, 130, 5, 130, 1994, 10, 130, 3, 130, 3, 130, 7, 130, 1998,
	10, 130, 12, 130, 14, 130, 2001, 11, 130, 3, 130, 3, 130, 3, 130, 3, 131,
	3, 131, 3, 131, 3, 131, 3, 131, 3, 131, 3, 131, 3, 131, 5, 131, 2014, 10,
	131, 3, 132, 3, 132, 3, 132, 3, 132, 3, 133, 3, 133, 3, 134, 3, 134, 3,
	134, 3, 134, 3, 134, 3, 134, 3, 134, 3, 134, 3, 134, 3, 134, 3, 134, 5,
	134, 2033, 10, 134, 3, 135, 3, 135, 3, 135, 5, 135, 2038, 10, 135, 3, 136,
	3, 136, 3, 136, 5, 136, 2043, 10, 136, 3, 137, 3, 137, 3, 137, 3, 138,
	3, 138, 3, 138, 3, 138, 3, 138, 3, 139, 3, 139, 3, 139, 3, 139, 3, 139,
	3, 140, 3, 140, 3, 140, 3, 140, 3, 140, 3, 141, 3, 141, 3, 141, 3, 141,
	3, 141, 3, 141, 3, 142, 3, 142, 3, 142, 3, 142, 3, 142, 3, 142, 3, 143,
	3, 143, 3, 143, 3, 143, 3, 143, 3, 143, 3, 144, 3, 144, 3, 144, 3, 144,
	3, 144, 3, 144, 3, 145, 3, 145, 5, 145, 2089, 10, 145, 3, 146, 3, 146,
	3, 146, 3, 146, 5, 146, 2095, 10, 146, 3, 146, 7, 146, 2098, 10, 146, 12,
	146, 14, 146, 2101, 11, 146, 3, 146, 3, 146, 3, 146, 3, 147, 3, 147, 3,
	148, 5, 148, 2109, 10, 148, 3, 148, 3, 148, 3, 148, 7, 148, 2114, 10, 148,
	12, 148, 14, 148, 2117, 11, 148, 3, 149, 3, 149, 3, 149, 3, 149, 3, 149,
	3, 149, 3, 149, 3, 149, 3, 149, 3, 149, 3, 149, 3, 149, 3, 149, 3, 149,
	3, 149, 3, 149, 5, 149, 2135, 10, 149, 3, 150, 3, 150, 3, 151, 3, 151,
	5, 151, 2141, 10, 151, 3, 152, 3, 152, 3, 152, 3, 152, 3, 152, 5, 152,
	2148, 10, 152, 3, 152, 5, 152, 2151, 10, 152, 3, 153, 3, 153, 3, 153, 3,
	153, 3, 154, 3, 154, 3, 154, 3, 154, 3, 155, 3, 155, 3, 155, 3, 155, 3,
	156, 3, 156, 3, 156, 3, 156, 3, 157, 3, 157, 3, 157, 3, 157, 3, 158, 3,
	158, 3, 158, 3, 158, 3, 159, 3, 159, 3, 160, 3, 160, 5, 160, 2181, 10,
	160, 3, 161, 3, 161, 5, 161, 2185, 10, 161, 3, 162, 3, 162, 5, 162, 2189,
	10, 162, 3, 163, 3, 163, 5, 163, 2193, 10, 163, 3, 164, 3, 164, 5, 164,
	2197, 10, 164, 3, 165, 3, 165, 5, 165, 2201, 10, 165, 3, 166, 3, 166, 3,
	167, 3, 167, 3, 168, 3, 168, 3, 168, 5, 168, 2210, 10, 168, 3, 169, 3,
	169, 3, 170, 3, 170, 7, 170, 2216, 10, 170, 12, 170, 14, 170, 2219, 11,
	170, 3, 171, 3, 171, 7, 171, 2223, 10, 171, 12, 171, 14, 171, 2226, 11,
	171, 3, 172, 7, 172, 2229, 10, 172, 12, 172, 14, 172, 2232, 11, 172, 3,
	172, 3, 172, 3, 173, 3, 173, 3, 174, 3, 174, 3, 175, 3, 175, 7, 175, 2242,
	10, 175, 12, 175, 14, 175, 2245, 11, 175, 3, 176, 7, 176, 2248, 10, 176,
	12, 176, 14, 176, 2251, 11, 176, 3, 176, 3, 176, 3, 176, 2, 3, 140, 177,
	2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38,
	40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74,
	76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108,
	110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138,
	140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168,
	170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198,
	200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228,
	230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258,
	260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288,
	290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318,
	320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348,
	350, 2, 13, 4, 2, 28, 28, 40, 40, 4, 2, 24, 24, 26, 26, 3, 2, 18, 19, 3,
	2, 6, 7, 5, 2, 13, 16, 31, 32, 52, 53, 4, 2, 8, 12, 28, 28, 3, 2, 47, 48,
	3, 2, 49, 51, 3, 2, 3, 5, 3, 2, 80, 81, 4, 2, 33, 33, 85, 85, 2, 2442,
	2, 353, 3, 2, 2, 2, 4, 360, 3, 2, 2, 2, 6, 379, 3, 2, 2, 2, 8, 393, 3,
	2, 2, 2, 10, 415, 3, 2, 2, 2, 12, 417, 3, 2, 2, 2, 14, 422, 3, 2, 2, 2,
	16, 435, 3, 2, 2, 2, 18, 469, 3, 2, 2, 2, 20, 480, 3, 2, 2, 2, 22, 495,
	3, 2, 2, 2, 24, 506, 3, 2, 2, 2, 26, 541, 3, 2, 2, 2, 28, 570, 3, 2, 2,
	2, 30, 588, 3, 2, 2, 2, 32, 590, 3, 2, 2, 2, 34, 595, 3, 2, 2, 2, 36, 630,
	3, 2, 2, 2, 38, 645, 3, 2, 2, 2, 40, 679, 3, 2, 2, 2, 42, 695, 3, 2, 2,
	2, 44, 702, 3, 2, 2, 2, 46, 724, 3, 2, 2, 2, 48, 752, 3, 2, 2, 2, 50, 755,
	3, 2, 2, 2, 52, 770, 3, 2, 2, 2, 54, 805, 3, 2, 2, 2, 56, 824, 3, 2, 2,
	2, 58, 863, 3, 2, 2, 2, 60, 898, 3, 2, 2, 2, 62, 901, 3, 2, 2, 2, 64, 916,
	3, 2, 2, 2, 66, 938, 3, 2, 2, 2, 68, 970, 3, 2, 2, 2, 70, 976, 3, 2, 2,
	2, 72, 982, 3, 2, 2, 2, 74, 987, 3, 2, 2, 2, 76, 992, 3, 2, 2, 2, 78, 1003,
	3, 2, 2, 2, 80, 1014, 3, 2, 2, 2, 82, 1046, 3, 2, 2, 2, 84, 1048, 3, 2,
	2, 2, 86, 1057, 3, 2, 2, 2, 88, 1082, 3, 2, 2, 2, 90, 1103, 3, 2, 2, 2,
	92, 1105, 3, 2, 2, 2, 94, 1115, 3, 2, 2, 2, 96, 1126, 3, 2, 2, 2, 98, 1136,
	3, 2, 2, 2, 100, 1156, 3, 2, 2, 2, 102, 1174, 3, 2, 2, 2, 104, 1189, 3,
	2, 2, 2, 106, 1199, 3, 2, 2, 2, 108, 1203, 3, 2, 2, 2, 110, 1241, 3, 2,
	2, 2, 112, 1243, 3, 2, 2, 2, 114, 1256, 3, 2, 2, 2, 116, 1267, 3, 2, 2,
	2, 118, 1277, 3, 2, 2, 2, 120, 1292, 3, 2, 2, 2, 122, 1294, 3, 2, 2, 2,
	124, 1302, 3, 2, 2, 2, 126, 1306, 3, 2, 2, 2, 128, 1315, 3, 2, 2, 2, 130,
	1320, 3, 2, 2, 2, 132, 1323, 3, 2, 2, 2, 134, 1334, 3, 2, 2, 2, 136, 1336,
	3, 2, 2, 2, 138, 1355, 3, 2, 2, 2, 140, 1378, 3, 2, 2, 2, 142, 1427, 3,
	2, 2, 2, 144, 1440, 3, 2, 2, 2, 146, 1454, 3, 2, 2, 2, 148, 1463, 3, 2,
	2, 2, 150, 1467, 3, 2, 2, 2, 152, 1476, 3, 2, 2, 2, 154, 1485, 3, 2, 2,
	2, 156, 1492, 3, 2, 2, 2, 158, 1494, 3, 2, 2, 2, 160, 1499, 3, 2, 2, 2,
	162, 1507, 3, 2, 2, 2, 164, 1517, 3, 2, 2, 2, 166, 1532, 3, 2, 2, 2, 168,
	1536, 3, 2, 2, 2, 170, 1546, 3, 2, 2, 2, 172, 1551, 3, 2, 2, 2, 174, 1560,
	3, 2, 2, 2, 176, 1565, 3, 2, 2, 2, 178, 1580, 3, 2, 2, 2, 180, 1585, 3,
	2, 2, 2, 182, 1588, 3, 2, 2, 2, 184, 1591, 3, 2, 2, 2, 186, 1603, 3, 2,
	2, 2, 188, 1616, 3, 2, 2, 2, 190, 1628, 3, 2, 2, 2, 192, 1635, 3, 2, 2,
	2, 194, 1637, 3, 2, 2, 2, 196, 1641, 3, 2, 2, 2, 198, 1644, 3, 2, 2, 2,
	200, 1654, 3, 2, 2, 2, 202, 1659, 3, 2, 2, 2, 204, 1671, 3, 2, 2, 2, 206,
	1683, 3, 2, 2, 2, 208, 1687, 3, 2, 2, 2, 210, 1732, 3, 2, 2, 2, 212, 1734,
	3, 2, 2, 2, 214, 1743, 3, 2, 2, 2, 216, 1745, 3, 2, 2, 2, 218, 1757, 3,
	2, 2, 2, 220, 1761, 3, 2, 2, 2, 222, 1784, 3, 2, 2, 2, 224, 1787, 3, 2,
	2, 2, 226, 1790, 3, 2, 2, 2, 228, 1793, 3, 2, 2, 2, 230, 1810, 3, 2, 2,
	2, 232, 1819, 3, 2, 2, 2, 234, 1825, 3, 2, 2, 2, 236, 1831, 3, 2, 2, 2,
	238, 1834, 3, 2, 2, 2, 240, 1843, 3, 2, 2, 2, 242, 1854, 3, 2, 2, 2, 244,
	1867, 3, 2, 2, 2, 246, 1878, 3, 2, 2, 2, 248, 1885, 3, 2, 2, 2, 250, 1904,
	3, 2, 2, 2, 252, 1923, 3, 2, 2, 2, 254, 1941, 3, 2, 2, 2, 256, 1987, 3,
	2, 2, 2, 258, 1993, 3, 2, 2, 2, 260, 2013, 3, 2, 2, 2, 262, 2015, 3, 2,
	2, 2, 264, 2019, 3, 2, 2, 2, 266, 2032, 3, 2, 2, 2, 268, 2037, 3, 2, 2,
	2, 270, 2039, 3, 2, 2, 2, 272, 2044, 3, 2, 2, 2, 274, 2047, 3, 2, 2, 2,
	276, 2052, 3, 2, 2, 2, 278, 2057, 3, 2, 2, 2, 280, 2062, 3, 2, 2, 2, 282,
	2068, 3, 2, 2, 2, 284, 2074, 3, 2, 2, 2, 286, 2080, 3, 2, 2, 2, 288, 2086,
	3, 2, 2, 2, 290, 2090, 3, 2, 2, 2, 292, 2105, 3, 2, 2, 2, 294, 2108, 3,
	2, 2, 2, 296, 2134, 3, 2, 2, 2, 298, 2136, 3, 2, 2, 2, 300, 2140, 3, 2,
	2, 2, 302, 2147, 3, 2, 2, 2, 304, 2152, 3, 2, 2, 2, 306, 2156, 3, 2, 2,
	2, 308, 2160, 3, 2, 2, 2, 310, 2164, 3, 2, 2, 2, 312, 2168, 3, 2, 2, 2,
	314, 2172, 3, 2, 2, 2, 316, 2176, 3, 2, 2, 2, 318, 2178, 3, 2, 2, 2, 320,
	2182, 3, 2, 2, 2, 322, 2186, 3, 2, 2, 2, 324, 2190, 3, 2, 2, 2, 326, 2194,
	3, 2, 2, 2, 328, 2198, 3, 2, 2, 2, 330, 2202, 3, 2, 2, 2, 332, 2204, 3,
	2, 2, 2, 334, 2209, 3, 2, 2, 2, 336, 2211, 3, 2, 2, 2, 338, 2213, 3, 2,
	2, 2, 340, 2220, 3, 2, 2, 2, 342, 2230, 3, 2, 2, 2, 344, 2235, 3, 2, 2,
	2, 346, 2237, 3, 2, 2, 2, 348, 2239, 3, 2, 2, 2, 350, 2249, 3, 2, 2, 2,
	352, 354, 5, 4, 3, 2, 353, 352, 3, 2, 2, 2, 354, 355, 3, 2, 2, 2, 355,
	353, 3, 2, 2, 2, 355, 356, 3, 2, 2, 2, 356, 3, 3, 2, 2, 2, 357, 359, 7,
	85, 2, 2, 358, 357, 3, 2, 2, 2, 359, 362, 3, 2, 2, 2, 360, 358, 3, 2, 2,
	2, 360, 361, 3, 2, 2, 2, 361, 364, 3, 2, 2, 2, 362, 360, 3, 2, 2, 2, 363,
	365, 5, 148, 75, 2, 364, 363, 3, 2, 2, 2, 364, 365, 3, 2, 2, 2, 365, 366,
	3, 2, 2, 2, 366, 370, 5, 6, 4, 2, 367, 369, 7, 85, 2, 2, 368, 367, 3, 2,
	2, 2, 369, 372, 3, 2, 2, 2, 370, 368, 3, 2, 2, 2, 370, 371, 3, 2, 2, 2,
	371, 376, 3, 2, 2, 2, 372, 370, 3, 2, 2, 2, 373, 375, 5, 10, 6, 2, 374,
	373, 3, 2, 2, 2, 375, 378, 3, 2, 2, 2, 376, 374, 3, 2, 2, 2, 376, 377,
	3, 2, 2, 2, 377, 5, 3, 2, 2, 2, 378, 376, 3, 2, 2, 2, 379, 380, 7, 78,
	2, 2, 380, 386, 5, 340, 171, 2, 381, 385, 5, 8, 5, 2, 382, 385, 5, 12,
	7, 2, 383, 385, 7, 85, 2, 2, 384, 381, 3, 2, 2, 2, 384, 382, 3, 2, 2, 2,
	384, 383, 3, 2, 2, 2, 385, 388, 3, 2, 2, 2, 386, 384, 3, 2, 2, 2, 386,
	387, 3, 2, 2, 2, 387, 389, 3, 2, 2, 2, 388, 386, 3, 2, 2, 2, 389, 390,
	5, 342, 172, 2, 390, 391, 5, 336, 169, 2, 391, 7, 3, 2, 2, 2, 392, 394,
	5, 148, 75, 2, 393, 392, 3, 2, 2, 2, 393, 394, 3, 2, 2, 2, 394, 401, 3,
	2, 2, 2, 395, 397, 5, 332, 167, 2, 396, 398, 5, 328, 165, 2, 397, 396,
	3, 2, 2, 2, 397, 398, 3, 2, 2, 2, 398, 399, 3, 2, 2, 2, 399, 400, 7, 24,
	2, 2, 400, 402, 3, 2, 2, 2, 401, 395, 3, 2, 2, 2, 401, 402, 3, 2, 2, 2,
	402, 403, 3, 2, 2, 2, 403, 404, 7, 78, 2, 2, 404, 405, 5, 336, 169, 2,
	405, 9, 3, 2, 2, 2, 406, 416, 5, 24, 13, 2, 407, 416, 5, 20, 11, 2, 408,
	416, 5, 22, 12, 2, 409, 416, 5, 26, 14, 2, 410, 416, 5, 58, 30, 2, 411,
	416, 5, 46, 24, 2, 412, 416, 5, 16, 9, 2, 413, 416, 5, 14, 8, 2, 414, 416,
	7, 85, 2, 2, 415, 406, 3, 2, 2, 2, 415, 407, 3, 2, 2, 2, 415, 408, 3, 2,
	2, 2, 415, 409, 3, 2, 2, 2, 415, 410, 3, 2, 2, 2, 415, 411, 3, 2, 2, 2,
	415, 412, 3, 2, 2, 2, 415, 413, 3, 2, 2, 2, 415, 414, 3, 2, 2, 2, 416,
	11, 3, 2, 2, 2, 417, 418, 5, 332, 167, 2, 418, 419, 7, 24, 2, 2, 419, 420,
	5, 268, 135, 2, 420, 421, 5, 336, 169, 2, 421, 13, 3, 2, 2, 2, 422, 423,
	5, 332, 167, 2, 423, 427, 9, 2, 2, 2, 424, 426, 7, 85, 2, 2, 425, 424,
	3, 2, 2, 2, 426, 429, 3, 2, 2, 2, 427, 425, 3, 2, 2, 2, 427, 428, 3, 2,
	2, 2, 428, 430, 3, 2, 2, 2, 429, 427, 3, 2, 2, 2, 430, 431, 7, 45, 2, 2,
	431, 432, 5, 268, 135, 2, 432, 433, 5, 336, 169, 2, 433, 15, 3, 2, 2, 2,
	434, 436, 5, 148, 75, 2, 435, 434, 3, 2, 2, 2, 435, 436, 3, 2, 2, 2, 436,
	437, 3, 2, 2, 2, 437, 438, 5, 332, 167, 2, 438, 442, 9, 2, 2, 2, 439, 441,
	7, 85, 2, 2, 440, 439, 3, 2, 2, 2, 441, 444, 3, 2, 2, 2, 442, 440, 3, 2,
	2, 2, 442, 443, 3, 2, 2, 2, 443, 445, 3, 2, 2, 2, 444, 442, 3, 2, 2, 2,
	445, 446, 7, 45, 2, 2, 446, 457, 7, 41, 2, 2, 447, 449, 7, 24, 2, 2, 448,
	450, 7, 41, 2, 2, 449, 448, 3, 2, 2, 2, 449, 450, 3, 2, 2, 2, 450, 451,
	3, 2, 2, 2, 451, 455, 5, 332, 167, 2, 452, 453, 5, 338, 170, 2, 453, 454,
	5, 332, 167, 2, 454, 456, 3, 2, 2, 2, 455, 452, 3, 2, 2, 2, 455, 456, 3,
	2, 2, 2, 456, 458, 3, 2, 2, 2, 457, 447, 3, 2, 2, 2, 457, 458, 3, 2, 2,
	2, 458, 459, 3, 2, 2, 2, 459, 463, 5, 340, 171, 2, 460, 462, 5, 18, 10,
	2, 461, 460, 3, 2, 2, 2, 462, 465, 3, 2, 2, 2, 463, 461, 3, 2, 2, 2, 463,
	464, 3, 2, 2, 2, 464, 466, 3, 2, 2, 2, 465, 463, 3, 2, 2, 2, 466, 467,
	5, 342, 172, 2, 467, 468, 5, 336, 169, 2, 468, 17, 3, 2, 2, 2, 469, 475,
	5, 332, 167, 2, 470, 472, 7, 28, 2, 2, 471, 473, 5, 322, 162, 2, 472, 471,
	3, 2, 2, 2, 472, 473, 3, 2, 2, 2, 473, 474, 3, 2, 2, 2, 474, 476, 5, 264,
	133, 2, 475, 470, 3, 2, 2, 2, 475, 476, 3, 2, 2, 2, 476, 477, 3, 2, 2,
	2, 477, 478, 5, 336, 169, 2, 478, 19, 3, 2, 2, 2, 479, 481, 5, 148, 75,
	2, 480, 479, 3, 2, 2, 2, 480, 481, 3, 2, 2, 2, 481, 482, 3, 2, 2, 2, 482,
	490, 5, 332, 167, 2, 483, 484, 7, 28, 2, 2, 484, 491, 5, 140, 71, 2, 485,
	488, 5, 268, 135, 2, 486, 487, 7, 28, 2, 2, 487, 489, 5, 140, 71, 2, 488,
	486, 3, 2, 2, 2, 488, 489, 3, 2, 2, 2, 489, 491, 3, 2, 2, 2, 490, 483,
	3, 2, 2, 2, 490, 485, 3, 2, 2, 2, 491, 492, 3, 2, 2, 2, 492, 493, 5, 336,
	169, 2, 493, 21, 3, 2, 2, 2, 494, 496, 5, 148, 75, 2, 495, 494, 3, 2, 2,
	2, 495, 496, 3, 2, 2, 2, 496, 497, 3, 2, 2, 2, 497, 499, 5, 332, 167, 2,
	498, 500, 5, 268, 135, 2, 499, 498, 3, 2, 2, 2, 499, 500, 3, 2, 2, 2, 500,
	501, 3, 2, 2, 2, 501, 502, 7, 40, 2, 2, 502, 503, 5, 140, 71, 2, 503, 504,
	5, 336, 169, 2, 504, 23, 3, 2, 2, 2, 505, 507, 5, 148, 75, 2, 506, 505,
	3, 2, 2, 2, 506, 507, 3, 2, 2, 2, 507, 508, 3, 2, 2, 2, 508, 510, 5, 332,
	167, 2, 509, 511, 5, 204, 103, 2, 510, 509, 3, 2, 2, 2, 510, 511, 3, 2,
	2, 2, 511, 512, 3, 2, 2, 2, 512, 513, 7, 40, 2, 2, 513, 514, 5, 344, 173,
	2, 514, 515, 5, 76, 39, 2, 515, 517, 9, 3, 2, 2, 516, 518, 7, 42, 2, 2,
	517, 516, 3, 2, 2, 2, 517, 518, 3, 2, 2, 2, 518, 522, 3, 2, 2, 2, 519,
	521, 7, 85, 2, 2, 520, 519, 3, 2, 2, 2, 521, 524, 3, 2, 2, 2, 522, 520,
	3, 2, 2, 2, 522, 523, 3, 2, 2, 2, 523, 527, 3, 2, 2, 2, 524, 522, 3, 2,
	2, 2, 525, 528, 5, 78, 40, 2, 526, 528, 7, 82, 2, 2, 527, 525, 3, 2, 2,
	2, 527, 526, 3, 2, 2, 2, 528, 529, 3, 2, 2, 2, 529, 530, 5, 346, 174, 2,
	530, 534, 5, 340, 171, 2, 531, 533, 5, 82, 42, 2, 532, 531, 3, 2, 2, 2,
	533, 536, 3, 2, 2, 2, 534, 532, 3, 2, 2, 2, 534, 535, 3, 2, 2, 2, 535,
	537, 3, 2, 2, 2, 536, 534, 3, 2, 2, 2, 537, 538, 5, 342, 172, 2, 538, 539,
	5, 336, 169, 2, 539, 25, 3, 2, 2, 2, 540, 542, 5, 148, 75, 2, 541, 540,
	3, 2, 2, 2, 541, 542, 3, 2, 2, 2, 542, 543, 3, 2, 2, 2, 543, 545, 5, 332,
	167, 2, 544, 546, 5, 204, 103, 2, 545, 544, 3, 2, 2, 2, 545, 546, 3, 2,
	2, 2, 546, 547, 3, 2, 2, 2, 547, 554, 9, 2, 2, 2, 548, 552, 7, 45, 2, 2,
	549, 553, 5, 34, 18, 2, 550, 553, 5, 28, 15, 2, 551, 553, 5, 44, 23, 2,
	552, 549, 3, 2, 2, 2, 552, 550, 3, 2, 2, 2, 552, 551, 3, 2, 2, 2, 553,
	555, 3, 2, 2, 2, 554, 548, 3, 2, 2, 2, 555, 556, 3, 2, 2, 2, 556, 554,
	3, 2, 2, 2, 556, 557, 3, 2, 2, 2, 557, 558, 3, 2, 2, 2, 558, 559, 5, 336,
	169, 2, 559, 27, 3, 2, 2, 2, 560, 562, 7, 24, 2, 2, 561, 563, 7, 41, 2,
	2, 562, 561, 3, 2, 2, 2, 562, 563, 3, 2, 2, 2, 563, 564, 3, 2, 2, 2, 564,
	568, 5, 332, 167, 2, 565, 566, 5, 338, 170, 2, 566, 567, 5, 332, 167, 2,
	567, 569, 3, 2, 2, 2, 568, 565, 3, 2, 2, 2, 568, 569, 3, 2, 2, 2, 569,
	571, 3, 2, 2, 2, 570, 560, 3, 2, 2, 2, 570, 571, 3, 2, 2, 2, 571, 572,
	3, 2, 2, 2, 572, 576, 5, 340, 171, 2, 573, 575, 5, 30, 16, 2, 574, 573,
	3, 2, 2, 2, 575, 578, 3, 2, 2, 2, 576, 574, 3, 2, 2, 2, 576, 577, 3, 2,
	2, 2, 577, 579, 3, 2, 2, 2, 578, 576, 3, 2, 2, 2, 579, 580, 5, 342, 172,
	2, 580, 29, 3, 2, 2, 2, 581, 589, 5, 32, 17, 2, 582, 589, 5, 38, 20, 2,
	583, 589, 5, 36, 19, 2, 584, 589, 5, 42, 22, 2, 585, 589, 5, 56, 29, 2,
	586, 589, 5, 54, 28, 2, 587, 589, 7, 85, 2, 2, 588, 581, 3, 2, 2, 2, 588,
	582, 3, 2, 2, 2, 588, 583, 3, 2, 2, 2, 588, 584, 3, 2, 2, 2, 588, 585,
	3, 2, 2, 2, 588, 586, 3, 2, 2, 2, 588, 587, 3, 2, 2, 2, 589, 31, 3, 2,
	2, 2, 590, 591, 7, 45, 2, 2, 591, 592, 5, 268, 135, 2, 592, 593, 5, 336,
	169, 2, 593, 33, 3, 2, 2, 2, 594, 596, 5, 148, 75, 2, 595, 594, 3, 2, 2,
	2, 595, 596, 3, 2, 2, 2, 596, 597, 3, 2, 2, 2, 597, 598, 5, 344, 173, 2,
	598, 599, 5, 76, 39, 2, 599, 606, 5, 346, 174, 2, 600, 602, 5, 344, 173,
	2, 601, 603, 5, 146, 74, 2, 602, 601, 3, 2, 2, 2, 602, 603, 3, 2, 2, 2,
	603, 604, 3, 2, 2, 2, 604, 605, 5, 346, 174, 2, 605, 607, 3, 2, 2, 2, 606,
	600, 3, 2, 2, 2, 606, 607, 3, 2, 2, 2, 607, 618, 3, 2, 2, 2, 608, 610,
	7, 24, 2, 2, 609, 611, 7, 41, 2, 2, 610, 609, 3, 2, 2, 2, 610, 611, 3,
	2, 2, 2, 611, 612, 3, 2, 2, 2, 612, 616, 5, 332, 167, 2, 613, 614, 5, 338,
	170, 2, 614, 615, 5, 332, 167, 2, 615, 617, 3, 2, 2, 2, 616, 613, 3, 2,
	2, 2, 616, 617, 3, 2, 2, 2, 617, 619, 3, 2, 2, 2, 618, 608, 3, 2, 2, 2,
	618, 619, 3, 2, 2, 2, 619, 620, 3, 2, 2, 2, 620, 624, 5, 340, 171, 2, 621,
	623, 5, 82, 42, 2, 622, 621, 3, 2, 2, 2, 623, 626, 3, 2, 2, 2, 624, 622,
	3, 2, 2, 2, 624, 625, 3, 2, 2, 2, 625, 627, 3, 2, 2, 2, 626, 624, 3, 2,
	2, 2, 627, 628, 5, 342, 172, 2, 628, 35, 3, 2, 2, 2, 629, 631, 5, 148,
	75, 2, 630, 629, 3, 2, 2, 2, 630, 631, 3, 2, 2, 2, 631, 632, 3, 2, 2, 2,
	632, 640, 5, 332, 167, 2, 633, 634, 7, 28, 2, 2, 634, 641, 5, 140, 71,
	2, 635, 638, 5, 268, 135, 2, 636, 637, 7, 28, 2, 2, 637, 639, 5, 140, 71,
	2, 638, 636, 3, 2, 2, 2, 638, 639, 3, 2, 2, 2, 639, 641, 3, 2, 2, 2, 640,
	633, 3, 2, 2, 2, 640, 635, 3, 2, 2, 2, 641, 642, 3, 2, 2, 2, 642, 643,
	5, 336, 169, 2, 643, 37, 3, 2, 2, 2, 644, 646, 5, 148, 75, 2, 645, 644,
	3, 2, 2, 2, 645, 646, 3, 2, 2, 2, 646, 647, 3, 2, 2, 2, 647, 649, 5, 332,
	167, 2, 648, 650, 5, 204, 103, 2, 649, 648, 3, 2, 2, 2, 649, 650, 3, 2,
	2, 2, 650, 651, 3, 2, 2, 2, 651, 652, 7, 40, 2, 2, 652, 653, 5, 344, 173,
	2, 653, 654, 5, 76, 39, 2, 654, 656, 9, 3, 2, 2, 655, 657, 7, 42, 2, 2,
	656, 655, 3, 2, 2, 2, 656, 657, 3, 2, 2, 2, 657, 661, 3, 2, 2, 2, 658,
	660, 7, 85, 2, 2, 659, 658, 3, 2, 2, 2, 660, 663, 3, 2, 2, 2, 661, 659,
	3, 2, 2, 2, 661, 662, 3, 2, 2, 2, 662, 666, 3, 2, 2, 2, 663, 661, 3, 2,
	2, 2, 664, 667, 5, 78, 40, 2, 665, 667, 7, 82, 2, 2, 666, 664, 3, 2, 2,
	2, 666, 665, 3, 2, 2, 2, 667, 668, 3, 2, 2, 2, 668, 669, 5, 346, 174, 2,
	669, 673, 5, 340, 171, 2, 670, 672, 5, 82, 42, 2, 671, 670, 3, 2, 2, 2,
	672, 675, 3, 2, 2, 2, 673, 671, 3, 2, 2, 2, 673, 674, 3, 2, 2, 2, 674,
	676, 3, 2, 2, 2, 675, 673, 3, 2, 2, 2, 676, 677, 5, 342, 172, 2, 677, 678,
	5, 336, 169, 2, 678, 39, 3, 2, 2, 2, 679, 684, 5, 332, 167, 2, 680, 681,
	5, 344, 173, 2, 681, 682, 5, 332, 167, 2, 682, 683, 5, 346, 174, 2, 683,
	685, 3, 2, 2, 2, 684, 680, 3, 2, 2, 2, 684, 685, 3, 2, 2, 2, 685, 686,
	3, 2, 2, 2, 686, 688, 5, 340, 171, 2, 687, 689, 5, 82, 42, 2, 688, 687,
	3, 2, 2, 2, 689, 690, 3, 2, 2, 2, 690, 688, 3, 2, 2, 2, 690, 691, 3, 2,
	2, 2, 691, 692, 3, 2, 2, 2, 692, 693, 5, 342, 172, 2, 693, 694, 5, 336,
	169, 2, 694, 41, 3, 2, 2, 2, 695, 696, 5, 332, 167, 2, 696, 697, 5, 348,
	175, 2, 697, 698, 7, 41, 2, 2, 698, 699, 5, 350, 176, 2, 699, 700, 5, 200,
	101, 2, 700, 701, 5, 336, 169, 2, 701, 43, 3, 2, 2, 2, 702, 713, 5, 268,
	135, 2, 703, 705, 7, 24, 2, 2, 704, 706, 7, 41, 2, 2, 705, 704, 3, 2, 2,
	2, 705, 706, 3, 2, 2, 2, 706, 707, 3, 2, 2, 2, 707, 711, 5, 332, 167, 2,
	708, 709, 5, 338, 170, 2, 709, 710, 5, 332, 167, 2, 710, 712, 3, 2, 2,
	2, 711, 708, 3, 2, 2, 2, 711, 712, 3, 2, 2, 2, 712, 714, 3, 2, 2, 2, 713,
	703, 3, 2, 2, 2, 713, 714, 3, 2, 2, 2, 714, 715, 3, 2, 2, 2, 715, 719,
	5, 340, 171, 2, 716, 718, 5, 48, 25, 2, 717, 716, 3, 2, 2, 2, 718, 721,
	3, 2, 2, 2, 719, 717, 3, 2, 2, 2, 719, 720, 3, 2, 2, 2, 720, 722, 3, 2,
	2, 2, 721, 719, 3, 2, 2, 2, 722, 723, 5, 342, 172, 2, 723, 45, 3, 2, 2,
	2, 724, 726, 5, 332, 167, 2, 725, 727, 5, 204, 103, 2, 726, 725, 3, 2,
	2, 2, 726, 727, 3, 2, 2, 2, 727, 728, 3, 2, 2, 2, 728, 733, 7, 8, 2, 2,
	729, 731, 5, 332, 167, 2, 730, 732, 5, 332, 167, 2, 731, 730, 3, 2, 2,
	2, 731, 732, 3, 2, 2, 2, 732, 734, 3, 2, 2, 2, 733, 729, 3, 2, 2, 2, 733,
	734, 3, 2, 2, 2, 734, 741, 3, 2, 2, 2, 735, 739, 7, 45, 2, 2, 736, 740,
	5, 34, 18, 2, 737, 740, 5, 28, 15, 2, 738, 740, 5, 44, 23, 2, 739, 736,
	3, 2, 2, 2, 739, 737, 3, 2, 2, 2, 739, 738, 3, 2, 2, 2, 740, 742, 3, 2,
	2, 2, 741, 735, 3, 2, 2, 2, 742, 743, 3, 2, 2, 2, 743, 741, 3, 2, 2, 2,
	743, 744, 3, 2, 2, 2, 744, 745, 3, 2, 2, 2, 745, 746, 5, 336, 169, 2, 746,
	47, 3, 2, 2, 2, 747, 753, 5, 52, 27, 2, 748, 753, 5, 50, 26, 2, 749, 753,
	5, 56, 29, 2, 750, 753, 5, 54, 28, 2, 751, 753, 7, 85, 2, 2, 752, 747,
	3, 2, 2, 2, 752, 748, 3, 2, 2, 2, 752, 749, 3, 2, 2, 2, 752, 750, 3, 2,
	2, 2, 752, 751, 3, 2, 2, 2, 753, 49, 3, 2, 2, 2, 754, 756, 5, 148, 75,
	2, 755, 754, 3, 2, 2, 2, 755, 756, 3, 2, 2, 2, 756, 757, 3, 2, 2, 2, 757,
	765, 5, 332, 167, 2, 758, 759, 7, 28, 2, 2, 759, 766, 5, 140, 71, 2, 760,
	763, 5, 268, 135, 2, 761, 762, 7, 28, 2, 2, 762, 764, 5, 140, 71, 2, 763,
	761, 3, 2, 2, 2, 763, 764, 3, 2, 2, 2, 764, 766, 3, 2, 2, 2, 765, 758,
	3, 2, 2, 2, 765, 760, 3, 2, 2, 2, 766, 767, 3, 2, 2, 2, 767, 768, 5, 336,
	169, 2, 768, 51, 3, 2, 2, 2, 769, 771, 5, 148, 75, 2, 770, 769, 3, 2, 2,
	2, 770, 771, 3, 2, 2, 2, 771, 772, 3, 2, 2, 2, 772, 774, 5, 332, 167, 2,
	773, 775, 5, 204, 103, 2, 774, 773, 3, 2, 2, 2, 774, 775, 3, 2, 2, 2, 775,
	776, 3, 2, 2, 2, 776, 777, 7, 40, 2, 2, 777, 778, 5, 344, 173, 2, 778,
	779, 5, 76, 39, 2, 779, 781, 9, 3, 2, 2, 780, 782, 7, 42, 2, 2, 781, 780,
	3, 2, 2, 2, 781, 782, 3, 2, 2, 2, 782, 786, 3, 2, 2, 2, 783, 785, 7, 85,
	2, 2, 784, 783, 3, 2, 2, 2, 785, 788, 3, 2, 2, 2, 786, 784, 3, 2, 2, 2,
	786, 787, 3, 2, 2, 2, 787, 791, 3, 2, 2, 2, 788, 786, 3, 2, 2, 2, 789,
	792, 5, 78, 40, 2, 790, 792, 7, 82, 2, 2, 791, 789, 3, 2, 2, 2, 791, 790,
	3, 2, 2, 2, 792, 793, 3, 2, 2, 2, 793, 794, 5, 346, 174, 2, 794, 798, 5,
	340, 171, 2, 795, 797, 5, 82, 42, 2, 796, 795, 3, 2, 2, 2, 797, 800, 3,
	2, 2, 2, 798, 796, 3, 2, 2, 2, 798, 799, 3, 2, 2, 2, 799, 801, 3, 2, 2,
	2, 800, 798, 3, 2, 2, 2, 801, 802, 5, 342, 172, 2, 802, 803, 5, 336, 169,
	2, 803, 53, 3, 2, 2, 2, 804, 806, 5, 148, 75, 2, 805, 804, 3, 2, 2, 2,
	805, 806, 3, 2, 2, 2, 806, 807, 3, 2, 2, 2, 807, 809, 7, 45, 2, 2, 808,
	810, 7, 82, 2, 2, 809, 808, 3, 2, 2, 2, 809, 810, 3, 2, 2, 2, 810, 811,
	3, 2, 2, 2, 811, 819, 5, 332, 167, 2, 812, 813, 7, 28, 2, 2, 813, 820,
	5, 140, 71, 2, 814, 817, 5, 268, 135, 2, 815, 816, 7, 28, 2, 2, 816, 818,
	5, 140, 71, 2, 817, 815, 3, 2, 2, 2, 817, 818, 3, 2, 2, 2, 818, 820, 3,
	2, 2, 2, 819, 812, 3, 2, 2, 2, 819, 814, 3, 2, 2, 2, 820, 821, 3, 2, 2,
	2, 821, 822, 5, 336, 169, 2, 822, 55, 3, 2, 2, 2, 823, 825, 5, 148, 75,
	2, 824, 823, 3, 2, 2, 2, 824, 825, 3, 2, 2, 2, 825, 826, 3, 2, 2, 2, 826,
	828, 7, 45, 2, 2, 827, 829, 7, 82, 2, 2, 828, 827, 3, 2, 2, 2, 828, 829,
	3, 2, 2, 2, 829, 830, 3, 2, 2, 2, 830, 832, 5, 332, 167, 2, 831, 833, 5,
	204, 103, 2, 832, 831, 3, 2, 2, 2, 832, 833, 3, 2, 2, 2, 833, 834, 3, 2,
	2, 2, 834, 835, 7, 40, 2, 2, 835, 836, 5, 344, 173, 2, 836, 837, 5, 76,
	39, 2, 837, 839, 9, 3, 2, 2, 838, 840, 7, 42, 2, 2, 839, 838, 3, 2, 2,
	2, 839, 840, 3, 2, 2, 2, 840, 844, 3, 2, 2, 2, 841, 843, 7, 85, 2, 2, 842,
	841, 3, 2, 2, 2, 843, 846, 3, 2, 2, 2, 844, 842, 3, 2, 2, 2, 844, 845,
	3, 2, 2, 2, 845, 849, 3, 2, 2, 2, 846, 844, 3, 2, 2, 2, 847, 850, 5, 78,
	40, 2, 848, 850, 7, 82, 2, 2, 849, 847, 3, 2, 2, 2, 849, 848, 3, 2, 2,
	2, 850, 851, 3, 2, 2, 2, 851, 852, 5, 346, 174, 2, 852, 856, 5, 340, 171,
	2, 853, 855, 5, 82, 42, 2, 854, 853, 3, 2, 2, 2, 855, 858, 3, 2, 2, 2,
	856, 854, 3, 2, 2, 2, 856, 857, 3, 2, 2, 2, 857, 859, 3, 2, 2, 2, 858,
	856, 3, 2, 2, 2, 859, 860, 5, 342, 172, 2, 860, 861, 5, 336, 169, 2, 861,
	57, 3, 2, 2, 2, 862, 864, 5, 148, 75, 2, 863, 862, 3, 2, 2, 2, 863, 864,
	3, 2, 2, 2, 864, 865, 3, 2, 2, 2, 865, 867, 5, 332, 167, 2, 866, 868, 5,
	204, 103, 2, 867, 866, 3, 2, 2, 2, 867, 868, 3, 2, 2, 2, 868, 869, 3, 2,
	2, 2, 869, 870, 9, 2, 2, 2, 870, 871, 7, 45, 2, 2, 871, 882, 7, 82, 2,
	2, 872, 874, 7, 24, 2, 2, 873, 875, 7, 41, 2, 2, 874, 873, 3, 2, 2, 2,
	874, 875, 3, 2, 2, 2, 875, 876, 3, 2, 2, 2, 876, 880, 5, 332, 167, 2, 877,
	878, 5, 338, 170, 2, 878, 879, 5, 332, 167, 2, 879, 881, 3, 2, 2, 2, 880,
	877, 3, 2, 2, 2, 880, 881, 3, 2, 2, 2, 881, 883, 3, 2, 2, 2, 882, 872,
	3, 2, 2, 2, 882, 883, 3, 2, 2, 2, 883, 884, 3, 2, 2, 2, 884, 888, 5, 340,
	171, 2, 885, 887, 5, 60, 31, 2, 886, 885, 3, 2, 2, 2, 887, 890, 3, 2, 2,
	2, 888, 886, 3, 2, 2, 2, 888, 889, 3, 2, 2, 2, 889, 891, 3, 2, 2, 2, 890,
	888, 3, 2, 2, 2, 891, 892, 5, 342, 172, 2, 892, 893, 5, 336, 169, 2, 893,
	59, 3, 2, 2, 2, 894, 899, 5, 32, 17, 2, 895, 899, 5, 64, 33, 2, 896, 899,
	5, 62, 32, 2, 897, 899, 7, 85, 2, 2, 898, 894, 3, 2, 2, 2, 898, 895, 3,
	2, 2, 2, 898, 896, 3, 2, 2, 2, 898, 897, 3, 2, 2, 2, 899, 61, 3, 2, 2,
	2, 900, 902, 5, 148, 75, 2, 901, 900, 3, 2, 2, 2, 901, 902, 3, 2, 2, 2,
	902, 903, 3, 2, 2, 2, 903, 911, 5, 332, 167, 2, 904, 905, 7, 28, 2, 2,
	905, 912, 5, 140, 71, 2, 906, 909, 5, 268, 135, 2, 907, 908, 7, 28, 2,
	2, 908, 910, 5, 140, 71, 2, 909, 907, 3, 2, 2, 2, 909, 910, 3, 2, 2, 2,
	910, 912, 3, 2, 2, 2, 911, 904, 3, 2, 2, 2, 911, 906, 3, 2, 2, 2, 912,
	913, 3, 2, 2, 2, 913, 914, 5, 336, 169, 2, 914, 63, 3, 2, 2, 2, 915, 917,
	5, 148, 75, 2, 916, 915, 3, 2, 2, 2, 916, 917, 3, 2, 2, 2, 917, 918, 3,
	2, 2, 2, 918, 920, 5, 332, 167, 2, 919, 921, 5, 204, 103, 2, 920, 919,
	3, 2, 2, 2, 920, 921, 3, 2, 2, 2, 921, 922, 3, 2, 2, 2, 922, 923, 5, 344,
	173, 2, 923, 924, 5, 76, 39, 2, 924, 926, 9, 3, 2, 2, 925, 927, 7, 42,
	2, 2, 926, 925, 3, 2, 2, 2, 926, 927, 3, 2, 2, 2, 927, 931, 3, 2, 2, 2,
	928, 930, 7, 85, 2, 2, 929, 928, 3, 2, 2, 2, 930, 933, 3, 2, 2, 2, 931,
	929, 3, 2, 2, 2, 931, 932, 3, 2, 2, 2, 932, 934, 3, 2, 2, 2, 933, 931,
	3, 2, 2, 2, 934, 935, 5, 78, 40, 2, 935, 936, 5, 346, 174, 2, 936, 937,
	5, 336, 169, 2, 937, 65, 3, 2, 2, 2, 938, 940, 5, 332, 167, 2, 939, 941,
	5, 204, 103, 2, 940, 939, 3, 2, 2, 2, 940, 941, 3, 2, 2, 2, 941, 942, 3,
	2, 2, 2, 942, 943, 7, 40, 2, 2, 943, 944, 5, 344, 173, 2, 944, 945, 5,
	76, 39, 2, 945, 947, 9, 3, 2, 2, 946, 948, 7, 42, 2, 2, 947, 946, 3, 2,
	2, 2, 947, 948, 3, 2, 2, 2, 948, 952, 3, 2, 2, 2, 949, 951, 7, 85, 2, 2,
	950, 949, 3, 2, 2, 2, 951, 954, 3, 2, 2, 2, 952, 950, 3, 2, 2, 2, 952,
	953, 3, 2, 2, 2, 953, 957, 3, 2, 2, 2, 954, 952, 3, 2, 2, 2, 955, 958,
	5, 78, 40, 2, 956, 958, 7, 82, 2, 2, 957, 955, 3, 2, 2, 2, 957, 956, 3,
	2, 2, 2, 958, 959, 3, 2, 2, 2, 959, 960, 5, 346, 174, 2, 960, 964, 5, 340,
	171, 2, 961, 963, 5, 82, 42, 2, 962, 961, 3, 2, 2, 2, 963, 966, 3, 2, 2,
	2, 964, 962, 3, 2, 2, 2, 964, 965, 3, 2, 2, 2, 965, 967, 3, 2, 2, 2, 966,
	964, 3, 2, 2, 2, 967, 968, 5, 342, 172, 2, 968, 969, 5, 336, 169, 2, 969,
	67, 3, 2, 2, 2, 970, 972, 7, 25, 2, 2, 971, 973, 5, 136, 69, 2, 972, 971,
	3, 2, 2, 2, 972, 973, 3, 2, 2, 2, 973, 974, 3, 2, 2, 2, 974, 975, 5, 336,
	169, 2, 975, 69, 3, 2, 2, 2, 976, 978, 7, 27, 2, 2, 977, 979, 5, 136, 69,
	2, 978, 977, 3, 2, 2, 2, 978, 979, 3, 2, 2, 2, 979, 980, 3, 2, 2, 2, 980,
	981, 5, 336, 169, 2, 981, 71, 3, 2, 2, 2, 982, 983, 7, 42, 2, 2, 983, 984,
	7, 25, 2, 2, 984, 985, 5, 136, 69, 2, 985, 986, 5, 336, 169, 2, 986, 73,
	3, 2, 2, 2, 987, 988, 7, 42, 2, 2, 988, 989, 7, 25, 2, 2, 989, 990, 5,
	336, 169, 2, 990, 75, 3, 2, 2, 2, 991, 993, 5, 80, 41, 2, 992, 991, 3,
	2, 2, 2, 992, 993, 3, 2, 2, 2, 993, 999, 3, 2, 2, 2, 994, 995, 5, 338,
	170, 2, 995, 996, 5, 80, 41, 2, 996, 998, 3, 2, 2, 2, 997, 994, 3, 2, 2,
	2, 998, 1001, 3, 2, 2, 2, 999, 997, 3, 2, 2, 2, 999, 1000, 3, 2, 2, 2,
	1000, 77, 3, 2, 2, 2, 1001, 999, 3, 2, 2, 2, 1002, 1004, 5, 80, 41, 2,
	1003, 1002, 3, 2, 2, 2, 1003, 1004, 3, 2, 2, 2, 1004, 1010, 3, 2, 2, 2,
	1005, 1006, 5, 338, 170, 2, 1006, 1007, 5, 80, 41, 2, 1007, 1009, 3, 2,
	2, 2, 1008, 1005, 3, 2, 2, 2, 1009, 1012, 3, 2, 2, 2, 1010, 1008, 3, 2,
	2, 2, 1010, 1011, 3, 2, 2, 2, 1011, 79, 3, 2, 2, 2, 1012, 1010, 3, 2, 2,
	2, 1013, 1015, 5, 148, 75, 2, 1014, 1013, 3, 2, 2, 2, 1014, 1015, 3, 2,
	2, 2, 1015, 1016, 3, 2, 2, 2, 1016, 1018, 5, 332, 167, 2, 1017, 1019, 9,
	4, 2, 2, 1018, 1017, 3, 2, 2, 2, 1018, 1019, 3, 2, 2, 2, 1019, 1020, 3,
	2, 2, 2, 1020, 1023, 5, 268, 135, 2, 1021, 1022, 7, 28, 2, 2, 1022, 1024,
	5, 140, 71, 2, 1023, 1021, 3, 2, 2, 2, 1023, 1024, 3, 2, 2, 2, 1024, 81,
	3, 2, 2, 2, 1025, 1047, 5, 68, 35, 2, 1026, 1047, 5, 70, 36, 2, 1027, 1047,
	5, 72, 37, 2, 1028, 1047, 5, 74, 38, 2, 1029, 1047, 5, 84, 43, 2, 1030,
	1047, 5, 90, 46, 2, 1031, 1047, 5, 98, 50, 2, 1032, 1047, 5, 100, 51, 2,
	1033, 1047, 5, 102, 52, 2, 1034, 1047, 5, 106, 54, 2, 1035, 1047, 5, 108,
	55, 2, 1036, 1047, 5, 112, 57, 2, 1037, 1047, 5, 110, 56, 2, 1038, 1047,
	5, 118, 60, 2, 1039, 1047, 5, 66, 34, 2, 1040, 1047, 5, 122, 62, 2, 1041,
	1047, 5, 124, 63, 2, 1042, 1047, 5, 126, 64, 2, 1043, 1047, 5, 128, 65,
	2, 1044, 1047, 5, 130, 66, 2, 1045, 1047, 7, 85, 2, 2, 1046, 1025, 3, 2,
	2, 2, 1046, 1026, 3, 2, 2, 2, 1046, 1027, 3, 2, 2, 2, 1046, 1028, 3, 2,
	2, 2, 1046, 1029, 3, 2, 2, 2, 1046, 1030, 3, 2, 2, 2, 1046, 1031, 3, 2,
	2, 2, 1046, 1032, 3, 2, 2, 2, 1046, 1033, 3, 2, 2, 2, 1046, 1034, 3, 2,
	2, 2, 1046, 1035, 3, 2, 2, 2, 1046, 1036, 3, 2, 2, 2, 1046, 1037, 3, 2,
	2, 2, 1046, 1038, 3, 2, 2, 2, 1046, 1039, 3, 2, 2, 2, 1046, 1040, 3, 2,
	2, 2, 1046, 1041, 3, 2, 2, 2, 1046, 1042, 3, 2, 2, 2, 1046, 1043, 3, 2,
	2, 2, 1046, 1044, 3, 2, 2, 2, 1046, 1045, 3, 2, 2, 2, 1047, 83, 3, 2, 2,
	2, 1048, 1049, 5, 140, 71, 2, 1049, 1051, 7, 41, 2, 2, 1050, 1052, 5, 86,
	44, 2, 1051, 1050, 3, 2, 2, 2, 1052, 1053, 3, 2, 2, 2, 1053, 1051, 3, 2,
	2, 2, 1053, 1054, 3, 2, 2, 2, 1054, 1055, 3, 2, 2, 2, 1055, 1056, 5, 336,
	169, 2, 1056, 85, 3, 2, 2, 2, 1057, 1063, 5, 88, 45, 2, 1058, 1059, 5,
	338, 170, 2, 1059, 1060, 5, 88, 45, 2, 1060, 1062, 3, 2, 2, 2, 1061, 1058,
	3, 2, 2, 2, 1062, 1065, 3, 2, 2, 2, 1063, 1061, 3, 2, 2, 2, 1063, 1064,
	3, 2, 2, 2, 1064, 1066, 3, 2, 2, 2, 1065, 1063, 3, 2, 2, 2, 1066, 1070,
	5, 340, 171, 2, 1067, 1069, 5, 82, 42, 2, 1068, 1067, 3, 2, 2, 2, 1069,
	1072, 3, 2, 2, 2, 1070, 1068, 3, 2, 2, 2, 1070, 1071, 3, 2, 2, 2, 1071,
	1073, 3, 2, 2, 2, 1072, 1070, 3, 2, 2, 2, 1073, 1074, 5, 342, 172, 2, 1074,
	87, 3, 2, 2, 2, 1075, 1083, 7, 82, 2, 2, 1076, 1083, 5, 140, 71, 2, 1077,
	1080, 5, 332, 167, 2, 1078, 1080, 7, 82, 2, 2, 1079, 1077, 3, 2, 2, 2,
	1079, 1078, 3, 2, 2, 2, 1080, 1081, 3, 2, 2, 2, 1081, 1083, 5, 268, 135,
	2, 1082, 1075, 3, 2, 2, 2, 1082, 1076, 3, 2, 2, 2, 1082, 1079, 3, 2, 2,
	2, 1083, 89, 3, 2, 2, 2, 1084, 1088, 5, 94, 48, 2, 1085, 1087, 5, 96, 49,
	2, 1086, 1085, 3, 2, 2, 2, 1087, 1090, 3, 2, 2, 2, 1088, 1086, 3, 2, 2,
	2, 1088, 1089, 3, 2, 2, 2, 1089, 1091, 3, 2, 2, 2, 1090, 1088, 3, 2, 2,
	2, 1091, 1092, 5, 92, 47, 2, 1092, 1093, 5, 336, 169, 2, 1093, 1104, 3,
	2, 2, 2, 1094, 1098, 5, 94, 48, 2, 1095, 1097, 5, 96, 49, 2, 1096, 1095,
	3, 2, 2, 2, 1097, 1100, 3, 2, 2, 2, 1098, 1096, 3, 2, 2, 2, 1098, 1099,
	3, 2, 2, 2, 1099, 1101, 3, 2, 2, 2, 1100, 1098, 3, 2, 2, 2, 1101, 1102,
	5, 336, 169, 2, 1102, 1104, 3, 2, 2, 2, 1103, 1084, 3, 2, 2, 2, 1103, 1094,
	3, 2, 2, 2, 1104, 91, 3, 2, 2, 2, 1105, 1106, 7, 82, 2, 2, 1106, 1110,
	5, 340, 171, 2, 1107, 1109, 5, 82, 42, 2, 1108, 1107, 3, 2, 2, 2, 1109,
	1112, 3, 2, 2, 2, 1110, 1108, 3, 2, 2, 2, 1110, 1111, 3, 2, 2, 2, 1111,
	1113, 3, 2, 2, 2, 1112, 1110, 3, 2, 2, 2, 1113, 1114, 5, 342, 172, 2, 1114,
	93, 3, 2, 2, 2, 1115, 1116, 7, 41, 2, 2, 1116, 1117, 5, 140, 71, 2, 1117,
	1121, 5, 340, 171, 2, 1118, 1120, 5, 82, 42, 2, 1119, 1118, 3, 2, 2, 2,
	1120, 1123, 3, 2, 2, 2, 1121, 1119, 3, 2, 2, 2, 1121, 1122, 3, 2, 2, 2,
	1122, 1124, 3, 2, 2, 2, 1123, 1121, 3, 2, 2, 2, 1124, 1125, 5, 342, 172,
	2, 1125, 95, 3, 2, 2, 2, 1126, 1127, 5, 140, 71, 2, 1127, 1131, 5, 340,
	171, 2, 1128, 1130, 5, 82, 42, 2, 1129, 1128, 3, 2, 2, 2, 1130, 1133, 3,
	2, 2, 2, 1131, 1129, 3, 2, 2, 2, 1131, 1132, 3, 2, 2, 2, 1132, 1134, 3,
	2, 2, 2, 1133, 1131, 3, 2, 2, 2, 1134, 1135, 5, 342, 172, 2, 1135, 97,
	3, 2, 2, 2, 1136, 1137, 5, 332, 167, 2, 1137, 1138, 7, 42, 2, 2, 1138,
	1139, 5, 120, 61, 2, 1139, 1143, 5, 340, 171, 2, 1140, 1142, 5, 82, 42,
	2, 1141, 1140, 3, 2, 2, 2, 1142, 1145, 3, 2, 2, 2, 1143, 1141, 3, 2, 2,
	2, 1143, 1144, 3, 2, 2, 2, 1144, 1146, 3, 2, 2, 2, 1145, 1143, 3, 2, 2,
	2, 1146, 1148, 5, 342, 172, 2, 1147, 1149, 5, 104, 53, 2, 1148, 1147, 3,
	2, 2, 2, 1148, 1149, 3, 2, 2, 2, 1149, 1150, 3, 2, 2, 2, 1150, 1151, 5,
	336, 169, 2, 1151, 99, 3, 2, 2, 2, 1152, 1153, 5, 344, 173, 2, 1153, 1154,
	5, 332, 167, 2, 1154, 1155, 5, 346, 174, 2, 1155, 1157, 3, 2, 2, 2, 1156,
	1152, 3, 2, 2, 2, 1156, 1157, 3, 2, 2, 2, 1157, 1158, 3, 2, 2, 2, 1158,
	1159, 5, 332, 167, 2, 1159, 1160, 7, 42, 2, 2, 1160, 1161, 5, 140, 71,
	2, 1161, 1165, 5, 340, 171, 2, 1162, 1164, 5, 82, 42, 2, 1163, 1162, 3,
	2, 2, 2, 1164, 1167, 3, 2, 2, 2, 1165, 1163, 3, 2, 2, 2, 1165, 1166, 3,
	2, 2, 2, 1166, 1168, 3, 2, 2, 2, 1167, 1165, 3, 2, 2, 2, 1168, 1170, 5,
	342, 172, 2, 1169, 1171, 5, 104, 53, 2, 1170, 1169, 3, 2, 2, 2, 1170, 1171,
	3, 2, 2, 2, 1171, 1172, 3, 2, 2, 2, 1172, 1173, 5, 336, 169, 2, 1173, 101,
	3, 2, 2, 2, 1174, 1175, 7, 42, 2, 2, 1175, 1176, 5, 140, 71, 2, 1176, 1180,
	5, 340, 171, 2, 1177, 1179, 5, 82, 42, 2, 1178, 1177, 3, 2, 2, 2, 1179,
	1182, 3, 2, 2, 2, 1180, 1178, 3, 2, 2, 2, 1180, 1181, 3, 2, 2, 2, 1181,
	1183, 3, 2, 2, 2, 1182, 1180, 3, 2, 2, 2, 1183, 1185, 5, 342, 172, 2, 1184,
	1186, 5, 104, 53, 2, 1185, 1184, 3, 2, 2, 2, 1185, 1186, 3, 2, 2, 2, 1186,
	1187, 3, 2, 2, 2, 1187, 1188, 5, 336, 169, 2, 1188, 103, 3, 2, 2, 2, 1189,
	1190, 7, 82, 2, 2, 1190, 1194, 5, 340, 171, 2, 1191, 1193, 5, 82, 42, 2,
	1192, 1191, 3, 2, 2, 2, 1193, 1196, 3, 2, 2, 2, 1194, 1192, 3, 2, 2, 2,
	1194, 1195, 3, 2, 2, 2, 1195, 1197, 3, 2, 2, 2, 1196, 1194, 3, 2, 2, 2,
	1197, 1198, 5, 342, 172, 2, 1198, 105, 3, 2, 2, 2, 1199, 1200, 7, 46, 2,
	2, 1200, 1201, 7, 42, 2, 2, 1201, 1202, 5, 336, 169, 2, 1202, 107, 3, 2,
	2, 2, 1203, 1204, 7, 54, 2, 2, 1204, 1205, 7, 42, 2, 2, 1205, 1206, 5,
	336, 169, 2, 1206, 109, 3, 2, 2, 2, 1207, 1208, 7, 43, 2, 2, 1208, 1212,
	5, 340, 171, 2, 1209, 1211, 5, 82, 42, 2, 1210, 1209, 3, 2, 2, 2, 1211,
	1214, 3, 2, 2, 2, 1212, 1210, 3, 2, 2, 2, 1212, 1213, 3, 2, 2, 2, 1213,
	1215, 3, 2, 2, 2, 1214, 1212, 3, 2, 2, 2, 1215, 1219, 5, 342, 172, 2, 1216,
	1218, 5, 114, 58, 2, 1217, 1216, 3, 2, 2, 2, 1218, 1221, 3, 2, 2, 2, 1219,
	1217, 3, 2, 2, 2, 1219, 1220, 3, 2, 2, 2, 1220, 1222, 3, 2, 2, 2, 1221,
	1219, 3, 2, 2, 2, 1222, 1223, 5, 116, 59, 2, 1223, 1224, 5, 336, 169, 2,
	1224, 1242, 3, 2, 2, 2, 1225, 1226, 7, 43, 2, 2, 1226, 1230, 5, 340, 171,
	2, 1227, 1229, 5, 82, 42, 2, 1228, 1227, 3, 2, 2, 2, 1229, 1232, 3, 2,
	2, 2, 1230, 1228, 3, 2, 2, 2, 1230, 1231, 3, 2, 2, 2, 1231, 1233, 3, 2,
	2, 2, 1232, 1230, 3, 2, 2, 2, 1233, 1235, 5, 342, 172, 2, 1234, 1236, 5,
	114, 58, 2, 1235, 1234, 3, 2, 2, 2, 1236, 1237, 3, 2, 2, 2, 1237, 1235,
	3, 2, 2, 2, 1237, 1238, 3, 2, 2, 2, 1238, 1239, 3, 2, 2, 2, 1239, 1240,
	5, 336, 169, 2, 1240, 1242, 3, 2, 2, 2, 1241, 1207, 3, 2, 2, 2, 1241, 1225,
	3, 2, 2, 2, 1242, 111, 3, 2, 2, 2, 1243, 1244, 7, 43, 2, 2, 1244, 1246,
	5, 140, 71, 2, 1245, 1247, 5, 268, 135, 2, 1246, 1245, 3, 2, 2, 2, 1246,
	1247, 3, 2, 2, 2, 1247, 1248, 3, 2, 2, 2, 1248, 1249, 7, 28, 2, 2, 1249,
	1250, 5, 140, 71, 2, 1250, 1251, 5, 336, 169, 2, 1251, 113, 3, 2, 2, 2,
	1252, 1257, 5, 332, 167, 2, 1253, 1254, 5, 332, 167, 2, 1254, 1255, 5,
	268, 135, 2, 1255, 1257, 3, 2, 2, 2, 1256, 1252, 3, 2, 2, 2, 1256, 1253,
	3, 2, 2, 2, 1257, 1258, 3, 2, 2, 2, 1258, 1262, 5, 340, 171, 2, 1259, 1261,
	5, 82, 42, 2, 1260, 1259, 3, 2, 2, 2, 1261, 1264, 3, 2, 2, 2, 1262, 1260,
	3, 2, 2, 2, 1262, 1263, 3, 2, 2, 2, 1263, 1265, 3, 2, 2, 2, 1264, 1262,
	3, 2, 2, 2, 1265, 1266, 5, 342, 172, 2, 1266, 115, 3, 2, 2, 2, 1267, 1268,
	7, 82, 2, 2, 1268, 1272, 5, 340, 171, 2, 1269, 1271, 5, 82, 42, 2, 1270,
	1269, 3, 2, 2, 2, 1271, 1274, 3, 2, 2, 2, 1272, 1270, 3, 2, 2, 2, 1272,
	1273, 3, 2, 2, 2, 1273, 1275, 3, 2, 2, 2, 1274, 1272, 3, 2, 2, 2, 1275,
	1276, 5, 342, 172, 2, 1276, 117, 3, 2, 2, 2, 1277, 1278, 7, 43, 2, 2, 1278,
	1279, 7, 25, 2, 2, 1279, 1280, 5, 140, 71, 2, 1280, 1281, 5, 336, 169,
	2, 1281, 119, 3, 2, 2, 2, 1282, 1283, 5, 140, 71, 2, 1283, 1284, 9, 5,
	2, 2, 1284, 1285, 5, 140, 71, 2, 1285, 1286, 7, 54, 2, 2, 1286, 1287, 5,
	140, 71, 2, 1287, 1293, 3, 2, 2, 2, 1288, 1289, 5, 140, 71, 2, 1289, 1290,
	9, 5, 2, 2, 1290, 1291, 5, 140, 71, 2, 1291, 1293, 3, 2, 2, 2, 1292, 1282,
	3, 2, 2, 2, 1292, 1288, 3, 2, 2, 2, 1293, 121, 3, 2, 2, 2, 1294, 1296,
	5, 132, 67, 2, 1295, 1297, 5, 268, 135, 2, 1296, 1295, 3, 2, 2, 2, 1296,
	1297, 3, 2, 2, 2, 1297, 1298, 3, 2, 2, 2, 1298, 1299, 7, 28, 2, 2, 1299,
	1300, 5, 140, 71, 2, 1300, 1301, 5, 336, 169, 2, 1301, 123, 3, 2, 2, 2,
	1302, 1303, 5, 132, 67, 2, 1303, 1304, 5, 268, 135, 2, 1304, 1305, 5, 336,
	169, 2, 1305, 125, 3, 2, 2, 2, 1306, 1307, 5, 140, 71, 2, 1307, 1308, 7,
	20, 2, 2, 1308, 1309, 5, 344, 173, 2, 1309, 1310, 7, 20, 2, 2, 1310, 1311,
	5, 346, 174, 2, 1311, 1312, 5, 320, 161, 2, 1312, 1313, 5, 140, 71, 2,
	1313, 1314, 5, 336, 169, 2, 1314, 127, 3, 2, 2, 2, 1315, 1316, 5, 136,
	69, 2, 1316, 1317, 5, 320, 161, 2, 1317, 1318, 5, 136, 69, 2, 1318, 1319,
	5, 336, 169, 2, 1319, 129, 3, 2, 2, 2, 1320, 1321, 5, 140, 71, 2, 1321,
	1322, 5, 336, 169, 2, 1322, 131, 3, 2, 2, 2, 1323, 1329, 5, 134, 68, 2,
	1324, 1325, 5, 338, 170, 2, 1325, 1326, 5, 134, 68, 2, 1326, 1328, 3, 2,
	2, 2, 1327, 1324, 3, 2, 2, 2, 1328, 1331, 3, 2, 2, 2, 1329, 1327, 3, 2,
	2, 2, 1329, 1330, 3, 2, 2, 2, 1330, 133, 3, 2, 2, 2, 1331, 1329, 3, 2,
	2, 2, 1332, 1335, 5, 332, 167, 2, 1333, 1335, 7, 82, 2, 2, 1334, 1332,
	3, 2, 2, 2, 1334, 1333, 3, 2, 2, 2, 1335, 135, 3, 2, 2, 2, 1336, 1342,
	5, 140, 71, 2, 1337, 1338, 5, 338, 170, 2, 1338, 1339, 5, 140, 71, 2, 1339,
	1341, 3, 2, 2, 2, 1340, 1337, 3, 2, 2, 2, 1341, 1344, 3, 2, 2, 2, 1342,
	1340, 3, 2, 2, 2, 1342, 1343, 3, 2, 2, 2, 1343, 137, 3, 2, 2, 2, 1344,
	1342, 3, 2, 2, 2, 1345, 1347, 5, 332, 167, 2, 1346, 1348, 5, 208, 105,
	2, 1347, 1346, 3, 2, 2, 2, 1347, 1348, 3, 2, 2, 2, 1348, 1356, 3, 2, 2,
	2, 1349, 1356, 7, 82, 2, 2, 1350, 1351, 5, 344, 173, 2, 1351, 1352, 5,
	140, 71, 2, 1352, 1353, 5, 346, 174, 2, 1353, 1356, 3, 2, 2, 2, 1354, 1356,
	5, 260, 131, 2, 1355, 1345, 3, 2, 2, 2, 1355, 1349, 3, 2, 2, 2, 1355, 1350,
	3, 2, 2, 2, 1355, 1354, 3, 2, 2, 2, 1356, 139, 3, 2, 2, 2, 1357, 1358,
	8, 71, 1, 2, 1358, 1379, 5, 228, 115, 2, 1359, 1379, 5, 138, 70, 2, 1360,
	1379, 5, 164, 83, 2, 1361, 1379, 5, 162, 82, 2, 1362, 1379, 5, 180, 91,
	2, 1363, 1379, 5, 182, 92, 2, 1364, 1379, 5, 184, 93, 2, 1365, 1379, 5,
	186, 94, 2, 1366, 1379, 5, 188, 95, 2, 1367, 1379, 5, 210, 106, 2, 1368,
	1379, 5, 220, 111, 2, 1369, 1379, 5, 214, 108, 2, 1370, 1379, 5, 222, 112,
	2, 1371, 1379, 5, 226, 114, 2, 1372, 1379, 5, 224, 113, 2, 1373, 1379,
	5, 238, 120, 2, 1374, 1379, 5, 250, 126, 2, 1375, 1379, 5, 252, 127, 2,
	1376, 1379, 5, 256, 129, 2, 1377, 1379, 5, 234, 118, 2, 1378, 1357, 3,
	2, 2, 2, 1378, 1359, 3, 2, 2, 2, 1378, 1360, 3, 2, 2, 2, 1378, 1361, 3,
	2, 2, 2, 1378, 1362, 3, 2, 2, 2, 1378, 1363, 3, 2, 2, 2, 1378, 1364, 3,
	2, 2, 2, 1378, 1365, 3, 2, 2, 2, 1378, 1366, 3, 2, 2, 2, 1378, 1367, 3,
	2, 2, 2, 1378, 1368, 3, 2, 2, 2, 1378, 1369, 3, 2, 2, 2, 1378, 1370, 3,
	2, 2, 2, 1378, 1371, 3, 2, 2, 2, 1378, 1372, 3, 2, 2, 2, 1378, 1373, 3,
	2, 2, 2, 1378, 1374, 3, 2, 2, 2, 1378, 1375, 3, 2, 2, 2, 1378, 1376, 3,
	2, 2, 2, 1378, 1377, 3, 2, 2, 2, 1379, 1424, 3, 2, 2, 2, 1380, 1381, 12,
	9, 2, 2, 1381, 1382, 5, 302, 152, 2, 1382, 1383, 5, 140, 71, 10, 1383,
	1423, 3, 2, 2, 2, 1384, 1385, 12, 8, 2, 2, 1385, 1386, 5, 316, 159, 2,
	1386, 1387, 5, 140, 71, 9, 1387, 1423, 3, 2, 2, 2, 1388, 1389, 12, 7, 2,
	2, 1389, 1390, 5, 318, 160, 2, 1390, 1391, 5, 140, 71, 8, 1391, 1423, 3,
	2, 2, 2, 1392, 1393, 12, 6, 2, 2, 1393, 1394, 5, 322, 162, 2, 1394, 1395,
	5, 140, 71, 7, 1395, 1423, 3, 2, 2, 2, 1396, 1397, 12, 5, 2, 2, 1397, 1398,
	5, 324, 163, 2, 1398, 1399, 5, 140, 71, 6, 1399, 1423, 3, 2, 2, 2, 1400,
	1401, 12, 4, 2, 2, 1401, 1402, 5, 326, 164, 2, 1402, 1403, 5, 140, 71,
	5, 1403, 1423, 3, 2, 2, 2, 1404, 1405, 12, 18, 2, 2, 1405, 1423, 5, 246,
	124, 2, 1406, 1407, 12, 17, 2, 2, 1407, 1423, 7, 43, 2, 2, 1408, 1409,
	12, 16, 2, 2, 1409, 1423, 7, 41, 2, 2, 1410, 1411, 12, 15, 2, 2, 1411,
	1423, 5, 166, 84, 2, 1412, 1413, 12, 14, 2, 2, 1413, 1423, 5, 168, 85,
	2, 1414, 1415, 12, 13, 2, 2, 1415, 1423, 5, 156, 79, 2, 1416, 1417, 12,
	12, 2, 2, 1417, 1423, 5, 158, 80, 2, 1418, 1419, 12, 11, 2, 2, 1419, 1423,
	5, 160, 81, 2, 1420, 1421, 12, 10, 2, 2, 1421, 1423, 5, 142, 72, 2, 1422,
	1380, 3, 2, 2, 2, 1422, 1384, 3, 2, 2, 2, 1422, 1388, 3, 2, 2, 2, 1422,
	1392, 3, 2, 2, 2, 1422, 1396, 3, 2, 2, 2, 1422, 1400, 3, 2, 2, 2, 1422,
	1404, 3, 2, 2, 2, 1422, 1406, 3, 2, 2, 2, 1422, 1408, 3, 2, 2, 2, 1422,
	1410, 3, 2, 2, 2, 1422, 1412, 3, 2, 2, 2, 1422, 1414, 3, 2, 2, 2, 1422,
	1416, 3, 2, 2, 2, 1422, 1418, 3, 2, 2, 2, 1422, 1420, 3, 2, 2, 2, 1423,
	1426, 3, 2, 2, 2, 1424, 1422, 3, 2, 2, 2, 1424, 1425, 3, 2, 2, 2, 1425,
	141, 3, 2, 2, 2, 1426, 1424, 3, 2, 2, 2, 1427, 1429, 5, 328, 165, 2, 1428,
	1430, 7, 85, 2, 2, 1429, 1428, 3, 2, 2, 2, 1429, 1430, 3, 2, 2, 2, 1430,
	1431, 3, 2, 2, 2, 1431, 1433, 5, 332, 167, 2, 1432, 1434, 5, 208, 105,
	2, 1433, 1432, 3, 2, 2, 2, 1433, 1434, 3, 2, 2, 2, 1434, 1438, 3, 2, 2,
	2, 1435, 1439, 5, 156, 79, 2, 1436, 1439, 5, 158, 80, 2, 1437, 1439, 5,
	160, 81, 2, 1438, 1435, 3, 2, 2, 2, 1438, 1436, 3, 2, 2, 2, 1438, 1437,
	3, 2, 2, 2, 1438, 1439, 3, 2, 2, 2, 1439, 143, 3, 2, 2, 2, 1440, 1450,
	5, 344, 173, 2, 1441, 1447, 5, 140, 71, 2, 1442, 1443, 5, 338, 170, 2,
	1443, 1444, 5, 140, 71, 2, 1444, 1446, 3, 2, 2, 2, 1445, 1442, 3, 2, 2,
	2, 1446, 1449, 3, 2, 2, 2, 1447, 1445, 3, 2, 2, 2, 1447, 1448, 3, 2, 2,
	2, 1448, 1451, 3, 2, 2, 2, 1449, 1447, 3, 2, 2, 2, 1450, 1441, 3, 2, 2,
	2, 1450, 1451, 3, 2, 2, 2, 1451, 1452, 3, 2, 2, 2, 1452, 1453, 5, 346,
	174, 2, 1453, 145, 3, 2, 2, 2, 1454, 1460, 5, 140, 71, 2, 1455, 1456, 5,
	338, 170, 2, 1456, 1457, 5, 140, 71, 2, 1457, 1459, 3, 2, 2, 2, 1458, 1455,
	3, 2, 2, 2, 1459, 1462, 3, 2, 2, 2, 1460, 1458, 3, 2, 2, 2, 1460, 1461,
	3, 2, 2, 2, 1461, 147, 3, 2, 2, 2, 1462, 1460, 3, 2, 2, 2, 1463, 1465,
	5, 150, 76, 2, 1464, 1466, 7, 85, 2, 2, 1465, 1464, 3, 2, 2, 2, 1465, 1466,
	3, 2, 2, 2, 1466, 149, 3, 2, 2, 2, 1467, 1471, 5, 344, 173, 2, 1468, 1469,
	5, 332, 167, 2, 1469, 1470, 7, 24, 2, 2, 1470, 1472, 3, 2, 2, 2, 1471,
	1468, 3, 2, 2, 2, 1471, 1472, 3, 2, 2, 2, 1472, 1473, 3, 2, 2, 2, 1473,
	1474, 5, 152, 77, 2, 1474, 1475, 5, 346, 174, 2, 1475, 151, 3, 2, 2, 2,
	1476, 1482, 5, 154, 78, 2, 1477, 1478, 5, 338, 170, 2, 1478, 1479, 5, 154,
	78, 2, 1479, 1481, 3, 2, 2, 2, 1480, 1477, 3, 2, 2, 2, 1481, 1484, 3, 2,
	2, 2, 1482, 1480, 3, 2, 2, 2, 1482, 1483, 3, 2, 2, 2, 1483, 153, 3, 2,
	2, 2, 1484, 1482, 3, 2, 2, 2, 1485, 1488, 5, 332, 167, 2, 1486, 1489, 5,
	144, 73, 2, 1487, 1489, 5, 210, 106, 2, 1488, 1486, 3, 2, 2, 2, 1488, 1487,
	3, 2, 2, 2, 1488, 1489, 3, 2, 2, 2, 1489, 155, 3, 2, 2, 2, 1490, 1493,
	5, 144, 73, 2, 1491, 1493, 5, 210, 106, 2, 1492, 1490, 3, 2, 2, 2, 1492,
	1491, 3, 2, 2, 2, 1493, 157, 3, 2, 2, 2, 1494, 1495, 7, 20, 2, 2, 1495,
	1496, 5, 344, 173, 2, 1496, 1497, 7, 20, 2, 2, 1497, 1498, 5, 346, 174,
	2, 1498, 159, 3, 2, 2, 2, 1499, 1500, 7, 20, 2, 2, 1500, 1503, 5, 344,
	173, 2, 1501, 1504, 5, 192, 97, 2, 1502, 1504, 5, 140, 71, 2, 1503, 1501,
	3, 2, 2, 2, 1503, 1502, 3, 2, 2, 2, 1504, 1505, 3, 2, 2, 2, 1505, 1506,
	5, 346, 174, 2, 1506, 161, 3, 2, 2, 2, 1507, 1508, 5, 268, 135, 2, 1508,
	1513, 5, 340, 171, 2, 1509, 1514, 5, 170, 86, 2, 1510, 1514, 5, 174, 88,
	2, 1511, 1514, 5, 176, 89, 2, 1512, 1514, 5, 178, 90, 2, 1513, 1509, 3,
	2, 2, 2, 1513, 1510, 3, 2, 2, 2, 1513, 1511, 3, 2, 2, 2, 1513, 1512, 3,
	2, 2, 2, 1513, 1514, 3, 2, 2, 2, 1514, 1515, 3, 2, 2, 2, 1515, 1516, 5,
	342, 172, 2, 1516, 163, 3, 2, 2, 2, 1517, 1518, 5, 348, 175, 2, 1518, 1519,
	5, 268, 135, 2, 1519, 1520, 5, 350, 176, 2, 1520, 1522, 5, 344, 173, 2,
	1521, 1523, 7, 85, 2, 2, 1522, 1521, 3, 2, 2, 2, 1522, 1523, 3, 2, 2, 2,
	1523, 1525, 3, 2, 2, 2, 1524, 1526, 5, 146, 74, 2, 1525, 1524, 3, 2, 2,
	2, 1525, 1526, 3, 2, 2, 2, 1526, 1528, 3, 2, 2, 2, 1527, 1529, 7, 85, 2,
	2, 1528, 1527, 3, 2, 2, 2, 1528, 1529, 3, 2, 2, 2, 1529, 1530, 3, 2, 2,
	2, 1530, 1531, 5, 346, 174, 2, 1531, 165, 3, 2, 2, 2, 1532, 1533, 7, 41,
	2, 2, 1533, 1534, 7, 43, 2, 2, 1534, 1535, 5, 140, 71, 2, 1535, 167, 3,
	2, 2, 2, 1536, 1537, 7, 20, 2, 2, 1537, 1538, 5, 348, 175, 2, 1538, 1539,
	5, 268, 135, 2, 1539, 1540, 5, 350, 176, 2, 1540, 169, 3, 2, 2, 2, 1541,
	1542, 5, 172, 87, 2, 1542, 1543, 5, 336, 169, 2, 1543, 1545, 3, 2, 2, 2,
	1544, 1541, 3, 2, 2, 2, 1545, 1548, 3, 2, 2, 2, 1546, 1544, 3, 2, 2, 2,
	1546, 1547, 3, 2, 2, 2, 1547, 1549, 3, 2, 2, 2, 1548, 1546, 3, 2, 2, 2,
	1549, 1550, 5, 172, 87, 2, 1550, 171, 3, 2, 2, 2, 1551, 1552, 5, 202, 102,
	2, 1552, 1553, 7, 28, 2, 2, 1553, 1554, 5, 140, 71, 2, 1554, 173, 3, 2,
	2, 2, 1555, 1556, 5, 140, 71, 2, 1556, 1557, 5, 336, 169, 2, 1557, 1559,
	3, 2, 2, 2, 1558, 1555, 3, 2, 2, 2, 1559, 1562, 3, 2, 2, 2, 1560, 1558,
	3, 2, 2, 2, 1560, 1561, 3, 2, 2, 2, 1561, 1563, 3, 2, 2, 2, 1562, 1560,
	3, 2, 2, 2, 1563, 1564, 5, 140, 71, 2, 1564, 175, 3, 2, 2, 2, 1565, 1566,
	7, 22, 2, 2, 1566, 1572, 5, 140, 71, 2, 1567, 1568, 5, 338, 170, 2, 1568,
	1569, 5, 140, 71, 2, 1569, 1571, 3, 2, 2, 2, 1570, 1567, 3, 2, 2, 2, 1571,
	1574, 3, 2, 2, 2, 1572, 1570, 3, 2, 2, 2, 1572, 1573, 3, 2, 2, 2, 1573,
	177, 3, 2, 2, 2, 1574, 1572, 3, 2, 2, 2, 1575, 1576, 5, 190, 96, 2, 1576,
	1577, 5, 336, 169, 2, 1577, 1579, 3, 2, 2, 2, 1578, 1575, 3, 2, 2, 2, 1579,
	1582, 3, 2, 2, 2, 1580, 1578, 3, 2, 2, 2, 1580, 1581, 3, 2, 2, 2, 1581,
	1583, 3, 2, 2, 2, 1582, 1580, 3, 2, 2, 2, 1583, 1584, 5, 190, 96, 2, 1584,
	179, 3, 2, 2, 2, 1585, 1586, 7, 29, 2, 2, 1586, 1587, 5, 140, 71, 2, 1587,
	181, 3, 2, 2, 2, 1588, 1589, 7, 30, 2, 2, 1589, 1590, 5, 140, 71, 2, 1590,
	183, 3, 2, 2, 2, 1591, 1597, 5, 340, 171, 2, 1592, 1593, 5, 140, 71, 2,
	1593, 1594, 5, 336, 169, 2, 1594, 1596, 3, 2, 2, 2, 1595, 1592, 3, 2, 2,
	2, 1596, 1599, 3, 2, 2, 2, 1597, 1595, 3, 2, 2, 2, 1597, 1598, 3, 2, 2,
	2, 1598, 1600, 3, 2, 2, 2, 1599, 1597, 3, 2, 2, 2, 1600, 1601, 5, 140,
	71, 2, 1601, 1602, 5, 342, 172, 2, 1602, 185, 3, 2, 2, 2, 1603, 1604, 5,
	340, 171, 2, 1604, 1610, 7, 22, 2, 2, 1605, 1606, 5, 140, 71, 2, 1606,
	1607, 5, 336, 169, 2, 1607, 1609, 3, 2, 2, 2, 1608, 1605, 3, 2, 2, 2, 1609,
	1612, 3, 2, 2, 2, 1610, 1608, 3, 2, 2, 2, 1610, 1611, 3, 2, 2, 2, 1611,
	1613, 3, 2, 2, 2, 1612, 1610, 3, 2, 2, 2, 1613, 1614, 5, 140, 71, 2, 1614,
	1615, 5, 342, 172, 2, 1615, 187, 3, 2, 2, 2, 1616, 1622, 5, 340, 171, 2,
	1617, 1618, 5, 190, 96, 2, 1618, 1619, 5, 336, 169, 2, 1619, 1621, 3, 2,
	2, 2, 1620, 1617, 3, 2, 2, 2, 1621, 1624, 3, 2, 2, 2, 1622, 1620, 3, 2,
	2, 2, 1622, 1623, 3, 2, 2, 2, 1623, 1625, 3, 2, 2, 2, 1624, 1622, 3, 2,
	2, 2, 1625, 1626, 5, 190, 96, 2, 1626, 1627, 5, 342, 172, 2, 1627, 189,
	3, 2, 2, 2, 1628, 1629, 5, 140, 71, 2, 1629, 1630, 7, 23, 2, 2, 1630, 1631,
	5, 140, 71, 2, 1631, 191, 3, 2, 2, 2, 1632, 1636, 5, 194, 98, 2, 1633,
	1636, 5, 196, 99, 2, 1634, 1636, 5, 198, 100, 2, 1635, 1632, 3, 2, 2, 2,
	1635, 1633, 3, 2, 2, 2, 1635, 1634, 3, 2, 2, 2, 1636, 193, 3, 2, 2, 2,
	1637, 1638, 5, 140, 71, 2, 1638, 1639, 9, 5, 2, 2, 1639, 1640, 5, 140,
	71, 2, 1640, 195, 3, 2, 2, 2, 1641, 1642, 5, 140, 71, 2, 1642, 1643, 9,
	5, 2, 2, 1643, 197, 3, 2, 2, 2, 1644, 1645, 9, 5, 2, 2, 1645, 1646, 5,
	140, 71, 2, 1646, 199, 3, 2, 2, 2, 1647, 1648, 5, 332, 167, 2, 1648, 1650,
	5, 328, 165, 2, 1649, 1651, 7, 85, 2, 2, 1650, 1649, 3, 2, 2, 2, 1650,
	1651, 3, 2, 2, 2, 1651, 1653, 3, 2, 2, 2, 1652, 1647, 3, 2, 2, 2, 1653,
	1656, 3, 2, 2, 2, 1654, 1652, 3, 2, 2, 2, 1654, 1655, 3, 2, 2, 2, 1655,
	1657, 3, 2, 2, 2, 1656, 1654, 3, 2, 2, 2, 1657, 1658, 5, 332, 167, 2, 1658,
	201, 3, 2, 2, 2, 1659, 1668, 5, 332, 167, 2, 1660, 1662, 5, 328, 165, 2,
	1661, 1663, 7, 85, 2, 2, 1662, 1661, 3, 2, 2, 2, 1662, 1663, 3, 2, 2, 2,
	1663, 1664, 3, 2, 2, 2, 1664, 1665, 5, 332, 167, 2, 1665, 1667, 3, 2, 2,
	2, 1666, 1660, 3, 2, 2, 2, 1667, 1670, 3, 2, 2, 2, 1668, 1666, 3, 2, 2,
	2, 1668, 1669, 3, 2, 2, 2, 1669, 203, 3, 2, 2, 2, 1670, 1668, 3, 2, 2,
	2, 1671, 1672, 5, 348, 175, 2, 1672, 1678, 5, 206, 104, 2, 1673, 1674,
	5, 338, 170, 2, 1674, 1675, 5, 206, 104, 2, 1675, 1677, 3, 2, 2, 2, 1676,
	1673, 3, 2, 2, 2, 1677, 1680, 3, 2, 2, 2, 1678, 1676, 3, 2, 2, 2, 1678,
	1679, 3, 2, 2, 2, 1679, 1681, 3, 2, 2, 2, 1680, 1678, 3, 2, 2, 2, 1681,
	1682, 5, 350, 176, 2, 1682, 205, 3, 2, 2, 2, 1683, 1685, 5, 332, 167, 2,
	1684, 1686, 5, 332, 167, 2, 1685, 1684, 3, 2, 2, 2, 1685, 1686, 3, 2, 2,
	2, 1686, 207, 3, 2, 2, 2, 1687, 1688, 5, 348, 175, 2, 1688, 1694, 5, 268,
	135, 2, 1689, 1690, 5, 338, 170, 2, 1690, 1691, 5, 268, 135, 2, 1691, 1693,
	3, 2, 2, 2, 1692, 1689, 3, 2, 2, 2, 1693, 1696, 3, 2, 2, 2, 1694, 1692,
	3, 2, 2, 2, 1694, 1695, 3, 2, 2, 2, 1695, 1697, 3, 2, 2, 2, 1696, 1694,
	3, 2, 2, 2, 1697, 1698, 5, 350, 176, 2, 1698, 209, 3, 2, 2, 2, 1699, 1701,
	5, 340, 171, 2, 1700, 1702, 5, 212, 107, 2, 1701, 1700, 3, 2, 2, 2, 1701,
	1702, 3, 2, 2, 2, 1702, 1703, 3, 2, 2, 2, 1703, 1707, 9, 3, 2, 2, 1704,
	1706, 7, 85, 2, 2, 1705, 1704, 3, 2, 2, 2, 1706, 1709, 3, 2, 2, 2, 1707,
	1705, 3, 2, 2, 2, 1707, 1708, 3, 2, 2, 2, 1708, 1710, 3, 2, 2, 2, 1709,
	1707, 3, 2, 2, 2, 1710, 1711, 5, 136, 69, 2, 1711, 1712, 5, 342, 172, 2,
	1712, 1733, 3, 2, 2, 2, 1713, 1715, 5, 340, 171, 2, 1714, 1716, 5, 212,
	107, 2, 1715, 1714, 3, 2, 2, 2, 1715, 1716, 3, 2, 2, 2, 1716, 1717, 3,
	2, 2, 2, 1717, 1721, 9, 3, 2, 2, 1718, 1720, 7, 85, 2, 2, 1719, 1718, 3,
	2, 2, 2, 1720, 1723, 3, 2, 2, 2, 1721, 1719, 3, 2, 2, 2, 1721, 1722, 3,
	2, 2, 2, 1722, 1727, 3, 2, 2, 2, 1723, 1721, 3, 2, 2, 2, 1724, 1726, 5,
	82, 42, 2, 1725, 1724, 3, 2, 2, 2, 1726, 1729, 3, 2, 2, 2, 1727, 1725,
	3, 2, 2, 2, 1727, 1728, 3, 2, 2, 2, 1728, 1730, 3, 2, 2, 2, 1729, 1727,
	3, 2, 2, 2, 1730, 1731, 5, 342, 172, 2, 1731, 1733, 3, 2, 2, 2, 1732, 1699,
	3, 2, 2, 2, 1732, 1713, 3, 2, 2, 2, 1733, 211, 3, 2, 2, 2, 1734, 1740,
	5, 332, 167, 2, 1735, 1736, 5, 338, 170, 2, 1736, 1737, 5, 332, 167, 2,
	1737, 1739, 3, 2, 2, 2, 1738, 1735, 3, 2, 2, 2, 1739, 1742, 3, 2, 2, 2,
	1740, 1738, 3, 2, 2, 2, 1740, 1741, 3, 2, 2, 2, 1741, 213, 3, 2, 2, 2,
	1742, 1740, 3, 2, 2, 2, 1743, 1744, 5, 216, 109, 2, 1744, 215, 3, 2, 2,
	2, 1745, 1751, 5, 340, 171, 2, 1746, 1747, 5, 218, 110, 2, 1747, 1748,
	5, 336, 169, 2, 1748, 1750, 3, 2, 2, 2, 1749, 1746, 3, 2, 2, 2, 1750, 1753,
	3, 2, 2, 2, 1751, 1749, 3, 2, 2, 2, 1751, 1752, 3, 2, 2, 2, 1752, 1754,
	3, 2, 2, 2, 1753, 1751, 3, 2, 2, 2, 1754, 1755, 5, 218, 110, 2, 1755, 1756,
	5, 342, 172, 2, 1756, 217, 3, 2, 2, 2, 1757, 1758, 5, 202, 102, 2, 1758,
	1759, 9, 2, 2, 2, 1759, 1760, 5, 140, 71, 2, 1760, 219, 3, 2, 2, 2, 1761,
	1762, 5, 344, 173, 2, 1762, 1763, 5, 76, 39, 2, 1763, 1765, 9, 3, 2, 2,
	1764, 1766, 7, 42, 2, 2, 1765, 1764, 3, 2, 2, 2, 1765, 1766, 3, 2, 2, 2,
	1766, 1770, 3, 2, 2, 2, 1767, 1769, 7, 85, 2, 2, 1768, 1767, 3, 2, 2, 2,
	1769, 1772, 3, 2, 2, 2, 1770, 1768, 3, 2, 2, 2, 1770, 1771, 3, 2, 2, 2,
	1771, 1773, 3, 2, 2, 2, 1772, 1770, 3, 2, 2, 2, 1773, 1774, 5, 78, 40,
	2, 1774, 1775, 5, 346, 174, 2, 1775, 1779, 5, 340, 171, 2, 1776, 1778,
	5, 82, 42, 2, 1777, 1776, 3, 2, 2, 2, 1778, 1781, 3, 2, 2, 2, 1779, 1777,
	3, 2, 2, 2, 1779, 1780, 3, 2, 2, 2, 1780, 1782, 3, 2, 2, 2, 1781, 1779,
	3, 2, 2, 2, 1782, 1783, 5, 342, 172, 2, 1783, 221, 3, 2, 2, 2, 1784, 1785,
	5, 322, 162, 2, 1785, 1786, 5, 140, 71, 2, 1786, 223, 3, 2, 2, 2, 1787,
	1788, 5, 330, 166, 2, 1788, 1789, 5, 140, 71, 2, 1789, 225, 3, 2, 2, 2,
	1790, 1791, 5, 308, 155, 2, 1791, 1792, 5, 140, 71, 2, 1792, 227, 3, 2,
	2, 2, 1793, 1794, 5, 230, 116, 2, 1794, 1796, 7, 24, 2, 2, 1795, 1797,
	7, 85, 2, 2, 1796, 1795, 3, 2, 2, 2, 1796, 1797, 3, 2, 2, 2, 1797, 1801,
	3, 2, 2, 2, 1798, 1800, 5, 232, 117, 2, 1799, 1798, 3, 2, 2, 2, 1800, 1803,
	3, 2, 2, 2, 1801, 1799, 3, 2, 2, 2, 1801, 1802, 3, 2, 2, 2, 1802, 1804,
	3, 2, 2, 2, 1803, 1801, 3, 2, 2, 2, 1804, 1806, 5, 332, 167, 2, 1805, 1807,
	7, 85, 2, 2, 1806, 1805, 3, 2, 2, 2, 1806, 1807, 3, 2, 2, 2, 1807, 1808,
	3, 2, 2, 2, 1808, 1809, 5, 140, 71, 2, 1809, 229, 3, 2, 2, 2, 1810, 1811,
	5, 332, 167, 2, 1811, 1812, 7, 42, 2, 2, 1812, 1813, 5, 140, 71, 2, 1813,
	231, 3, 2, 2, 2, 1814, 1820, 5, 230, 116, 2, 1815, 1817, 5, 332, 167, 2,
	1816, 1818, 5, 140, 71, 2, 1817, 1816, 3, 2, 2, 2, 1817, 1818, 3, 2, 2,
	2, 1818, 1820, 3, 2, 2, 2, 1819, 1814, 3, 2, 2, 2, 1819, 1815, 3, 2, 2,
	2, 1820, 1821, 3, 2, 2, 2, 1821, 1823, 7, 24, 2, 2, 1822, 1824, 7, 85,
	2, 2, 1823, 1822, 3, 2, 2, 2, 1823, 1824, 3, 2, 2, 2, 1824, 233, 3, 2,
	2, 2, 1825, 1827, 7, 78, 2, 2, 1826, 1828, 5, 236, 119, 2, 1827, 1826,
	3, 2, 2, 2, 1828, 1829, 3, 2, 2, 2, 1829, 1827, 3, 2, 2, 2, 1829, 1830,
	3, 2, 2, 2, 1830, 235, 3, 2, 2, 2, 1831, 1832, 5, 140, 71, 2, 1832, 1833,
	7, 78, 2, 2, 1833, 237, 3, 2, 2, 2, 1834, 1838, 5, 242, 122, 2, 1835, 1837,
	5, 244, 123, 2, 1836, 1835, 3, 2, 2, 2, 1837, 1840, 3, 2, 2, 2, 1838, 1836,
	3, 2, 2, 2, 1838, 1839, 3, 2, 2, 2, 1839, 1841, 3, 2, 2, 2, 1840, 1838,
	3, 2, 2, 2, 1841, 1842, 5, 240, 121, 2, 1842, 239, 3, 2, 2, 2, 1843, 1844,
	7, 82, 2, 2, 1844, 1848, 5, 340, 171, 2, 1845, 1847, 5, 82, 42, 2, 1846,
	1845, 3, 2, 2, 2, 1847, 1850, 3, 2, 2, 2, 1848, 1846, 3, 2, 2, 2, 1848,
	1849, 3, 2, 2, 2, 1849, 1851, 3, 2, 2, 2, 1850, 1848, 3, 2, 2, 2, 1851,
	1852, 5, 136, 69, 2, 1852, 1853, 5, 342, 172, 2, 1853, 241, 3, 2, 2, 2,
	1854, 1855, 7, 41, 2, 2, 1855, 1856, 7, 24, 2, 2, 1856, 1857, 5, 140, 71,
	2, 1857, 1861, 5, 340, 171, 2, 1858, 1860, 5, 82, 42, 2, 1859, 1858, 3,
	2, 2, 2, 1860, 1863, 3, 2, 2, 2, 1861, 1859, 3, 2, 2, 2, 1861, 1862, 3,
	2, 2, 2, 1862, 1864, 3, 2, 2, 2, 1863, 1861, 3, 2, 2, 2, 1864, 1865, 5,
	136, 69, 2, 1865, 1866, 5, 342, 172, 2, 1866, 243, 3, 2, 2, 2, 1867, 1868,
	5, 140, 71, 2, 1868, 1872, 5, 340, 171, 2, 1869, 1871, 5, 82, 42, 2, 1870,
	1869, 3, 2, 2, 2, 1871, 1874, 3, 2, 2, 2, 1872, 1870, 3, 2, 2, 2, 1872,
	1873, 3, 2, 2, 2, 1873, 1875, 3, 2, 2, 2, 1874, 1872, 3, 2, 2, 2, 1875,
	1876, 5, 136, 69, 2, 1876, 1877, 5, 342, 172, 2, 1877, 245, 3, 2, 2, 2,
	1878, 1879, 7, 41, 2, 2, 1879, 1881, 7, 24, 2, 2, 1880, 1882, 5, 248, 125,
	2, 1881, 1880, 3, 2, 2, 2, 1882, 1883, 3, 2, 2, 2, 1883, 1881, 3, 2, 2,
	2, 1883, 1884, 3, 2, 2, 2, 1884, 247, 3, 2, 2, 2, 1885, 1891, 5, 88, 45,
	2, 1886, 1887, 5, 338, 170, 2, 1887, 1888, 5, 88, 45, 2, 1888, 1890, 3,
	2, 2, 2, 1889, 1886, 3, 2, 2, 2, 1890, 1893, 3, 2, 2, 2, 1891, 1889, 3,
	2, 2, 2, 1891, 1892, 3, 2, 2, 2, 1892, 1894, 3, 2, 2, 2, 1893, 1891, 3,
	2, 2, 2, 1894, 1898, 5, 340, 171, 2, 1895, 1897, 5, 82, 42, 2, 1896, 1895,
	3, 2, 2, 2, 1897, 1900, 3, 2, 2, 2, 1898, 1896, 3, 2, 2, 2, 1898, 1899,
	3, 2, 2, 2, 1899, 1901, 3, 2, 2, 2, 1900, 1898, 3, 2, 2, 2, 1901, 1902,
	5, 136, 69, 2, 1902, 1903, 5, 342, 172, 2, 1903, 249, 3, 2, 2, 2, 1904,
	1905, 5, 332, 167, 2, 1905, 1906, 7, 42, 2, 2, 1906, 1907, 7, 24, 2, 2,
	1907, 1908, 5, 120, 61, 2, 1908, 1912, 5, 340, 171, 2, 1909, 1911, 5, 82,
	42, 2, 1910, 1909, 3, 2, 2, 2, 1911, 1914, 3, 2, 2, 2, 1912, 1910, 3, 2,
	2, 2, 1912, 1913, 3, 2, 2, 2, 1913, 1915, 3, 2, 2, 2, 1914, 1912, 3, 2,
	2, 2, 1915, 1916, 5, 136, 69, 2, 1916, 1918, 5, 342, 172, 2, 1917, 1919,
	5, 254, 128, 2, 1918, 1917, 3, 2, 2, 2, 1918, 1919, 3, 2, 2, 2, 1919, 251,
	3, 2, 2, 2, 1920, 1921, 5, 332, 167, 2, 1921, 1922, 7, 40, 2, 2, 1922,
	1924, 3, 2, 2, 2, 1923, 1920, 3, 2, 2, 2, 1923, 1924, 3, 2, 2, 2, 1924,
	1925, 3, 2, 2, 2, 1925, 1926, 5, 332, 167, 2, 1926, 1927, 7, 42, 2, 2,
	1927, 1928, 7, 24, 2, 2, 1928, 1929, 5, 140, 71, 2, 1929, 1933, 5, 340,
	171, 2, 1930, 1932, 5, 82, 42, 2, 1931, 1930, 3, 2, 2, 2, 1932, 1935, 3,
	2, 2, 2, 1933, 1931, 3, 2, 2, 2, 1933, 1934, 3, 2, 2, 2, 1934, 1936, 3,
	2, 2, 2, 1935, 1933, 3, 2, 2, 2, 1936, 1937, 5, 136, 69, 2, 1937, 1939,
	5, 342, 172, 2, 1938, 1940, 5, 254, 128, 2, 1939, 1938, 3, 2, 2, 2, 1939,
	1940, 3, 2, 2, 2, 1940, 253, 3, 2, 2, 2, 1941, 1942, 7, 82, 2, 2, 1942,
	1946, 5, 340, 171, 2, 1943, 1945, 5, 82, 42, 2, 1944, 1943, 3, 2, 2, 2,
	1945, 1948, 3, 2, 2, 2, 1946, 1944, 3, 2, 2, 2, 1946, 1947, 3, 2, 2, 2,
	1947, 1949, 3, 2, 2, 2, 1948, 1946, 3, 2, 2, 2, 1949, 1950, 5, 136, 69,
	2, 1950, 1951, 5, 342, 172, 2, 1951, 255, 3, 2, 2, 2, 1952, 1953, 7, 43,
	2, 2, 1953, 1954, 7, 24, 2, 2, 1954, 1958, 5, 340, 171, 2, 1955, 1957,
	5, 82, 42, 2, 1956, 1955, 3, 2, 2, 2, 1957, 1960, 3, 2, 2, 2, 1958, 1956,
	3, 2, 2, 2, 1958, 1959, 3, 2, 2, 2, 1959, 1961, 3, 2, 2, 2, 1960, 1958,
	3, 2, 2, 2, 1961, 1962, 5, 136, 69, 2, 1962, 1966, 5, 342, 172, 2, 1963,
	1965, 5, 258, 130, 2, 1964, 1963, 3, 2, 2, 2, 1965, 1968, 3, 2, 2, 2, 1966,
	1964, 3, 2, 2, 2, 1966, 1967, 3, 2, 2, 2, 1967, 1969, 3, 2, 2, 2, 1968,
	1966, 3, 2, 2, 2, 1969, 1970, 5, 116, 59, 2, 1970, 1988, 3, 2, 2, 2, 1971,
	1972, 7, 43, 2, 2, 1972, 1973, 7, 24, 2, 2, 1973, 1977, 5, 340, 171, 2,
	1974, 1976, 5, 82, 42, 2, 1975, 1974, 3, 2, 2, 2, 1976, 1979, 3, 2, 2,
	2, 1977, 1975, 3, 2, 2, 2, 1977, 1978, 3, 2, 2, 2, 1978, 1980, 3, 2, 2,
	2, 1979, 1977, 3, 2, 2, 2, 1980, 1981, 5, 136, 69, 2, 1981, 1983, 5, 342,
	172, 2, 1982, 1984, 5, 258, 130, 2, 1983, 1982, 3, 2, 2, 2, 1984, 1985,
	3, 2, 2, 2, 1985, 1983, 3, 2, 2, 2, 1985, 1986, 3, 2, 2, 2, 1986, 1988,
	3, 2, 2, 2, 1987, 1952, 3, 2, 2, 2, 1987, 1971, 3, 2, 2, 2, 1988, 257,
	3, 2, 2, 2, 1989, 1994, 5, 332, 167, 2, 1990, 1991, 5, 332, 167, 2, 1991,
	1992, 5, 268, 135, 2, 1992, 1994, 3, 2, 2, 2, 1993, 1989, 3, 2, 2, 2, 1993,
	1990, 3, 2, 2, 2, 1994, 1995, 3, 2, 2, 2, 1995, 1999, 5, 340, 171, 2, 1996,
	1998, 5, 82, 42, 2, 1997, 1996, 3, 2, 2, 2, 1998, 2001, 3, 2, 2, 2, 1999,
	1997, 3, 2, 2, 2, 1999, 2000, 3, 2, 2, 2, 2000, 2002, 3, 2, 2, 2, 2001,
	1999, 3, 2, 2, 2, 2002, 2003, 5, 136, 69, 2, 2003, 2004, 5, 342, 172, 2,
	2004, 259, 3, 2, 2, 2, 2005, 2014, 5, 262, 132, 2, 2006, 2014, 5, 264,
	133, 2, 2007, 2014, 7, 78, 2, 2, 2008, 2014, 7, 79, 2, 2, 2009, 2014, 7,
	74, 2, 2, 2010, 2014, 7, 75, 2, 2, 2011, 2014, 5, 298, 150, 2, 2012, 2014,
	7, 76, 2, 2, 2013, 2005, 3, 2, 2, 2, 2013, 2006, 3, 2, 2, 2, 2013, 2007,
	3, 2, 2, 2, 2013, 2008, 3, 2, 2, 2, 2013, 2009, 3, 2, 2, 2, 2013, 2010,
	3, 2, 2, 2, 2013, 2011, 3, 2, 2, 2, 2013, 2012, 3, 2, 2, 2, 2014, 261,
	3, 2, 2, 2, 2015, 2016, 5, 264, 133, 2, 2016, 2017, 5, 328, 165, 2, 2017,
	2018, 5, 264, 133, 2, 2018, 263, 3, 2, 2, 2, 2019, 2020, 7, 77, 2, 2, 2020,
	265, 3, 2, 2, 2, 2021, 2033, 5, 292, 147, 2, 2022, 2033, 5, 274, 138, 2,
	2023, 2033, 5, 276, 139, 2, 2024, 2033, 5, 278, 140, 2, 2025, 2033, 5,
	280, 141, 2, 2026, 2033, 5, 282, 142, 2, 2027, 2033, 5, 284, 143, 2, 2028,
	2033, 5, 286, 144, 2, 2029, 2033, 5, 296, 149, 2, 2030, 2033, 5, 288, 145,
	2, 2031, 2033, 5, 290, 146, 2, 2032, 2021, 3, 2, 2, 2, 2032, 2022, 3, 2,
	2, 2, 2032, 2023, 3, 2, 2, 2, 2032, 2024, 3, 2, 2, 2, 2032, 2025, 3, 2,
	2, 2, 2032, 2026, 3, 2, 2, 2, 2032, 2027, 3, 2, 2, 2, 2032, 2028, 3, 2,
	2, 2, 2032, 2029, 3, 2, 2, 2, 2032, 2030, 3, 2, 2, 2, 2032, 2031, 3, 2,
	2, 2, 2033, 267, 3, 2, 2, 2, 2034, 2038, 5, 266, 134, 2, 2035, 2038, 5,
	272, 137, 2, 2036, 2038, 5, 270, 136, 2, 2037, 2034, 3, 2, 2, 2, 2037,
	2035, 3, 2, 2, 2, 2037, 2036, 3, 2, 2, 2, 2038, 269, 3, 2, 2, 2, 2039,
	2042, 7, 43, 2, 2, 2040, 2043, 5, 266, 134, 2, 2041, 2043, 5, 272, 137,
	2, 2042, 2040, 3, 2, 2, 2, 2042, 2041, 3, 2, 2, 2, 2043, 271, 3, 2, 2,
	2, 2044, 2045, 7, 41, 2, 2, 2045, 2046, 5, 266, 134, 2, 2046, 273, 3, 2,
	2, 2, 2047, 2048, 5, 348, 175, 2, 2048, 2049, 7, 18, 2, 2, 2049, 2050,
	5, 268, 135, 2, 2050, 2051, 5, 350, 176, 2, 2051, 275, 3, 2, 2, 2, 2052,
	2053, 5, 348, 175, 2, 2053, 2054, 7, 19, 2, 2, 2054, 2055, 5, 268, 135,
	2, 2055, 2056, 5, 350, 176, 2, 2056, 277, 3, 2, 2, 2, 2057, 2058, 5, 348,
	175, 2, 2058, 2059, 7, 22, 2, 2, 2059, 2060, 5, 268, 135, 2, 2060, 2061,
	5, 350, 176, 2, 2061, 279, 3, 2, 2, 2, 2062, 2063, 5, 348, 175, 2, 2063,
	2064, 5, 268, 135, 2, 2064, 2065, 7, 23, 2, 2, 2065, 2066, 5, 268, 135,
	2, 2066, 2067, 5, 350, 176, 2, 2067, 281, 3, 2, 2, 2, 2068, 2069, 5, 348,
	175, 2, 2069, 2070, 7, 20, 2, 2, 2070, 2071, 7, 32, 2, 2, 2071, 2072, 5,
	268, 135, 2, 2072, 2073, 5, 350, 176, 2, 2073, 283, 3, 2, 2, 2, 2074, 2075,
	5, 348, 175, 2, 2075, 2076, 7, 20, 2, 2, 2076, 2077, 7, 31, 2, 2, 2077,
	2078, 5, 268, 135, 2, 2078, 2079, 5, 350, 176, 2, 2079, 285, 3, 2, 2, 2,
	2080, 2081, 5, 348, 175, 2, 2081, 2082, 7, 19, 2, 2, 2082, 2083, 7, 31,
	2, 2, 2083, 2084, 5, 268, 135, 2, 2084, 2085, 5, 350, 176, 2, 2085, 287,
	3, 2, 2, 2, 2086, 2088, 5, 200, 101, 2, 2087, 2089, 5, 208, 105, 2, 2088,
	2087, 3, 2, 2, 2, 2088, 2089, 3, 2, 2, 2, 2089, 289, 3, 2, 2, 2, 2090,
	2091, 5, 344, 173, 2, 2091, 2092, 5, 294, 148, 2, 2092, 2094, 9, 3, 2,
	2, 2093, 2095, 7, 42, 2, 2, 2094, 2093, 3, 2, 2, 2, 2094, 2095, 3, 2, 2,
	2, 2095, 2099, 3, 2, 2, 2, 2096, 2098, 7, 85, 2, 2, 2097, 2096, 3, 2, 2,
	2, 2098, 2101, 3, 2, 2, 2, 2099, 2097, 3, 2, 2, 2, 2099, 2100, 3, 2, 2,
	2, 2100, 2102, 3, 2, 2, 2, 2101, 2099, 3, 2, 2, 2, 2102, 2103, 5, 294,
	148, 2, 2103, 2104, 5, 346, 174, 2, 2104, 291, 3, 2, 2, 2, 2105, 2106,
	7, 72, 2, 2, 2106, 293, 3, 2, 2, 2, 2107, 2109, 5, 268, 135, 2, 2108, 2107,
	3, 2, 2, 2, 2108, 2109, 3, 2, 2, 2, 2109, 2115, 3, 2, 2, 2, 2110, 2111,
	5, 338, 170, 2, 2111, 2112, 5, 268, 135, 2, 2112, 2114, 3, 2, 2, 2, 2113,
	2110, 3, 2, 2, 2, 2114, 2117, 3, 2, 2, 2, 2115, 2113, 3, 2, 2, 2, 2115,
	2116, 3, 2, 2, 2, 2116, 295, 3, 2, 2, 2, 2117, 2115, 3, 2, 2, 2, 2118,
	2135, 7, 56, 2, 2, 2119, 2135, 7, 57, 2, 2, 2120, 2135, 7, 58, 2, 2, 2121,
	2135, 7, 59, 2, 2, 2122, 2135, 7, 60, 2, 2, 2123, 2135, 7, 61, 2, 2, 2124,
	2135, 7, 62, 2, 2, 2125, 2135, 7, 63, 2, 2, 2126, 2135, 7, 64, 2, 2, 2127,
	2135, 7, 65, 2, 2, 2128, 2135, 7, 66, 2, 2, 2129, 2135, 7, 67, 2, 2, 2130,
	2135, 7, 68, 2, 2, 2131, 2135, 7, 69, 2, 2, 2132, 2135, 7, 70, 2, 2, 2133,
	2135, 7, 71, 2, 2, 2134, 2118, 3, 2, 2, 2, 2134, 2119, 3, 2, 2, 2, 2134,
	2120, 3, 2, 2, 2, 2134, 2121, 3, 2, 2, 2, 2134, 2122, 3, 2, 2, 2, 2134,
	2123, 3, 2, 2, 2, 2134, 2124, 3, 2, 2, 2, 2134, 2125, 3, 2, 2, 2, 2134,
	2126, 3, 2, 2, 2, 2134, 2127, 3, 2, 2, 2, 2134, 2128, 3, 2, 2, 2, 2134,
	2129, 3, 2, 2, 2, 2134, 2130, 3, 2, 2, 2, 2134, 2131, 3, 2, 2, 2, 2134,
	2132, 3, 2, 2, 2, 2134, 2133, 3, 2, 2, 2, 2135, 297, 3, 2, 2, 2, 2136,
	2137, 7, 73, 2, 2, 2137, 299, 3, 2, 2, 2, 2138, 2141, 7, 74, 2, 2, 2139,
	2141, 7, 75, 2, 2, 2140, 2138, 3, 2, 2, 2, 2140, 2139, 3, 2, 2, 2, 2141,
	301, 3, 2, 2, 2, 2142, 2148, 5, 304, 153, 2, 2143, 2148, 5, 306, 154, 2,
	2144, 2148, 5, 310, 156, 2, 2145, 2148, 5, 312, 157, 2, 2146, 2148, 5,
	314, 158, 2, 2147, 2142, 3, 2, 2, 2, 2147, 2143, 3, 2, 2, 2, 2147, 2144,
	3, 2, 2, 2, 2147, 2145, 3, 2, 2, 2, 2147, 2146, 3, 2, 2, 2, 2148, 2150,
	3, 2, 2, 2, 2149, 2151, 7, 85, 2, 2, 2150, 2149, 3, 2, 2, 2, 2150, 2151,
	3, 2, 2, 2, 2151, 303, 3, 2, 2, 2, 2152, 2153, 7, 55, 2, 2, 2153, 2154,
	7, 52, 2, 2, 2154, 2155, 7, 55, 2, 2, 2155, 305, 3, 2, 2, 2, 2156, 2157,
	7, 55, 2, 2, 2157, 2158, 7, 53, 2, 2, 2158, 2159, 7, 55, 2, 2, 2159, 307,
	3, 2, 2, 2, 2160, 2161, 7, 55, 2, 2, 2161, 2162, 7, 46, 2, 2, 2162, 2163,
	7, 55, 2, 2, 2163, 309, 3, 2, 2, 2, 2164, 2165, 7, 55, 2, 2, 2165, 2166,
	7, 54, 2, 2, 2166, 2167, 7, 55, 2, 2, 2167, 311, 3, 2, 2, 2, 2168, 2169,
	7, 55, 2, 2, 2169, 2170, 7, 31, 2, 2, 2170, 2171, 7, 55, 2, 2, 2171, 313,
	3, 2, 2, 2, 2172, 2173, 7, 55, 2, 2, 2173, 2174, 7, 32, 2, 2, 2174, 2175,
	7, 55, 2, 2, 2175, 315, 3, 2, 2, 2, 2176, 2177, 7, 17, 2, 2, 2177, 317,
	3, 2, 2, 2, 2178, 2180, 9, 6, 2, 2, 2179, 2181, 7, 85, 2, 2, 2180, 2179,
	3, 2, 2, 2, 2180, 2181, 3, 2, 2, 2, 2181, 319, 3, 2, 2, 2, 2182, 2184,
	9, 7, 2, 2, 2183, 2185, 7, 85, 2, 2, 2184, 2183, 3, 2, 2, 2, 2184, 2185,
	3, 2, 2, 2, 2185, 321, 3, 2, 2, 2, 2186, 2188, 9, 8, 2, 2, 2187, 2189,
	7, 85, 2, 2, 2188, 2187, 3, 2, 2, 2, 2188, 2189, 3, 2, 2, 2, 2189, 323,
	3, 2, 2, 2, 2190, 2192, 9, 9, 2, 2, 2191, 2193, 7, 85, 2, 2, 2192, 2191,
	3, 2, 2, 2, 2192, 2193, 3, 2, 2, 2, 2193, 325, 3, 2, 2, 2, 2194, 2196,
	9, 10, 2, 2, 2195, 2197, 7, 85, 2, 2, 2196, 2195, 3, 2, 2, 2, 2196, 2197,
	3, 2, 2, 2, 2197, 327, 3, 2, 2, 2, 2198, 2200, 7, 20, 2, 2, 2199, 2201,
	7, 85, 2, 2, 2200, 2199, 3, 2, 2, 2, 2200, 2201, 3, 2, 2, 2, 2201, 329,
	3, 2, 2, 2, 2202, 2203, 7, 46, 2, 2, 2203, 331, 3, 2, 2, 2, 2204, 2205,
	5, 334, 168, 2, 2205, 333, 3, 2, 2, 2, 2206, 2210, 9, 11, 2, 2, 2207, 2210,
	5, 296, 149, 2, 2208, 2210, 5, 292, 147, 2, 2209, 2206, 3, 2, 2, 2, 2209,
	2207, 3, 2, 2, 2, 2209, 2208, 3, 2, 2, 2, 2210, 335, 3, 2, 2, 2, 2211,
	2212, 9, 12, 2, 2, 2212, 337, 3, 2, 2, 2, 2213, 2217, 7, 21, 2, 2, 2214,
	2216, 7, 85, 2, 2, 2215, 2214, 3, 2, 2, 2, 2216, 2219, 3, 2, 2, 2, 2217,
	2215, 3, 2, 2, 2, 2217, 2218, 3, 2, 2, 2, 2218, 339, 3, 2, 2, 2, 2219,
	2217, 3, 2, 2, 2, 2220, 2224, 7, 36, 2, 2, 2221, 2223, 7, 85, 2, 2, 2222,
	2221, 3, 2, 2, 2, 2223, 2226, 3, 2, 2, 2, 2224, 2222, 3, 2, 2, 2, 2224,
	2225, 3, 2, 2, 2, 2225, 341, 3, 2, 2, 2, 2226, 2224, 3, 2, 2, 2, 2227,
	2229, 7, 85, 2, 2, 2228, 2227, 3, 2, 2, 2, 2229, 2232, 3, 2, 2, 2, 2230,
	2228, 3, 2, 2, 2, 2230, 2231, 3, 2, 2, 2, 2231, 2233, 3, 2, 2, 2, 2232,
	2230, 3, 2, 2, 2, 2233, 2234, 7, 37, 2, 2, 2234, 343, 3, 2, 2, 2, 2235,
	2236, 7, 34, 2, 2, 2236, 345, 3, 2, 2, 2, 2237, 2238, 7, 35, 2, 2, 2238,
	347, 3, 2, 2, 2, 2239, 2243, 7, 38, 2, 2, 2240, 2242, 7, 85, 2, 2, 2241,
	2240, 3, 2, 2, 2, 2242, 2245, 3, 2, 2, 2, 2243, 2241, 3, 2, 2, 2, 2243,
	2244, 3, 2, 2, 2, 2244, 349, 3, 2, 2, 2, 2245, 2243, 3, 2, 2, 2, 2246,
	2248, 7, 85, 2, 2, 2247, 2246, 3, 2, 2, 2, 2248, 2251, 3, 2, 2, 2, 2249,
	2247, 3, 2, 2, 2, 2249, 2250, 3, 2, 2, 2, 2250, 2252, 3, 2, 2, 2, 2251,
	2249, 3, 2, 2, 2, 2252, 2253, 7, 39, 2, 2, 2253, 351, 3, 2, 2, 2, 251,
	355, 360, 364, 370, 376, 384, 386, 393, 397, 401, 415, 427, 435, 442, 449,
	455, 457, 463, 472, 475, 480, 488, 490, 495, 499, 506, 510, 517, 522, 527,
	534, 541, 545, 552, 556, 562, 568, 570, 576, 588, 595, 602, 606, 610, 616,
	618, 624, 630, 638, 640, 645, 649, 656, 661, 666, 673, 684, 690, 705, 711,
	713, 719, 726, 731, 733, 739, 743, 752, 755, 763, 765, 770, 774, 781, 786,
	791, 798, 805, 809, 817, 819, 824, 828, 832, 839, 844, 849, 856, 863, 867,
	874, 880, 882, 888, 898, 901, 909, 911, 916, 920, 926, 931, 940, 947, 952,
	957, 964, 972, 978, 992, 999, 1003, 1010, 1014, 1018, 1023, 1046, 1053,
	1063, 1070, 1079, 1082, 1088, 1098, 1103, 1110, 1121, 1131, 1143, 1148,
	1156, 1165, 1170, 1180, 1185, 1194, 1212, 1219, 1230, 1237, 1241, 1246,
	1256, 1262, 1272, 1292, 1296, 1329, 1334, 1342, 1347, 1355, 1378, 1422,
	1424, 1429, 1433, 1438, 1447, 1450, 1460, 1465, 1471, 1482, 1488, 1492,
	1503, 1513, 1522, 1525, 1528, 1546, 1560, 1572, 1580, 1597, 1610, 1622,
	1635, 1650, 1654, 1662, 1668, 1678, 1685, 1694, 1701, 1707, 1715, 1721,
	1727, 1732, 1740, 1751, 1765, 1770, 1779, 1796, 1801, 1806, 1817, 1819,
	1823, 1829, 1838, 1848, 1861, 1872, 1883, 1891, 1898, 1912, 1918, 1923,
	1933, 1939, 1946, 1958, 1966, 1977, 1985, 1987, 1993, 1999, 2013, 2032,
	2037, 2042, 2088, 2094, 2099, 2108, 2115, 2134, 2140, 2147, 2150, 2180,
	2184, 2188, 2192, 2196, 2200, 2209, 2217, 2224, 2230, 2243, 2249,
}
var deserializer = antlr.NewATNDeserializer(nil)
var deserializedATN = deserializer.DeserializeFromUInt16(parserATN)

var literalNames = []string{
	"", "'*^'", "'/^'", "'\\^'", "'++'", "'--'", "'+='", "'-='", "'*='", "'/='",
	"'\\='", "'=='", "'<='", "'>='", "'><'", "'<>'", "'...'", "'..'", "'.'",
	"','", "':>'", "'=>'", "'->'", "'<-'", "'->>'", "'<<-'", "'='", "'<<'",
	"'>>'", "'<'", "'>'", "';'", "'('", "')'", "'{'", "'}'", "'['", "']'",
	"':'", "'?'", "'@'", "'!'", "'$'", "'%'", "'~'", "'+'", "'-'", "'*'", "'/'",
	"'\\'", "'&'", "'|'", "'^'", "'`'", "'i8'", "'u8'", "'i16'", "'u16'", "'i32'",
	"'u32'", "'i64'", "'u64'", "'f32'", "'f64'", "'chr'", "'str'", "'bool'",
	"'int'", "'num'", "'byte'", "'any'", "'nil'", "'true'", "'false'", "'undef'",
	"", "", "", "", "", "'_'",
}
var symbolicNames = []string{
	"", "Pow", "Root", "Log", "Add_Add", "Sub_Sub", "Add_Equal", "Sub_Equal",
	"Mul_Equal", "Div_Equal", "Mod_Equal", "Equal_Equal", "Less_Equal", "Greater_Equal",
	"Not_Equal", "Combine_Equal", "Dot_Dot_Dot", "Dot_Dot", "Dot", "Comma",
	"Colon_Arrow", "Equal_Arrow", "Right_Arrow", "Left_Arrow", "Right_Flow",
	"Left_Flow", "Equal", "Less_Less", "Greater_Greater", "Less", "Greater",
	"Semi", "Left_Paren", "Right_Paren", "Left_Brace", "Right_Brace", "Left_Brack",
	"Right_Brack", "Colon", "Question", "At", "Bang", "Coin", "Cent", "Wave",
	"Add", "Sub", "Mul", "Div", "Mod", "And", "Or", "Xor", "Grave", "TypeI8",
	"TypeU8", "TypeI16", "TypeU16", "TypeI32", "TypeU32", "TypeI64", "TypeU64",
	"TypeF32", "TypeF64", "TypeChr", "TypeStr", "TypeBool", "TypeInt", "TypeNum",
	"TypeByte", "TypeAny", "NilLiteral", "TrueLiteral", "FalseLiteral", "UndefinedLiteral",
	"NumberLiteral", "TextLiteral", "CharLiteral", "IDPrivate", "IDPublic",
	"Discard", "Comment_Block", "Comment_Line", "New_Line", "WS",
}

var ruleNames = []string{
	"program", "statement", "exportStatement", "importStatement", "namespaceSupportStatement",
	"typeAliasStatement", "typeRedefineStatement", "enumStatement", "enumSupportStatement",
	"namespaceVariableStatement", "namespaceConstantStatement", "namespaceFunctionStatement",
	"packageStatement", "packageFieldStatement", "packageSupportStatement",
	"includeStatement", "packageNewStatement", "packageVariableStatement",
	"packageFunctionStatement", "packageControlSubStatement", "packageEventStatement",
	"packageImplementStatement", "implementStatement", "implementSupportStatement",
	"implementVariableStatement", "implementFunctionStatement", "overrideVariableStatement",
	"overrideFunctionStatement", "protocolStatement", "protocolSupportStatement",
	"protocolVariableStatement", "protocolFunctionStatement", "functionStatement",
	"returnStatement", "returnAwaitStatement", "yieldReturnStatement", "yieldBreakStatement",
	"parameterClauseIn", "parameterClauseOut", "parameter", "functionSupportStatement",
	"judgeCaseStatement", "caseStatement", "caseExprStatement", "judgeStatement",
	"judgeElseStatement", "judgeIfStatement", "judgeElseIfStatement", "loopStatement",
	"loopEachStatement", "loopCaseStatement", "loopElseStatement", "loopJumpStatement",
	"loopContinueStatement", "checkStatement", "usingStatement", "checkErrorStatement",
	"checkFinallyStatment", "checkReportStatement", "iteratorStatement", "variableStatement",
	"variableDeclaredStatement", "channelAssignStatement", "assignStatement",
	"expressionStatement", "idExpression", "idExprItem", "tupleExpression",
	"primaryExpression", "expression", "callExpression", "tuple", "expressionList",
	"annotationSupport", "annotation", "annotationList", "annotationItem",
	"callFunc", "callChannel", "callElement", "callPkg", "callNew", "orElse",
	"typeConversion", "pkgAssign", "pkgAssignElement", "listAssign", "setAssign",
	"dictionaryAssign", "callAwait", "callAsync", "list", "set", "dictionary",
	"dictionaryElement", "slice", "sliceFull", "sliceStart", "sliceEnd", "nameSpaceItem",
	"name", "templateDefine", "templateDefineItem", "templateCall", "lambda",
	"lambdaIn", "pkgAnonymous", "pkgAnonymousAssign", "pkgAnonymousAssignElement",
	"functionExpression", "plusMinus", "negate", "bitwiseNotExpression", "linq",
	"linqHeadItem", "linqItem", "stringExpression", "stringExpressionElement",
	"judgeExpression", "judgeExpressionElseStatement", "judgeExpressionIfStatement",
	"judgeExpressionElseIfStatement", "judgeCaseExpression", "caseExpressionStatement",
	"loopExpression", "loopEachExpression", "loopElseExpression", "checkExpression",
	"checkErrorExpression", "dataStatement", "floatExpr", "integerExpr", "typeNotNull",
	"typeType", "typeReference", "typeNullable", "typeArray", "typeList", "typeSet",
	"typeDictionary", "typeStack", "typeQueue", "typeChannel", "typePackage",
	"typeFunction", "typeAny", "typeFunctionParameterClause", "typeBasic",
	"nilExpr", "boolExpr", "bitwise", "bitwiseAnd", "bitwiseOr", "bitwiseNot",
	"bitwiseXor", "bitwiseLeftShift", "bitwiseRightShift", "judgeCombine",
	"judge", "assign", "add", "mul", "pow", "call", "wave", "id", "idItem",
	"end", "more", "left_brace", "right_brace", "left_paren", "right_paren",
	"left_brack", "right_brack",
}
var decisionToDFA = make([]*antlr.DFA, len(deserializedATN.DecisionToState))

func init() {
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

type LiteParser struct {
	*antlr.BaseParser
}

func NewLiteParser(input antlr.TokenStream) *LiteParser {
	this := new(LiteParser)

	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "LiteParser.g4"

	return this
}

// LiteParser tokens.
const (
	LiteParserEOF              = antlr.TokenEOF
	LiteParserPow              = 1
	LiteParserRoot             = 2
	LiteParserLog              = 3
	LiteParserAdd_Add          = 4
	LiteParserSub_Sub          = 5
	LiteParserAdd_Equal        = 6
	LiteParserSub_Equal        = 7
	LiteParserMul_Equal        = 8
	LiteParserDiv_Equal        = 9
	LiteParserMod_Equal        = 10
	LiteParserEqual_Equal      = 11
	LiteParserLess_Equal       = 12
	LiteParserGreater_Equal    = 13
	LiteParserNot_Equal        = 14
	LiteParserCombine_Equal    = 15
	LiteParserDot_Dot_Dot      = 16
	LiteParserDot_Dot          = 17
	LiteParserDot              = 18
	LiteParserComma            = 19
	LiteParserColon_Arrow      = 20
	LiteParserEqual_Arrow      = 21
	LiteParserRight_Arrow      = 22
	LiteParserLeft_Arrow       = 23
	LiteParserRight_Flow       = 24
	LiteParserLeft_Flow        = 25
	LiteParserEqual            = 26
	LiteParserLess_Less        = 27
	LiteParserGreater_Greater  = 28
	LiteParserLess             = 29
	LiteParserGreater          = 30
	LiteParserSemi             = 31
	LiteParserLeft_Paren       = 32
	LiteParserRight_Paren      = 33
	LiteParserLeft_Brace       = 34
	LiteParserRight_Brace      = 35
	LiteParserLeft_Brack       = 36
	LiteParserRight_Brack      = 37
	LiteParserColon            = 38
	LiteParserQuestion         = 39
	LiteParserAt               = 40
	LiteParserBang             = 41
	LiteParserCoin             = 42
	LiteParserCent             = 43
	LiteParserWave             = 44
	LiteParserAdd              = 45
	LiteParserSub              = 46
	LiteParserMul              = 47
	LiteParserDiv              = 48
	LiteParserMod              = 49
	LiteParserAnd              = 50
	LiteParserOr               = 51
	LiteParserXor              = 52
	LiteParserGrave            = 53
	LiteParserTypeI8           = 54
	LiteParserTypeU8           = 55
	LiteParserTypeI16          = 56
	LiteParserTypeU16          = 57
	LiteParserTypeI32          = 58
	LiteParserTypeU32          = 59
	LiteParserTypeI64          = 60
	LiteParserTypeU64          = 61
	LiteParserTypeF32          = 62
	LiteParserTypeF64          = 63
	LiteParserTypeChr          = 64
	LiteParserTypeStr          = 65
	LiteParserTypeBool         = 66
	LiteParserTypeInt          = 67
	LiteParserTypeNum          = 68
	LiteParserTypeByte         = 69
	LiteParserTypeAny          = 70
	LiteParserNilLiteral       = 71
	LiteParserTrueLiteral      = 72
	LiteParserFalseLiteral     = 73
	LiteParserUndefinedLiteral = 74
	LiteParserNumberLiteral    = 75
	LiteParserTextLiteral      = 76
	LiteParserCharLiteral      = 77
	LiteParserIDPrivate        = 78
	LiteParserIDPublic         = 79
	LiteParserDiscard          = 80
	LiteParserComment_Block    = 81
	LiteParserComment_Line     = 82
	LiteParserNew_Line         = 83
	LiteParserWS               = 84
)

// LiteParser rules.
const (
	LiteParserRULE_program                        = 0
	LiteParserRULE_statement                      = 1
	LiteParserRULE_exportStatement                = 2
	LiteParserRULE_importStatement                = 3
	LiteParserRULE_namespaceSupportStatement      = 4
	LiteParserRULE_typeAliasStatement             = 5
	LiteParserRULE_typeRedefineStatement          = 6
	LiteParserRULE_enumStatement                  = 7
	LiteParserRULE_enumSupportStatement           = 8
	LiteParserRULE_namespaceVariableStatement     = 9
	LiteParserRULE_namespaceConstantStatement     = 10
	LiteParserRULE_namespaceFunctionStatement     = 11
	LiteParserRULE_packageStatement               = 12
	LiteParserRULE_packageFieldStatement          = 13
	LiteParserRULE_packageSupportStatement        = 14
	LiteParserRULE_includeStatement               = 15
	LiteParserRULE_packageNewStatement            = 16
	LiteParserRULE_packageVariableStatement       = 17
	LiteParserRULE_packageFunctionStatement       = 18
	LiteParserRULE_packageControlSubStatement     = 19
	LiteParserRULE_packageEventStatement          = 20
	LiteParserRULE_packageImplementStatement      = 21
	LiteParserRULE_implementStatement             = 22
	LiteParserRULE_implementSupportStatement      = 23
	LiteParserRULE_implementVariableStatement     = 24
	LiteParserRULE_implementFunctionStatement     = 25
	LiteParserRULE_overrideVariableStatement      = 26
	LiteParserRULE_overrideFunctionStatement      = 27
	LiteParserRULE_protocolStatement              = 28
	LiteParserRULE_protocolSupportStatement       = 29
	LiteParserRULE_protocolVariableStatement      = 30
	LiteParserRULE_protocolFunctionStatement      = 31
	LiteParserRULE_functionStatement              = 32
	LiteParserRULE_returnStatement                = 33
	LiteParserRULE_returnAwaitStatement           = 34
	LiteParserRULE_yieldReturnStatement           = 35
	LiteParserRULE_yieldBreakStatement            = 36
	LiteParserRULE_parameterClauseIn              = 37
	LiteParserRULE_parameterClauseOut             = 38
	LiteParserRULE_parameter                      = 39
	LiteParserRULE_functionSupportStatement       = 40
	LiteParserRULE_judgeCaseStatement             = 41
	LiteParserRULE_caseStatement                  = 42
	LiteParserRULE_caseExprStatement              = 43
	LiteParserRULE_judgeStatement                 = 44
	LiteParserRULE_judgeElseStatement             = 45
	LiteParserRULE_judgeIfStatement               = 46
	LiteParserRULE_judgeElseIfStatement           = 47
	LiteParserRULE_loopStatement                  = 48
	LiteParserRULE_loopEachStatement              = 49
	LiteParserRULE_loopCaseStatement              = 50
	LiteParserRULE_loopElseStatement              = 51
	LiteParserRULE_loopJumpStatement              = 52
	LiteParserRULE_loopContinueStatement          = 53
	LiteParserRULE_checkStatement                 = 54
	LiteParserRULE_usingStatement                 = 55
	LiteParserRULE_checkErrorStatement            = 56
	LiteParserRULE_checkFinallyStatment           = 57
	LiteParserRULE_checkReportStatement           = 58
	LiteParserRULE_iteratorStatement              = 59
	LiteParserRULE_variableStatement              = 60
	LiteParserRULE_variableDeclaredStatement      = 61
	LiteParserRULE_channelAssignStatement         = 62
	LiteParserRULE_assignStatement                = 63
	LiteParserRULE_expressionStatement            = 64
	LiteParserRULE_idExpression                   = 65
	LiteParserRULE_idExprItem                     = 66
	LiteParserRULE_tupleExpression                = 67
	LiteParserRULE_primaryExpression              = 68
	LiteParserRULE_expression                     = 69
	LiteParserRULE_callExpression                 = 70
	LiteParserRULE_tuple                          = 71
	LiteParserRULE_expressionList                 = 72
	LiteParserRULE_annotationSupport              = 73
	LiteParserRULE_annotation                     = 74
	LiteParserRULE_annotationList                 = 75
	LiteParserRULE_annotationItem                 = 76
	LiteParserRULE_callFunc                       = 77
	LiteParserRULE_callChannel                    = 78
	LiteParserRULE_callElement                    = 79
	LiteParserRULE_callPkg                        = 80
	LiteParserRULE_callNew                        = 81
	LiteParserRULE_orElse                         = 82
	LiteParserRULE_typeConversion                 = 83
	LiteParserRULE_pkgAssign                      = 84
	LiteParserRULE_pkgAssignElement               = 85
	LiteParserRULE_listAssign                     = 86
	LiteParserRULE_setAssign                      = 87
	LiteParserRULE_dictionaryAssign               = 88
	LiteParserRULE_callAwait                      = 89
	LiteParserRULE_callAsync                      = 90
	LiteParserRULE_list                           = 91
	LiteParserRULE_set                            = 92
	LiteParserRULE_dictionary                     = 93
	LiteParserRULE_dictionaryElement              = 94
	LiteParserRULE_slice                          = 95
	LiteParserRULE_sliceFull                      = 96
	LiteParserRULE_sliceStart                     = 97
	LiteParserRULE_sliceEnd                       = 98
	LiteParserRULE_nameSpaceItem                  = 99
	LiteParserRULE_name                           = 100
	LiteParserRULE_templateDefine                 = 101
	LiteParserRULE_templateDefineItem             = 102
	LiteParserRULE_templateCall                   = 103
	LiteParserRULE_lambda                         = 104
	LiteParserRULE_lambdaIn                       = 105
	LiteParserRULE_pkgAnonymous                   = 106
	LiteParserRULE_pkgAnonymousAssign             = 107
	LiteParserRULE_pkgAnonymousAssignElement      = 108
	LiteParserRULE_functionExpression             = 109
	LiteParserRULE_plusMinus                      = 110
	LiteParserRULE_negate                         = 111
	LiteParserRULE_bitwiseNotExpression           = 112
	LiteParserRULE_linq                           = 113
	LiteParserRULE_linqHeadItem                   = 114
	LiteParserRULE_linqItem                       = 115
	LiteParserRULE_stringExpression               = 116
	LiteParserRULE_stringExpressionElement        = 117
	LiteParserRULE_judgeExpression                = 118
	LiteParserRULE_judgeExpressionElseStatement   = 119
	LiteParserRULE_judgeExpressionIfStatement     = 120
	LiteParserRULE_judgeExpressionElseIfStatement = 121
	LiteParserRULE_judgeCaseExpression            = 122
	LiteParserRULE_caseExpressionStatement        = 123
	LiteParserRULE_loopExpression                 = 124
	LiteParserRULE_loopEachExpression             = 125
	LiteParserRULE_loopElseExpression             = 126
	LiteParserRULE_checkExpression                = 127
	LiteParserRULE_checkErrorExpression           = 128
	LiteParserRULE_dataStatement                  = 129
	LiteParserRULE_floatExpr                      = 130
	LiteParserRULE_integerExpr                    = 131
	LiteParserRULE_typeNotNull                    = 132
	LiteParserRULE_typeType                       = 133
	LiteParserRULE_typeReference                  = 134
	LiteParserRULE_typeNullable                   = 135
	LiteParserRULE_typeArray                      = 136
	LiteParserRULE_typeList                       = 137
	LiteParserRULE_typeSet                        = 138
	LiteParserRULE_typeDictionary                 = 139
	LiteParserRULE_typeStack                      = 140
	LiteParserRULE_typeQueue                      = 141
	LiteParserRULE_typeChannel                    = 142
	LiteParserRULE_typePackage                    = 143
	LiteParserRULE_typeFunction                   = 144
	LiteParserRULE_typeAny                        = 145
	LiteParserRULE_typeFunctionParameterClause    = 146
	LiteParserRULE_typeBasic                      = 147
	LiteParserRULE_nilExpr                        = 148
	LiteParserRULE_boolExpr                       = 149
	LiteParserRULE_bitwise                        = 150
	LiteParserRULE_bitwiseAnd                     = 151
	LiteParserRULE_bitwiseOr                      = 152
	LiteParserRULE_bitwiseNot                     = 153
	LiteParserRULE_bitwiseXor                     = 154
	LiteParserRULE_bitwiseLeftShift               = 155
	LiteParserRULE_bitwiseRightShift              = 156
	LiteParserRULE_judgeCombine                   = 157
	LiteParserRULE_judge                          = 158
	LiteParserRULE_assign                         = 159
	LiteParserRULE_add                            = 160
	LiteParserRULE_mul                            = 161
	LiteParserRULE_pow                            = 162
	LiteParserRULE_call                           = 163
	LiteParserRULE_wave                           = 164
	LiteParserRULE_id                             = 165
	LiteParserRULE_idItem                         = 166
	LiteParserRULE_end                            = 167
	LiteParserRULE_more                           = 168
	LiteParserRULE_left_brace                     = 169
	LiteParserRULE_right_brace                    = 170
	LiteParserRULE_left_paren                     = 171
	LiteParserRULE_right_paren                    = 172
	LiteParserRULE_left_brack                     = 173
	LiteParserRULE_right_brack                    = 174
)

// IProgramContext is an interface to support dynamic dispatch.
type IProgramContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProgramContext differentiates from other interfaces.
	IsProgramContext()
}

type ProgramContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProgramContext() *ProgramContext {
	var p = new(ProgramContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_program
	return p
}

func (*ProgramContext) IsProgramContext() {}

func NewProgramContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProgramContext {
	var p = new(ProgramContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_program

	return p
}

func (s *ProgramContext) GetParser() antlr.Parser { return s.parser }

func (s *ProgramContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *ProgramContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *ProgramContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProgramContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProgramContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitProgram(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Program() (localctx IProgramContext) {
	localctx = NewProgramContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, LiteParserRULE_program)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(351)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == LiteParserLeft_Paren || _la == LiteParserTextLiteral || _la == LiteParserNew_Line {
		{
			p.SetState(350)
			p.Statement()
		}

		p.SetState(353)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementContext() *StatementContext {
	var p = new(StatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_statement
	return p
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) ExportStatement() IExportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExportStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExportStatementContext)
}

func (s *StatementContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *StatementContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *StatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *StatementContext) AllNamespaceSupportStatement() []INamespaceSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INamespaceSupportStatementContext)(nil)).Elem())
	var tst = make([]INamespaceSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INamespaceSupportStatementContext)
		}
	}

	return tst
}

func (s *StatementContext) NamespaceSupportStatement(i int) INamespaceSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamespaceSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INamespaceSupportStatementContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Statement() (localctx IStatementContext) {
	localctx = NewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, LiteParserRULE_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(358)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserNew_Line {
		{
			p.SetState(355)
			p.Match(LiteParserNew_Line)
		}

		p.SetState(360)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(362)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Paren {
		{
			p.SetState(361)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(364)
		p.ExportStatement()
	}
	p.SetState(368)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(365)
				p.Match(LiteParserNew_Line)
			}

		}
		p.SetState(370)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext())
	}
	p.SetState(374)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(371)
				p.NamespaceSupportStatement()
			}

		}
		p.SetState(376)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext())
	}

	return localctx
}

// IExportStatementContext is an interface to support dynamic dispatch.
type IExportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExportStatementContext differentiates from other interfaces.
	IsExportStatementContext()
}

type ExportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExportStatementContext() *ExportStatementContext {
	var p = new(ExportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_exportStatement
	return p
}

func (*ExportStatementContext) IsExportStatementContext() {}

func NewExportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExportStatementContext {
	var p = new(ExportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_exportStatement

	return p
}

func (s *ExportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ExportStatementContext) TextLiteral() antlr.TerminalNode {
	return s.GetToken(LiteParserTextLiteral, 0)
}

func (s *ExportStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *ExportStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *ExportStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ExportStatementContext) AllImportStatement() []IImportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IImportStatementContext)(nil)).Elem())
	var tst = make([]IImportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IImportStatementContext)
		}
	}

	return tst
}

func (s *ExportStatementContext) ImportStatement(i int) IImportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IImportStatementContext)
}

func (s *ExportStatementContext) AllTypeAliasStatement() []ITypeAliasStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeAliasStatementContext)(nil)).Elem())
	var tst = make([]ITypeAliasStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeAliasStatementContext)
		}
	}

	return tst
}

func (s *ExportStatementContext) TypeAliasStatement(i int) ITypeAliasStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAliasStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeAliasStatementContext)
}

func (s *ExportStatementContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *ExportStatementContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *ExportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitExportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) ExportStatement() (localctx IExportStatementContext) {
	localctx = NewExportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, LiteParserRULE_exportStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(377)
		p.Match(LiteParserTextLiteral)
	}
	{
		p.SetState(378)
		p.Left_brace()
	}
	p.SetState(384)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 6, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(382)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(379)
					p.ImportStatement()
				}

			case 2:
				{
					p.SetState(380)
					p.TypeAliasStatement()
				}

			case 3:
				{
					p.SetState(381)
					p.Match(LiteParserNew_Line)
				}

			}

		}
		p.SetState(386)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 6, p.GetParserRuleContext())
	}
	{
		p.SetState(387)
		p.Right_brace()
	}
	{
		p.SetState(388)
		p.End()
	}

	return localctx
}

// IImportStatementContext is an interface to support dynamic dispatch.
type IImportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportStatementContext differentiates from other interfaces.
	IsImportStatementContext()
}

type ImportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportStatementContext() *ImportStatementContext {
	var p = new(ImportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_importStatement
	return p
}

func (*ImportStatementContext) IsImportStatementContext() {}

func NewImportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportStatementContext {
	var p = new(ImportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_importStatement

	return p
}

func (s *ImportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportStatementContext) TextLiteral() antlr.TerminalNode {
	return s.GetToken(LiteParserTextLiteral, 0)
}

func (s *ImportStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ImportStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *ImportStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *ImportStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *ImportStatementContext) Call() ICallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallContext)
}

func (s *ImportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitImportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) ImportStatement() (localctx IImportStatementContext) {
	localctx = NewImportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, LiteParserRULE_importStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(391)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Paren {
		{
			p.SetState(390)
			p.AnnotationSupport()
		}

	}
	p.SetState(399)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la-54)&-(0x1f+1)) == 0 && ((1<<uint((_la-54)))&((1<<(LiteParserTypeI8-54))|(1<<(LiteParserTypeU8-54))|(1<<(LiteParserTypeI16-54))|(1<<(LiteParserTypeU16-54))|(1<<(LiteParserTypeI32-54))|(1<<(LiteParserTypeU32-54))|(1<<(LiteParserTypeI64-54))|(1<<(LiteParserTypeU64-54))|(1<<(LiteParserTypeF32-54))|(1<<(LiteParserTypeF64-54))|(1<<(LiteParserTypeChr-54))|(1<<(LiteParserTypeStr-54))|(1<<(LiteParserTypeBool-54))|(1<<(LiteParserTypeInt-54))|(1<<(LiteParserTypeNum-54))|(1<<(LiteParserTypeByte-54))|(1<<(LiteParserTypeAny-54))|(1<<(LiteParserIDPrivate-54))|(1<<(LiteParserIDPublic-54)))) != 0 {
		{
			p.SetState(393)
			p.Id()
		}
		p.SetState(395)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == LiteParserDot {
			{
				p.SetState(394)
				p.Call()
			}

		}
		{
			p.SetState(397)
			p.Match(LiteParserRight_Arrow)
		}

	}
	{
		p.SetState(401)
		p.Match(LiteParserTextLiteral)
	}
	{
		p.SetState(402)
		p.End()
	}

	return localctx
}

// INamespaceSupportStatementContext is an interface to support dynamic dispatch.
type INamespaceSupportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNamespaceSupportStatementContext differentiates from other interfaces.
	IsNamespaceSupportStatementContext()
}

type NamespaceSupportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamespaceSupportStatementContext() *NamespaceSupportStatementContext {
	var p = new(NamespaceSupportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_namespaceSupportStatement
	return p
}

func (*NamespaceSupportStatementContext) IsNamespaceSupportStatementContext() {}

func NewNamespaceSupportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamespaceSupportStatementContext {
	var p = new(NamespaceSupportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_namespaceSupportStatement

	return p
}

func (s *NamespaceSupportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *NamespaceSupportStatementContext) NamespaceFunctionStatement() INamespaceFunctionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamespaceFunctionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INamespaceFunctionStatementContext)
}

func (s *NamespaceSupportStatementContext) NamespaceVariableStatement() INamespaceVariableStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamespaceVariableStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INamespaceVariableStatementContext)
}

func (s *NamespaceSupportStatementContext) NamespaceConstantStatement() INamespaceConstantStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamespaceConstantStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INamespaceConstantStatementContext)
}

func (s *NamespaceSupportStatementContext) PackageStatement() IPackageStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackageStatementContext)
}

func (s *NamespaceSupportStatementContext) ProtocolStatement() IProtocolStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProtocolStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProtocolStatementContext)
}

func (s *NamespaceSupportStatementContext) ImplementStatement() IImplementStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImplementStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImplementStatementContext)
}

func (s *NamespaceSupportStatementContext) EnumStatement() IEnumStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumStatementContext)
}

func (s *NamespaceSupportStatementContext) TypeRedefineStatement() ITypeRedefineStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeRedefineStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeRedefineStatementContext)
}

func (s *NamespaceSupportStatementContext) New_Line() antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, 0)
}

func (s *NamespaceSupportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamespaceSupportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamespaceSupportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitNamespaceSupportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) NamespaceSupportStatement() (localctx INamespaceSupportStatementContext) {
	localctx = NewNamespaceSupportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, LiteParserRULE_namespaceSupportStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(413)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 10, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(404)
			p.NamespaceFunctionStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(405)
			p.NamespaceVariableStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(406)
			p.NamespaceConstantStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(407)
			p.PackageStatement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(408)
			p.ProtocolStatement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(409)
			p.ImplementStatement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(410)
			p.EnumStatement()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(411)
			p.TypeRedefineStatement()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(412)
			p.Match(LiteParserNew_Line)
		}

	}

	return localctx
}

// ITypeAliasStatementContext is an interface to support dynamic dispatch.
type ITypeAliasStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeAliasStatementContext differentiates from other interfaces.
	IsTypeAliasStatementContext()
}

type TypeAliasStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeAliasStatementContext() *TypeAliasStatementContext {
	var p = new(TypeAliasStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_typeAliasStatement
	return p
}

func (*TypeAliasStatementContext) IsTypeAliasStatementContext() {}

func NewTypeAliasStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeAliasStatementContext {
	var p = new(TypeAliasStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_typeAliasStatement

	return p
}

func (s *TypeAliasStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeAliasStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *TypeAliasStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *TypeAliasStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeAliasStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *TypeAliasStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeAliasStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeAliasStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTypeAliasStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TypeAliasStatement() (localctx ITypeAliasStatementContext) {
	localctx = NewTypeAliasStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, LiteParserRULE_typeAliasStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(415)
		p.Id()
	}
	{
		p.SetState(416)
		p.Match(LiteParserRight_Arrow)
	}
	{
		p.SetState(417)
		p.TypeType()
	}
	{
		p.SetState(418)
		p.End()
	}

	return localctx
}

// ITypeRedefineStatementContext is an interface to support dynamic dispatch.
type ITypeRedefineStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeRedefineStatementContext differentiates from other interfaces.
	IsTypeRedefineStatementContext()
}

type TypeRedefineStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeRedefineStatementContext() *TypeRedefineStatementContext {
	var p = new(TypeRedefineStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_typeRedefineStatement
	return p
}

func (*TypeRedefineStatementContext) IsTypeRedefineStatementContext() {}

func NewTypeRedefineStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeRedefineStatementContext {
	var p = new(TypeRedefineStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_typeRedefineStatement

	return p
}

func (s *TypeRedefineStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeRedefineStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *TypeRedefineStatementContext) Cent() antlr.TerminalNode {
	return s.GetToken(LiteParserCent, 0)
}

func (s *TypeRedefineStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeRedefineStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *TypeRedefineStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(LiteParserColon, 0)
}

func (s *TypeRedefineStatementContext) Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserEqual, 0)
}

func (s *TypeRedefineStatementContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *TypeRedefineStatementContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *TypeRedefineStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeRedefineStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeRedefineStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTypeRedefineStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TypeRedefineStatement() (localctx ITypeRedefineStatementContext) {
	localctx = NewTypeRedefineStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, LiteParserRULE_typeRedefineStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(420)
		p.Id()
	}
	{
		p.SetState(421)
		_la = p.GetTokenStream().LA(1)

		if !(_la == LiteParserEqual || _la == LiteParserColon) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(425)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserNew_Line {
		{
			p.SetState(422)
			p.Match(LiteParserNew_Line)
		}

		p.SetState(427)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(428)
		p.Match(LiteParserCent)
	}
	{
		p.SetState(429)
		p.TypeType()
	}
	{
		p.SetState(430)
		p.End()
	}

	return localctx
}

// IEnumStatementContext is an interface to support dynamic dispatch.
type IEnumStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetP returns the p token.
	GetP() antlr.Token

	// SetP sets the p token.
	SetP(antlr.Token)

	// IsEnumStatementContext differentiates from other interfaces.
	IsEnumStatementContext()
}

type EnumStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	p      antlr.Token
}

func NewEmptyEnumStatementContext() *EnumStatementContext {
	var p = new(EnumStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_enumStatement
	return p
}

func (*EnumStatementContext) IsEnumStatementContext() {}

func NewEnumStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumStatementContext {
	var p = new(EnumStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_enumStatement

	return p
}

func (s *EnumStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumStatementContext) GetP() antlr.Token { return s.p }

func (s *EnumStatementContext) SetP(v antlr.Token) { s.p = v }

func (s *EnumStatementContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *EnumStatementContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *EnumStatementContext) Cent() antlr.TerminalNode {
	return s.GetToken(LiteParserCent, 0)
}

func (s *EnumStatementContext) AllQuestion() []antlr.TerminalNode {
	return s.GetTokens(LiteParserQuestion)
}

func (s *EnumStatementContext) Question(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserQuestion, i)
}

func (s *EnumStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *EnumStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *EnumStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *EnumStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(LiteParserColon, 0)
}

func (s *EnumStatementContext) Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserEqual, 0)
}

func (s *EnumStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *EnumStatementContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *EnumStatementContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *EnumStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *EnumStatementContext) AllEnumSupportStatement() []IEnumSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEnumSupportStatementContext)(nil)).Elem())
	var tst = make([]IEnumSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEnumSupportStatementContext)
		}
	}

	return tst
}

func (s *EnumStatementContext) EnumSupportStatement(i int) IEnumSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEnumSupportStatementContext)
}

func (s *EnumStatementContext) More() IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *EnumStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitEnumStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) EnumStatement() (localctx IEnumStatementContext) {
	localctx = NewEnumStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, LiteParserRULE_enumStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(433)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Paren {
		{
			p.SetState(432)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(435)
		p.Id()
	}
	{
		p.SetState(436)
		_la = p.GetTokenStream().LA(1)

		if !(_la == LiteParserEqual || _la == LiteParserColon) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(440)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserNew_Line {
		{
			p.SetState(437)
			p.Match(LiteParserNew_Line)
		}

		p.SetState(442)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(443)
		p.Match(LiteParserCent)
	}
	{
		p.SetState(444)
		p.Match(LiteParserQuestion)
	}
	p.SetState(455)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserRight_Arrow {
		{
			p.SetState(445)
			p.Match(LiteParserRight_Arrow)
		}
		p.SetState(447)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == LiteParserQuestion {
			{
				p.SetState(446)

				var _m = p.Match(LiteParserQuestion)

				localctx.(*EnumStatementContext).p = _m
			}

		}
		{
			p.SetState(449)
			p.Id()
		}
		p.SetState(453)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == LiteParserComma {
			{
				p.SetState(450)
				p.More()
			}
			{
				p.SetState(451)
				p.Id()
			}

		}

	}
	{
		p.SetState(457)
		p.Left_brace()
	}
	p.SetState(461)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ((_la-54)&-(0x1f+1)) == 0 && ((1<<uint((_la-54)))&((1<<(LiteParserTypeI8-54))|(1<<(LiteParserTypeU8-54))|(1<<(LiteParserTypeI16-54))|(1<<(LiteParserTypeU16-54))|(1<<(LiteParserTypeI32-54))|(1<<(LiteParserTypeU32-54))|(1<<(LiteParserTypeI64-54))|(1<<(LiteParserTypeU64-54))|(1<<(LiteParserTypeF32-54))|(1<<(LiteParserTypeF64-54))|(1<<(LiteParserTypeChr-54))|(1<<(LiteParserTypeStr-54))|(1<<(LiteParserTypeBool-54))|(1<<(LiteParserTypeInt-54))|(1<<(LiteParserTypeNum-54))|(1<<(LiteParserTypeByte-54))|(1<<(LiteParserTypeAny-54))|(1<<(LiteParserIDPrivate-54))|(1<<(LiteParserIDPublic-54)))) != 0 {
		{
			p.SetState(458)
			p.EnumSupportStatement()
		}

		p.SetState(463)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(464)
		p.Right_brace()
	}
	{
		p.SetState(465)
		p.End()
	}

	return localctx
}

// IEnumSupportStatementContext is an interface to support dynamic dispatch.
type IEnumSupportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumSupportStatementContext differentiates from other interfaces.
	IsEnumSupportStatementContext()
}

type EnumSupportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumSupportStatementContext() *EnumSupportStatementContext {
	var p = new(EnumSupportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_enumSupportStatement
	return p
}

func (*EnumSupportStatementContext) IsEnumSupportStatementContext() {}

func NewEnumSupportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumSupportStatementContext {
	var p = new(EnumSupportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_enumSupportStatement

	return p
}

func (s *EnumSupportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumSupportStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *EnumSupportStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *EnumSupportStatementContext) Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserEqual, 0)
}

func (s *EnumSupportStatementContext) IntegerExpr() IIntegerExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntegerExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntegerExprContext)
}

func (s *EnumSupportStatementContext) Add() IAddContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAddContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAddContext)
}

func (s *EnumSupportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumSupportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumSupportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitEnumSupportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) EnumSupportStatement() (localctx IEnumSupportStatementContext) {
	localctx = NewEnumSupportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, LiteParserRULE_enumSupportStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(467)
		p.Id()
	}
	p.SetState(473)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserEqual {
		{
			p.SetState(468)
			p.Match(LiteParserEqual)
		}
		p.SetState(470)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == LiteParserAdd || _la == LiteParserSub {
			{
				p.SetState(469)
				p.Add()
			}

		}
		{
			p.SetState(472)
			p.IntegerExpr()
		}

	}
	{
		p.SetState(475)
		p.End()
	}

	return localctx
}

// INamespaceVariableStatementContext is an interface to support dynamic dispatch.
type INamespaceVariableStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNamespaceVariableStatementContext differentiates from other interfaces.
	IsNamespaceVariableStatementContext()
}

type NamespaceVariableStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamespaceVariableStatementContext() *NamespaceVariableStatementContext {
	var p = new(NamespaceVariableStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_namespaceVariableStatement
	return p
}

func (*NamespaceVariableStatementContext) IsNamespaceVariableStatementContext() {}

func NewNamespaceVariableStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamespaceVariableStatementContext {
	var p = new(NamespaceVariableStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_namespaceVariableStatement

	return p
}

func (s *NamespaceVariableStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *NamespaceVariableStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *NamespaceVariableStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *NamespaceVariableStatementContext) Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserEqual, 0)
}

func (s *NamespaceVariableStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NamespaceVariableStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *NamespaceVariableStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *NamespaceVariableStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamespaceVariableStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamespaceVariableStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitNamespaceVariableStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) NamespaceVariableStatement() (localctx INamespaceVariableStatementContext) {
	localctx = NewNamespaceVariableStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, LiteParserRULE_namespaceVariableStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(478)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Paren {
		{
			p.SetState(477)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(480)
		p.Id()
	}
	p.SetState(488)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case LiteParserEqual:
		{
			p.SetState(481)
			p.Match(LiteParserEqual)
		}
		{
			p.SetState(482)
			p.expression(0)
		}

	case LiteParserLeft_Paren, LiteParserLeft_Brack, LiteParserQuestion, LiteParserBang, LiteParserTypeI8, LiteParserTypeU8, LiteParserTypeI16, LiteParserTypeU16, LiteParserTypeI32, LiteParserTypeU32, LiteParserTypeI64, LiteParserTypeU64, LiteParserTypeF32, LiteParserTypeF64, LiteParserTypeChr, LiteParserTypeStr, LiteParserTypeBool, LiteParserTypeInt, LiteParserTypeNum, LiteParserTypeByte, LiteParserTypeAny, LiteParserIDPrivate, LiteParserIDPublic:
		{
			p.SetState(483)
			p.TypeType()
		}
		p.SetState(486)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == LiteParserEqual {
			{
				p.SetState(484)
				p.Match(LiteParserEqual)
			}
			{
				p.SetState(485)
				p.expression(0)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(490)
		p.End()
	}

	return localctx
}

// INamespaceConstantStatementContext is an interface to support dynamic dispatch.
type INamespaceConstantStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNamespaceConstantStatementContext differentiates from other interfaces.
	IsNamespaceConstantStatementContext()
}

type NamespaceConstantStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamespaceConstantStatementContext() *NamespaceConstantStatementContext {
	var p = new(NamespaceConstantStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_namespaceConstantStatement
	return p
}

func (*NamespaceConstantStatementContext) IsNamespaceConstantStatementContext() {}

func NewNamespaceConstantStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamespaceConstantStatementContext {
	var p = new(NamespaceConstantStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_namespaceConstantStatement

	return p
}

func (s *NamespaceConstantStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *NamespaceConstantStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *NamespaceConstantStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(LiteParserColon, 0)
}

func (s *NamespaceConstantStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NamespaceConstantStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *NamespaceConstantStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *NamespaceConstantStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *NamespaceConstantStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamespaceConstantStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamespaceConstantStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitNamespaceConstantStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) NamespaceConstantStatement() (localctx INamespaceConstantStatementContext) {
	localctx = NewNamespaceConstantStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, LiteParserRULE_namespaceConstantStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(493)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Paren {
		{
			p.SetState(492)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(495)
		p.Id()
	}
	p.SetState(497)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(LiteParserLeft_Paren-32))|(1<<(LiteParserLeft_Brack-32))|(1<<(LiteParserQuestion-32))|(1<<(LiteParserBang-32))|(1<<(LiteParserTypeI8-32))|(1<<(LiteParserTypeU8-32))|(1<<(LiteParserTypeI16-32))|(1<<(LiteParserTypeU16-32))|(1<<(LiteParserTypeI32-32))|(1<<(LiteParserTypeU32-32))|(1<<(LiteParserTypeI64-32))|(1<<(LiteParserTypeU64-32))|(1<<(LiteParserTypeF32-32))|(1<<(LiteParserTypeF64-32)))) != 0) || (((_la-64)&-(0x1f+1)) == 0 && ((1<<uint((_la-64)))&((1<<(LiteParserTypeChr-64))|(1<<(LiteParserTypeStr-64))|(1<<(LiteParserTypeBool-64))|(1<<(LiteParserTypeInt-64))|(1<<(LiteParserTypeNum-64))|(1<<(LiteParserTypeByte-64))|(1<<(LiteParserTypeAny-64))|(1<<(LiteParserIDPrivate-64))|(1<<(LiteParserIDPublic-64)))) != 0) {
		{
			p.SetState(496)
			p.TypeType()
		}

	}
	{
		p.SetState(499)
		p.Match(LiteParserColon)
	}
	{
		p.SetState(500)
		p.expression(0)
	}
	{
		p.SetState(501)
		p.End()
	}

	return localctx
}

// INamespaceFunctionStatementContext is an interface to support dynamic dispatch.
type INamespaceFunctionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// GetY returns the y token.
	GetY() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// SetY sets the y token.
	SetY(antlr.Token)

	// IsNamespaceFunctionStatementContext differentiates from other interfaces.
	IsNamespaceFunctionStatementContext()
}

type NamespaceFunctionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
	y      antlr.Token
}

func NewEmptyNamespaceFunctionStatementContext() *NamespaceFunctionStatementContext {
	var p = new(NamespaceFunctionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_namespaceFunctionStatement
	return p
}

func (*NamespaceFunctionStatementContext) IsNamespaceFunctionStatementContext() {}

func NewNamespaceFunctionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamespaceFunctionStatementContext {
	var p = new(NamespaceFunctionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_namespaceFunctionStatement

	return p
}

func (s *NamespaceFunctionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *NamespaceFunctionStatementContext) GetT() antlr.Token { return s.t }

func (s *NamespaceFunctionStatementContext) GetY() antlr.Token { return s.y }

func (s *NamespaceFunctionStatementContext) SetT(v antlr.Token) { s.t = v }

func (s *NamespaceFunctionStatementContext) SetY(v antlr.Token) { s.y = v }

func (s *NamespaceFunctionStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *NamespaceFunctionStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(LiteParserColon, 0)
}

func (s *NamespaceFunctionStatementContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *NamespaceFunctionStatementContext) ParameterClauseIn() IParameterClauseInContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseInContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseInContext)
}

func (s *NamespaceFunctionStatementContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *NamespaceFunctionStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *NamespaceFunctionStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *NamespaceFunctionStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *NamespaceFunctionStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *NamespaceFunctionStatementContext) Right_Flow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Flow, 0)
}

func (s *NamespaceFunctionStatementContext) ParameterClauseOut() IParameterClauseOutContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseOutContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseOutContext)
}

func (s *NamespaceFunctionStatementContext) Discard() antlr.TerminalNode {
	return s.GetToken(LiteParserDiscard, 0)
}

func (s *NamespaceFunctionStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *NamespaceFunctionStatementContext) TemplateDefine() ITemplateDefineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateDefineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateDefineContext)
}

func (s *NamespaceFunctionStatementContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *NamespaceFunctionStatementContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *NamespaceFunctionStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *NamespaceFunctionStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *NamespaceFunctionStatementContext) At() antlr.TerminalNode {
	return s.GetToken(LiteParserAt, 0)
}

func (s *NamespaceFunctionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamespaceFunctionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamespaceFunctionStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitNamespaceFunctionStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) NamespaceFunctionStatement() (localctx INamespaceFunctionStatementContext) {
	localctx = NewNamespaceFunctionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, LiteParserRULE_namespaceFunctionStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(504)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Paren {
		{
			p.SetState(503)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(506)
		p.Id()
	}
	p.SetState(508)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Brack {
		{
			p.SetState(507)
			p.TemplateDefine()
		}

	}
	{
		p.SetState(510)
		p.Match(LiteParserColon)
	}
	{
		p.SetState(511)
		p.Left_paren()
	}
	{
		p.SetState(512)
		p.ParameterClauseIn()
	}
	{
		p.SetState(513)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*NamespaceFunctionStatementContext).t = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == LiteParserRight_Arrow || _la == LiteParserRight_Flow) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*NamespaceFunctionStatementContext).t = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(515)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserAt {
		{
			p.SetState(514)

			var _m = p.Match(LiteParserAt)

			localctx.(*NamespaceFunctionStatementContext).y = _m
		}

	}
	p.SetState(520)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserNew_Line {
		{
			p.SetState(517)
			p.Match(LiteParserNew_Line)
		}

		p.SetState(522)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(525)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case LiteParserComma, LiteParserLeft_Paren, LiteParserRight_Paren, LiteParserTypeI8, LiteParserTypeU8, LiteParserTypeI16, LiteParserTypeU16, LiteParserTypeI32, LiteParserTypeU32, LiteParserTypeI64, LiteParserTypeU64, LiteParserTypeF32, LiteParserTypeF64, LiteParserTypeChr, LiteParserTypeStr, LiteParserTypeBool, LiteParserTypeInt, LiteParserTypeNum, LiteParserTypeByte, LiteParserTypeAny, LiteParserIDPrivate, LiteParserIDPublic:
		{
			p.SetState(523)
			p.ParameterClauseOut()
		}

	case LiteParserDiscard:
		{
			p.SetState(524)
			p.Match(LiteParserDiscard)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(527)
		p.Right_paren()
	}
	{
		p.SetState(528)
		p.Left_brace()
	}
	p.SetState(532)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 30, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(529)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(534)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 30, p.GetParserRuleContext())
	}
	{
		p.SetState(535)
		p.Right_brace()
	}
	{
		p.SetState(536)
		p.End()
	}

	return localctx
}

// IPackageStatementContext is an interface to support dynamic dispatch.
type IPackageStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackageStatementContext differentiates from other interfaces.
	IsPackageStatementContext()
}

type PackageStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageStatementContext() *PackageStatementContext {
	var p = new(PackageStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_packageStatement
	return p
}

func (*PackageStatementContext) IsPackageStatementContext() {}

func NewPackageStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageStatementContext {
	var p = new(PackageStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_packageStatement

	return p
}

func (s *PackageStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *PackageStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *PackageStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(LiteParserColon, 0)
}

func (s *PackageStatementContext) Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserEqual, 0)
}

func (s *PackageStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *PackageStatementContext) TemplateDefine() ITemplateDefineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateDefineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateDefineContext)
}

func (s *PackageStatementContext) AllCent() []antlr.TerminalNode {
	return s.GetTokens(LiteParserCent)
}

func (s *PackageStatementContext) Cent(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserCent, i)
}

func (s *PackageStatementContext) AllPackageNewStatement() []IPackageNewStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPackageNewStatementContext)(nil)).Elem())
	var tst = make([]IPackageNewStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPackageNewStatementContext)
		}
	}

	return tst
}

func (s *PackageStatementContext) PackageNewStatement(i int) IPackageNewStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageNewStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPackageNewStatementContext)
}

func (s *PackageStatementContext) AllPackageFieldStatement() []IPackageFieldStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPackageFieldStatementContext)(nil)).Elem())
	var tst = make([]IPackageFieldStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPackageFieldStatementContext)
		}
	}

	return tst
}

func (s *PackageStatementContext) PackageFieldStatement(i int) IPackageFieldStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageFieldStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPackageFieldStatementContext)
}

func (s *PackageStatementContext) AllPackageImplementStatement() []IPackageImplementStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPackageImplementStatementContext)(nil)).Elem())
	var tst = make([]IPackageImplementStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPackageImplementStatementContext)
		}
	}

	return tst
}

func (s *PackageStatementContext) PackageImplementStatement(i int) IPackageImplementStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageImplementStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPackageImplementStatementContext)
}

func (s *PackageStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitPackageStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) PackageStatement() (localctx IPackageStatementContext) {
	localctx = NewPackageStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, LiteParserRULE_packageStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(539)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Paren {
		{
			p.SetState(538)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(541)
		p.Id()
	}
	p.SetState(543)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Brack {
		{
			p.SetState(542)
			p.TemplateDefine()
		}

	}
	{
		p.SetState(545)
		_la = p.GetTokenStream().LA(1)

		if !(_la == LiteParserEqual || _la == LiteParserColon) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(552)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == LiteParserCent {
		{
			p.SetState(546)
			p.Match(LiteParserCent)
		}
		p.SetState(550)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 33, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(547)
				p.PackageNewStatement()
			}

		case 2:
			{
				p.SetState(548)
				p.PackageFieldStatement()
			}

		case 3:
			{
				p.SetState(549)
				p.PackageImplementStatement()
			}

		}

		p.SetState(554)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(556)
		p.End()
	}

	return localctx
}

// IPackageFieldStatementContext is an interface to support dynamic dispatch.
type IPackageFieldStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetP returns the p token.
	GetP() antlr.Token

	// SetP sets the p token.
	SetP(antlr.Token)

	// IsPackageFieldStatementContext differentiates from other interfaces.
	IsPackageFieldStatementContext()
}

type PackageFieldStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	p      antlr.Token
}

func NewEmptyPackageFieldStatementContext() *PackageFieldStatementContext {
	var p = new(PackageFieldStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_packageFieldStatement
	return p
}

func (*PackageFieldStatementContext) IsPackageFieldStatementContext() {}

func NewPackageFieldStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageFieldStatementContext {
	var p = new(PackageFieldStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_packageFieldStatement

	return p
}

func (s *PackageFieldStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageFieldStatementContext) GetP() antlr.Token { return s.p }

func (s *PackageFieldStatementContext) SetP(v antlr.Token) { s.p = v }

func (s *PackageFieldStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *PackageFieldStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *PackageFieldStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *PackageFieldStatementContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *PackageFieldStatementContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *PackageFieldStatementContext) AllPackageSupportStatement() []IPackageSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPackageSupportStatementContext)(nil)).Elem())
	var tst = make([]IPackageSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPackageSupportStatementContext)
		}
	}

	return tst
}

func (s *PackageFieldStatementContext) PackageSupportStatement(i int) IPackageSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPackageSupportStatementContext)
}

func (s *PackageFieldStatementContext) More() IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *PackageFieldStatementContext) Question() antlr.TerminalNode {
	return s.GetToken(LiteParserQuestion, 0)
}

func (s *PackageFieldStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageFieldStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageFieldStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitPackageFieldStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) PackageFieldStatement() (localctx IPackageFieldStatementContext) {
	localctx = NewPackageFieldStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, LiteParserRULE_packageFieldStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(568)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserRight_Arrow {
		{
			p.SetState(558)
			p.Match(LiteParserRight_Arrow)
		}
		p.SetState(560)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == LiteParserQuestion {
			{
				p.SetState(559)

				var _m = p.Match(LiteParserQuestion)

				localctx.(*PackageFieldStatementContext).p = _m
			}

		}
		{
			p.SetState(562)
			p.Id()
		}
		p.SetState(566)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == LiteParserComma {
			{
				p.SetState(563)
				p.More()
			}
			{
				p.SetState(564)
				p.Id()
			}

		}

	}
	{
		p.SetState(570)
		p.Left_brace()
	}
	p.SetState(574)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 38, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(571)
				p.PackageSupportStatement()
			}

		}
		p.SetState(576)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 38, p.GetParserRuleContext())
	}
	{
		p.SetState(577)
		p.Right_brace()
	}

	return localctx
}

// IPackageSupportStatementContext is an interface to support dynamic dispatch.
type IPackageSupportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackageSupportStatementContext differentiates from other interfaces.
	IsPackageSupportStatementContext()
}

type PackageSupportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageSupportStatementContext() *PackageSupportStatementContext {
	var p = new(PackageSupportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_packageSupportStatement
	return p
}

func (*PackageSupportStatementContext) IsPackageSupportStatementContext() {}

func NewPackageSupportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageSupportStatementContext {
	var p = new(PackageSupportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_packageSupportStatement

	return p
}

func (s *PackageSupportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageSupportStatementContext) IncludeStatement() IIncludeStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIncludeStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIncludeStatementContext)
}

func (s *PackageSupportStatementContext) PackageFunctionStatement() IPackageFunctionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageFunctionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackageFunctionStatementContext)
}

func (s *PackageSupportStatementContext) PackageVariableStatement() IPackageVariableStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageVariableStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackageVariableStatementContext)
}

func (s *PackageSupportStatementContext) PackageEventStatement() IPackageEventStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageEventStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackageEventStatementContext)
}

func (s *PackageSupportStatementContext) OverrideFunctionStatement() IOverrideFunctionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOverrideFunctionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOverrideFunctionStatementContext)
}

func (s *PackageSupportStatementContext) OverrideVariableStatement() IOverrideVariableStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOverrideVariableStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOverrideVariableStatementContext)
}

func (s *PackageSupportStatementContext) New_Line() antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, 0)
}

func (s *PackageSupportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageSupportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageSupportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitPackageSupportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) PackageSupportStatement() (localctx IPackageSupportStatementContext) {
	localctx = NewPackageSupportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, LiteParserRULE_packageSupportStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(586)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 39, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(579)
			p.IncludeStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(580)
			p.PackageFunctionStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(581)
			p.PackageVariableStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(582)
			p.PackageEventStatement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(583)
			p.OverrideFunctionStatement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(584)
			p.OverrideVariableStatement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(585)
			p.Match(LiteParserNew_Line)
		}

	}

	return localctx
}

// IIncludeStatementContext is an interface to support dynamic dispatch.
type IIncludeStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIncludeStatementContext differentiates from other interfaces.
	IsIncludeStatementContext()
}

type IncludeStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIncludeStatementContext() *IncludeStatementContext {
	var p = new(IncludeStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_includeStatement
	return p
}

func (*IncludeStatementContext) IsIncludeStatementContext() {}

func NewIncludeStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IncludeStatementContext {
	var p = new(IncludeStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_includeStatement

	return p
}

func (s *IncludeStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *IncludeStatementContext) Cent() antlr.TerminalNode {
	return s.GetToken(LiteParserCent, 0)
}

func (s *IncludeStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *IncludeStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *IncludeStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IncludeStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IncludeStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitIncludeStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) IncludeStatement() (localctx IIncludeStatementContext) {
	localctx = NewIncludeStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, LiteParserRULE_includeStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(588)
		p.Match(LiteParserCent)
	}
	{
		p.SetState(589)
		p.TypeType()
	}
	{
		p.SetState(590)
		p.End()
	}

	return localctx
}

// IPackageNewStatementContext is an interface to support dynamic dispatch.
type IPackageNewStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetP returns the p token.
	GetP() antlr.Token

	// SetP sets the p token.
	SetP(antlr.Token)

	// IsPackageNewStatementContext differentiates from other interfaces.
	IsPackageNewStatementContext()
}

type PackageNewStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	p      antlr.Token
}

func NewEmptyPackageNewStatementContext() *PackageNewStatementContext {
	var p = new(PackageNewStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_packageNewStatement
	return p
}

func (*PackageNewStatementContext) IsPackageNewStatementContext() {}

func NewPackageNewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageNewStatementContext {
	var p = new(PackageNewStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_packageNewStatement

	return p
}

func (s *PackageNewStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageNewStatementContext) GetP() antlr.Token { return s.p }

func (s *PackageNewStatementContext) SetP(v antlr.Token) { s.p = v }

func (s *PackageNewStatementContext) AllLeft_paren() []ILeft_parenContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem())
	var tst = make([]ILeft_parenContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILeft_parenContext)
		}
	}

	return tst
}

func (s *PackageNewStatementContext) Left_paren(i int) ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *PackageNewStatementContext) ParameterClauseIn() IParameterClauseInContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseInContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseInContext)
}

func (s *PackageNewStatementContext) AllRight_paren() []IRight_parenContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRight_parenContext)(nil)).Elem())
	var tst = make([]IRight_parenContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRight_parenContext)
		}
	}

	return tst
}

func (s *PackageNewStatementContext) Right_paren(i int) IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *PackageNewStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *PackageNewStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *PackageNewStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *PackageNewStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *PackageNewStatementContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *PackageNewStatementContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *PackageNewStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *PackageNewStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *PackageNewStatementContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *PackageNewStatementContext) More() IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *PackageNewStatementContext) Question() antlr.TerminalNode {
	return s.GetToken(LiteParserQuestion, 0)
}

func (s *PackageNewStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageNewStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageNewStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitPackageNewStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) PackageNewStatement() (localctx IPackageNewStatementContext) {
	localctx = NewPackageNewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, LiteParserRULE_packageNewStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(593)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 40, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(592)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(595)
		p.Left_paren()
	}
	{
		p.SetState(596)
		p.ParameterClauseIn()
	}
	{
		p.SetState(597)
		p.Right_paren()
	}
	p.SetState(604)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Paren {
		{
			p.SetState(598)
			p.Left_paren()
		}
		p.SetState(600)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-27)&-(0x1f+1)) == 0 && ((1<<uint((_la-27)))&((1<<(LiteParserLess_Less-27))|(1<<(LiteParserGreater_Greater-27))|(1<<(LiteParserLeft_Paren-27))|(1<<(LiteParserLeft_Brace-27))|(1<<(LiteParserLeft_Brack-27))|(1<<(LiteParserQuestion-27))|(1<<(LiteParserBang-27))|(1<<(LiteParserWave-27))|(1<<(LiteParserAdd-27))|(1<<(LiteParserSub-27))|(1<<(LiteParserGrave-27))|(1<<(LiteParserTypeI8-27))|(1<<(LiteParserTypeU8-27))|(1<<(LiteParserTypeI16-27))|(1<<(LiteParserTypeU16-27))|(1<<(LiteParserTypeI32-27)))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(LiteParserTypeU32-59))|(1<<(LiteParserTypeI64-59))|(1<<(LiteParserTypeU64-59))|(1<<(LiteParserTypeF32-59))|(1<<(LiteParserTypeF64-59))|(1<<(LiteParserTypeChr-59))|(1<<(LiteParserTypeStr-59))|(1<<(LiteParserTypeBool-59))|(1<<(LiteParserTypeInt-59))|(1<<(LiteParserTypeNum-59))|(1<<(LiteParserTypeByte-59))|(1<<(LiteParserTypeAny-59))|(1<<(LiteParserNilLiteral-59))|(1<<(LiteParserTrueLiteral-59))|(1<<(LiteParserFalseLiteral-59))|(1<<(LiteParserUndefinedLiteral-59))|(1<<(LiteParserNumberLiteral-59))|(1<<(LiteParserTextLiteral-59))|(1<<(LiteParserCharLiteral-59))|(1<<(LiteParserIDPrivate-59))|(1<<(LiteParserIDPublic-59))|(1<<(LiteParserDiscard-59)))) != 0) {
			{
				p.SetState(599)
				p.ExpressionList()
			}

		}
		{
			p.SetState(602)
			p.Right_paren()
		}

	}
	p.SetState(616)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserRight_Arrow {
		{
			p.SetState(606)
			p.Match(LiteParserRight_Arrow)
		}
		p.SetState(608)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == LiteParserQuestion {
			{
				p.SetState(607)

				var _m = p.Match(LiteParserQuestion)

				localctx.(*PackageNewStatementContext).p = _m
			}

		}
		{
			p.SetState(610)
			p.Id()
		}
		p.SetState(614)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == LiteParserComma {
			{
				p.SetState(611)
				p.More()
			}
			{
				p.SetState(612)
				p.Id()
			}

		}

	}
	{
		p.SetState(618)
		p.Left_brace()
	}
	p.SetState(622)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 46, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(619)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(624)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 46, p.GetParserRuleContext())
	}
	{
		p.SetState(625)
		p.Right_brace()
	}

	return localctx
}

// IPackageVariableStatementContext is an interface to support dynamic dispatch.
type IPackageVariableStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackageVariableStatementContext differentiates from other interfaces.
	IsPackageVariableStatementContext()
}

type PackageVariableStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageVariableStatementContext() *PackageVariableStatementContext {
	var p = new(PackageVariableStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_packageVariableStatement
	return p
}

func (*PackageVariableStatementContext) IsPackageVariableStatementContext() {}

func NewPackageVariableStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageVariableStatementContext {
	var p = new(PackageVariableStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_packageVariableStatement

	return p
}

func (s *PackageVariableStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageVariableStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *PackageVariableStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *PackageVariableStatementContext) Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserEqual, 0)
}

func (s *PackageVariableStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PackageVariableStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *PackageVariableStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *PackageVariableStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageVariableStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageVariableStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitPackageVariableStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) PackageVariableStatement() (localctx IPackageVariableStatementContext) {
	localctx = NewPackageVariableStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, LiteParserRULE_packageVariableStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(628)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Paren {
		{
			p.SetState(627)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(630)
		p.Id()
	}
	p.SetState(638)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case LiteParserEqual:
		{
			p.SetState(631)
			p.Match(LiteParserEqual)
		}
		{
			p.SetState(632)
			p.expression(0)
		}

	case LiteParserLeft_Paren, LiteParserLeft_Brack, LiteParserQuestion, LiteParserBang, LiteParserTypeI8, LiteParserTypeU8, LiteParserTypeI16, LiteParserTypeU16, LiteParserTypeI32, LiteParserTypeU32, LiteParserTypeI64, LiteParserTypeU64, LiteParserTypeF32, LiteParserTypeF64, LiteParserTypeChr, LiteParserTypeStr, LiteParserTypeBool, LiteParserTypeInt, LiteParserTypeNum, LiteParserTypeByte, LiteParserTypeAny, LiteParserIDPrivate, LiteParserIDPublic:
		{
			p.SetState(633)
			p.TypeType()
		}
		p.SetState(636)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == LiteParserEqual {
			{
				p.SetState(634)
				p.Match(LiteParserEqual)
			}
			{
				p.SetState(635)
				p.expression(0)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(640)
		p.End()
	}

	return localctx
}

// IPackageFunctionStatementContext is an interface to support dynamic dispatch.
type IPackageFunctionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// GetY returns the y token.
	GetY() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// SetY sets the y token.
	SetY(antlr.Token)

	// IsPackageFunctionStatementContext differentiates from other interfaces.
	IsPackageFunctionStatementContext()
}

type PackageFunctionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
	y      antlr.Token
}

func NewEmptyPackageFunctionStatementContext() *PackageFunctionStatementContext {
	var p = new(PackageFunctionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_packageFunctionStatement
	return p
}

func (*PackageFunctionStatementContext) IsPackageFunctionStatementContext() {}

func NewPackageFunctionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageFunctionStatementContext {
	var p = new(PackageFunctionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_packageFunctionStatement

	return p
}

func (s *PackageFunctionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageFunctionStatementContext) GetT() antlr.Token { return s.t }

func (s *PackageFunctionStatementContext) GetY() antlr.Token { return s.y }

func (s *PackageFunctionStatementContext) SetT(v antlr.Token) { s.t = v }

func (s *PackageFunctionStatementContext) SetY(v antlr.Token) { s.y = v }

func (s *PackageFunctionStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *PackageFunctionStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(LiteParserColon, 0)
}

func (s *PackageFunctionStatementContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *PackageFunctionStatementContext) ParameterClauseIn() IParameterClauseInContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseInContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseInContext)
}

func (s *PackageFunctionStatementContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *PackageFunctionStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *PackageFunctionStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *PackageFunctionStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *PackageFunctionStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *PackageFunctionStatementContext) Right_Flow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Flow, 0)
}

func (s *PackageFunctionStatementContext) ParameterClauseOut() IParameterClauseOutContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseOutContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseOutContext)
}

func (s *PackageFunctionStatementContext) Discard() antlr.TerminalNode {
	return s.GetToken(LiteParserDiscard, 0)
}

func (s *PackageFunctionStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *PackageFunctionStatementContext) TemplateDefine() ITemplateDefineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateDefineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateDefineContext)
}

func (s *PackageFunctionStatementContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *PackageFunctionStatementContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *PackageFunctionStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *PackageFunctionStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *PackageFunctionStatementContext) At() antlr.TerminalNode {
	return s.GetToken(LiteParserAt, 0)
}

func (s *PackageFunctionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageFunctionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageFunctionStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitPackageFunctionStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) PackageFunctionStatement() (localctx IPackageFunctionStatementContext) {
	localctx = NewPackageFunctionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, LiteParserRULE_packageFunctionStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(643)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Paren {
		{
			p.SetState(642)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(645)
		p.Id()
	}
	p.SetState(647)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Brack {
		{
			p.SetState(646)
			p.TemplateDefine()
		}

	}
	{
		p.SetState(649)
		p.Match(LiteParserColon)
	}
	{
		p.SetState(650)
		p.Left_paren()
	}
	{
		p.SetState(651)
		p.ParameterClauseIn()
	}
	{
		p.SetState(652)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*PackageFunctionStatementContext).t = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == LiteParserRight_Arrow || _la == LiteParserRight_Flow) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*PackageFunctionStatementContext).t = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(654)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserAt {
		{
			p.SetState(653)

			var _m = p.Match(LiteParserAt)

			localctx.(*PackageFunctionStatementContext).y = _m
		}

	}
	p.SetState(659)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserNew_Line {
		{
			p.SetState(656)
			p.Match(LiteParserNew_Line)
		}

		p.SetState(661)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(664)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case LiteParserComma, LiteParserLeft_Paren, LiteParserRight_Paren, LiteParserTypeI8, LiteParserTypeU8, LiteParserTypeI16, LiteParserTypeU16, LiteParserTypeI32, LiteParserTypeU32, LiteParserTypeI64, LiteParserTypeU64, LiteParserTypeF32, LiteParserTypeF64, LiteParserTypeChr, LiteParserTypeStr, LiteParserTypeBool, LiteParserTypeInt, LiteParserTypeNum, LiteParserTypeByte, LiteParserTypeAny, LiteParserIDPrivate, LiteParserIDPublic:
		{
			p.SetState(662)
			p.ParameterClauseOut()
		}

	case LiteParserDiscard:
		{
			p.SetState(663)
			p.Match(LiteParserDiscard)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(666)
		p.Right_paren()
	}
	{
		p.SetState(667)
		p.Left_brace()
	}
	p.SetState(671)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 55, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(668)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(673)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 55, p.GetParserRuleContext())
	}
	{
		p.SetState(674)
		p.Right_brace()
	}
	{
		p.SetState(675)
		p.End()
	}

	return localctx
}

// IPackageControlSubStatementContext is an interface to support dynamic dispatch.
type IPackageControlSubStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackageControlSubStatementContext differentiates from other interfaces.
	IsPackageControlSubStatementContext()
}

type PackageControlSubStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageControlSubStatementContext() *PackageControlSubStatementContext {
	var p = new(PackageControlSubStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_packageControlSubStatement
	return p
}

func (*PackageControlSubStatementContext) IsPackageControlSubStatementContext() {}

func NewPackageControlSubStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageControlSubStatementContext {
	var p = new(PackageControlSubStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_packageControlSubStatement

	return p
}

func (s *PackageControlSubStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageControlSubStatementContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *PackageControlSubStatementContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *PackageControlSubStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *PackageControlSubStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *PackageControlSubStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *PackageControlSubStatementContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *PackageControlSubStatementContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *PackageControlSubStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *PackageControlSubStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *PackageControlSubStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageControlSubStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageControlSubStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitPackageControlSubStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) PackageControlSubStatement() (localctx IPackageControlSubStatementContext) {
	localctx = NewPackageControlSubStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, LiteParserRULE_packageControlSubStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(677)
		p.Id()
	}
	p.SetState(682)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Paren {
		{
			p.SetState(678)
			p.Left_paren()
		}
		{
			p.SetState(679)
			p.Id()
		}
		{
			p.SetState(680)
			p.Right_paren()
		}

	}
	{
		p.SetState(684)
		p.Left_brace()
	}
	p.SetState(686)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(685)
				p.FunctionSupportStatement()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(688)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 57, p.GetParserRuleContext())
	}
	{
		p.SetState(690)
		p.Right_brace()
	}
	{
		p.SetState(691)
		p.End()
	}

	return localctx
}

// IPackageEventStatementContext is an interface to support dynamic dispatch.
type IPackageEventStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackageEventStatementContext differentiates from other interfaces.
	IsPackageEventStatementContext()
}

type PackageEventStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageEventStatementContext() *PackageEventStatementContext {
	var p = new(PackageEventStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_packageEventStatement
	return p
}

func (*PackageEventStatementContext) IsPackageEventStatementContext() {}

func NewPackageEventStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageEventStatementContext {
	var p = new(PackageEventStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_packageEventStatement

	return p
}

func (s *PackageEventStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageEventStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *PackageEventStatementContext) Left_brack() ILeft_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_brackContext)
}

func (s *PackageEventStatementContext) Question() antlr.TerminalNode {
	return s.GetToken(LiteParserQuestion, 0)
}

func (s *PackageEventStatementContext) Right_brack() IRight_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_brackContext)
}

func (s *PackageEventStatementContext) NameSpaceItem() INameSpaceItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameSpaceItemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameSpaceItemContext)
}

func (s *PackageEventStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *PackageEventStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageEventStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageEventStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitPackageEventStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) PackageEventStatement() (localctx IPackageEventStatementContext) {
	localctx = NewPackageEventStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, LiteParserRULE_packageEventStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(693)
		p.Id()
	}
	{
		p.SetState(694)
		p.Left_brack()
	}
	{
		p.SetState(695)
		p.Match(LiteParserQuestion)
	}
	{
		p.SetState(696)
		p.Right_brack()
	}
	{
		p.SetState(697)
		p.NameSpaceItem()
	}
	{
		p.SetState(698)
		p.End()
	}

	return localctx
}

// IPackageImplementStatementContext is an interface to support dynamic dispatch.
type IPackageImplementStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetP returns the p token.
	GetP() antlr.Token

	// SetP sets the p token.
	SetP(antlr.Token)

	// IsPackageImplementStatementContext differentiates from other interfaces.
	IsPackageImplementStatementContext()
}

type PackageImplementStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	p      antlr.Token
}

func NewEmptyPackageImplementStatementContext() *PackageImplementStatementContext {
	var p = new(PackageImplementStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_packageImplementStatement
	return p
}

func (*PackageImplementStatementContext) IsPackageImplementStatementContext() {}

func NewPackageImplementStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageImplementStatementContext {
	var p = new(PackageImplementStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_packageImplementStatement

	return p
}

func (s *PackageImplementStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageImplementStatementContext) GetP() antlr.Token { return s.p }

func (s *PackageImplementStatementContext) SetP(v antlr.Token) { s.p = v }

func (s *PackageImplementStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *PackageImplementStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *PackageImplementStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *PackageImplementStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *PackageImplementStatementContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *PackageImplementStatementContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *PackageImplementStatementContext) AllImplementSupportStatement() []IImplementSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IImplementSupportStatementContext)(nil)).Elem())
	var tst = make([]IImplementSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IImplementSupportStatementContext)
		}
	}

	return tst
}

func (s *PackageImplementStatementContext) ImplementSupportStatement(i int) IImplementSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImplementSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IImplementSupportStatementContext)
}

func (s *PackageImplementStatementContext) More() IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *PackageImplementStatementContext) Question() antlr.TerminalNode {
	return s.GetToken(LiteParserQuestion, 0)
}

func (s *PackageImplementStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageImplementStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageImplementStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitPackageImplementStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) PackageImplementStatement() (localctx IPackageImplementStatementContext) {
	localctx = NewPackageImplementStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, LiteParserRULE_packageImplementStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(700)
		p.TypeType()
	}
	p.SetState(711)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserRight_Arrow {
		{
			p.SetState(701)
			p.Match(LiteParserRight_Arrow)
		}
		p.SetState(703)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == LiteParserQuestion {
			{
				p.SetState(702)

				var _m = p.Match(LiteParserQuestion)

				localctx.(*PackageImplementStatementContext).p = _m
			}

		}
		{
			p.SetState(705)
			p.Id()
		}
		p.SetState(709)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == LiteParserComma {
			{
				p.SetState(706)
				p.More()
			}
			{
				p.SetState(707)
				p.Id()
			}

		}

	}
	{
		p.SetState(713)
		p.Left_brace()
	}
	p.SetState(717)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 61, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(714)
				p.ImplementSupportStatement()
			}

		}
		p.SetState(719)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 61, p.GetParserRuleContext())
	}
	{
		p.SetState(720)
		p.Right_brace()
	}

	return localctx
}

// IImplementStatementContext is an interface to support dynamic dispatch.
type IImplementStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImplementStatementContext differentiates from other interfaces.
	IsImplementStatementContext()
}

type ImplementStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImplementStatementContext() *ImplementStatementContext {
	var p = new(ImplementStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_implementStatement
	return p
}

func (*ImplementStatementContext) IsImplementStatementContext() {}

func NewImplementStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImplementStatementContext {
	var p = new(ImplementStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_implementStatement

	return p
}

func (s *ImplementStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ImplementStatementContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *ImplementStatementContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *ImplementStatementContext) Add_Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserAdd_Equal, 0)
}

func (s *ImplementStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ImplementStatementContext) TemplateDefine() ITemplateDefineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateDefineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateDefineContext)
}

func (s *ImplementStatementContext) AllCent() []antlr.TerminalNode {
	return s.GetTokens(LiteParserCent)
}

func (s *ImplementStatementContext) Cent(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserCent, i)
}

func (s *ImplementStatementContext) AllPackageNewStatement() []IPackageNewStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPackageNewStatementContext)(nil)).Elem())
	var tst = make([]IPackageNewStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPackageNewStatementContext)
		}
	}

	return tst
}

func (s *ImplementStatementContext) PackageNewStatement(i int) IPackageNewStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageNewStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPackageNewStatementContext)
}

func (s *ImplementStatementContext) AllPackageFieldStatement() []IPackageFieldStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPackageFieldStatementContext)(nil)).Elem())
	var tst = make([]IPackageFieldStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPackageFieldStatementContext)
		}
	}

	return tst
}

func (s *ImplementStatementContext) PackageFieldStatement(i int) IPackageFieldStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageFieldStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPackageFieldStatementContext)
}

func (s *ImplementStatementContext) AllPackageImplementStatement() []IPackageImplementStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPackageImplementStatementContext)(nil)).Elem())
	var tst = make([]IPackageImplementStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPackageImplementStatementContext)
		}
	}

	return tst
}

func (s *ImplementStatementContext) PackageImplementStatement(i int) IPackageImplementStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageImplementStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPackageImplementStatementContext)
}

func (s *ImplementStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImplementStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImplementStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitImplementStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) ImplementStatement() (localctx IImplementStatementContext) {
	localctx = NewImplementStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, LiteParserRULE_implementStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(722)
		p.Id()
	}
	p.SetState(724)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Brack {
		{
			p.SetState(723)
			p.TemplateDefine()
		}

	}
	{
		p.SetState(726)
		p.Match(LiteParserAdd_Equal)
	}
	p.SetState(731)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la-54)&-(0x1f+1)) == 0 && ((1<<uint((_la-54)))&((1<<(LiteParserTypeI8-54))|(1<<(LiteParserTypeU8-54))|(1<<(LiteParserTypeI16-54))|(1<<(LiteParserTypeU16-54))|(1<<(LiteParserTypeI32-54))|(1<<(LiteParserTypeU32-54))|(1<<(LiteParserTypeI64-54))|(1<<(LiteParserTypeU64-54))|(1<<(LiteParserTypeF32-54))|(1<<(LiteParserTypeF64-54))|(1<<(LiteParserTypeChr-54))|(1<<(LiteParserTypeStr-54))|(1<<(LiteParserTypeBool-54))|(1<<(LiteParserTypeInt-54))|(1<<(LiteParserTypeNum-54))|(1<<(LiteParserTypeByte-54))|(1<<(LiteParserTypeAny-54))|(1<<(LiteParserIDPrivate-54))|(1<<(LiteParserIDPublic-54)))) != 0 {
		{
			p.SetState(727)
			p.Id()
		}
		p.SetState(729)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if ((_la-54)&-(0x1f+1)) == 0 && ((1<<uint((_la-54)))&((1<<(LiteParserTypeI8-54))|(1<<(LiteParserTypeU8-54))|(1<<(LiteParserTypeI16-54))|(1<<(LiteParserTypeU16-54))|(1<<(LiteParserTypeI32-54))|(1<<(LiteParserTypeU32-54))|(1<<(LiteParserTypeI64-54))|(1<<(LiteParserTypeU64-54))|(1<<(LiteParserTypeF32-54))|(1<<(LiteParserTypeF64-54))|(1<<(LiteParserTypeChr-54))|(1<<(LiteParserTypeStr-54))|(1<<(LiteParserTypeBool-54))|(1<<(LiteParserTypeInt-54))|(1<<(LiteParserTypeNum-54))|(1<<(LiteParserTypeByte-54))|(1<<(LiteParserTypeAny-54))|(1<<(LiteParserIDPrivate-54))|(1<<(LiteParserIDPublic-54)))) != 0 {
			{
				p.SetState(728)
				p.Id()
			}

		}

	}
	p.SetState(739)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == LiteParserCent {
		{
			p.SetState(733)
			p.Match(LiteParserCent)
		}
		p.SetState(737)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 65, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(734)
				p.PackageNewStatement()
			}

		case 2:
			{
				p.SetState(735)
				p.PackageFieldStatement()
			}

		case 3:
			{
				p.SetState(736)
				p.PackageImplementStatement()
			}

		}

		p.SetState(741)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(743)
		p.End()
	}

	return localctx
}

// IImplementSupportStatementContext is an interface to support dynamic dispatch.
type IImplementSupportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImplementSupportStatementContext differentiates from other interfaces.
	IsImplementSupportStatementContext()
}

type ImplementSupportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImplementSupportStatementContext() *ImplementSupportStatementContext {
	var p = new(ImplementSupportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_implementSupportStatement
	return p
}

func (*ImplementSupportStatementContext) IsImplementSupportStatementContext() {}

func NewImplementSupportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImplementSupportStatementContext {
	var p = new(ImplementSupportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_implementSupportStatement

	return p
}

func (s *ImplementSupportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ImplementSupportStatementContext) ImplementFunctionStatement() IImplementFunctionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImplementFunctionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImplementFunctionStatementContext)
}

func (s *ImplementSupportStatementContext) ImplementVariableStatement() IImplementVariableStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImplementVariableStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImplementVariableStatementContext)
}

func (s *ImplementSupportStatementContext) OverrideFunctionStatement() IOverrideFunctionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOverrideFunctionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOverrideFunctionStatementContext)
}

func (s *ImplementSupportStatementContext) OverrideVariableStatement() IOverrideVariableStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOverrideVariableStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOverrideVariableStatementContext)
}

func (s *ImplementSupportStatementContext) New_Line() antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, 0)
}

func (s *ImplementSupportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImplementSupportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImplementSupportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitImplementSupportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) ImplementSupportStatement() (localctx IImplementSupportStatementContext) {
	localctx = NewImplementSupportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, LiteParserRULE_implementSupportStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(750)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 67, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(745)
			p.ImplementFunctionStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(746)
			p.ImplementVariableStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(747)
			p.OverrideFunctionStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(748)
			p.OverrideVariableStatement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(749)
			p.Match(LiteParserNew_Line)
		}

	}

	return localctx
}

// IImplementVariableStatementContext is an interface to support dynamic dispatch.
type IImplementVariableStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImplementVariableStatementContext differentiates from other interfaces.
	IsImplementVariableStatementContext()
}

type ImplementVariableStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImplementVariableStatementContext() *ImplementVariableStatementContext {
	var p = new(ImplementVariableStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_implementVariableStatement
	return p
}

func (*ImplementVariableStatementContext) IsImplementVariableStatementContext() {}

func NewImplementVariableStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImplementVariableStatementContext {
	var p = new(ImplementVariableStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_implementVariableStatement

	return p
}

func (s *ImplementVariableStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ImplementVariableStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *ImplementVariableStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ImplementVariableStatementContext) Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserEqual, 0)
}

func (s *ImplementVariableStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ImplementVariableStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *ImplementVariableStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *ImplementVariableStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImplementVariableStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImplementVariableStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitImplementVariableStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) ImplementVariableStatement() (localctx IImplementVariableStatementContext) {
	localctx = NewImplementVariableStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, LiteParserRULE_implementVariableStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(753)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Paren {
		{
			p.SetState(752)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(755)
		p.Id()
	}
	p.SetState(763)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case LiteParserEqual:
		{
			p.SetState(756)
			p.Match(LiteParserEqual)
		}
		{
			p.SetState(757)
			p.expression(0)
		}

	case LiteParserLeft_Paren, LiteParserLeft_Brack, LiteParserQuestion, LiteParserBang, LiteParserTypeI8, LiteParserTypeU8, LiteParserTypeI16, LiteParserTypeU16, LiteParserTypeI32, LiteParserTypeU32, LiteParserTypeI64, LiteParserTypeU64, LiteParserTypeF32, LiteParserTypeF64, LiteParserTypeChr, LiteParserTypeStr, LiteParserTypeBool, LiteParserTypeInt, LiteParserTypeNum, LiteParserTypeByte, LiteParserTypeAny, LiteParserIDPrivate, LiteParserIDPublic:
		{
			p.SetState(758)
			p.TypeType()
		}
		p.SetState(761)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == LiteParserEqual {
			{
				p.SetState(759)
				p.Match(LiteParserEqual)
			}
			{
				p.SetState(760)
				p.expression(0)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(765)
		p.End()
	}

	return localctx
}

// IImplementFunctionStatementContext is an interface to support dynamic dispatch.
type IImplementFunctionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// GetY returns the y token.
	GetY() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// SetY sets the y token.
	SetY(antlr.Token)

	// IsImplementFunctionStatementContext differentiates from other interfaces.
	IsImplementFunctionStatementContext()
}

type ImplementFunctionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
	y      antlr.Token
}

func NewEmptyImplementFunctionStatementContext() *ImplementFunctionStatementContext {
	var p = new(ImplementFunctionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_implementFunctionStatement
	return p
}

func (*ImplementFunctionStatementContext) IsImplementFunctionStatementContext() {}

func NewImplementFunctionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImplementFunctionStatementContext {
	var p = new(ImplementFunctionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_implementFunctionStatement

	return p
}

func (s *ImplementFunctionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ImplementFunctionStatementContext) GetT() antlr.Token { return s.t }

func (s *ImplementFunctionStatementContext) GetY() antlr.Token { return s.y }

func (s *ImplementFunctionStatementContext) SetT(v antlr.Token) { s.t = v }

func (s *ImplementFunctionStatementContext) SetY(v antlr.Token) { s.y = v }

func (s *ImplementFunctionStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *ImplementFunctionStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(LiteParserColon, 0)
}

func (s *ImplementFunctionStatementContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *ImplementFunctionStatementContext) ParameterClauseIn() IParameterClauseInContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseInContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseInContext)
}

func (s *ImplementFunctionStatementContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *ImplementFunctionStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *ImplementFunctionStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *ImplementFunctionStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ImplementFunctionStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *ImplementFunctionStatementContext) Right_Flow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Flow, 0)
}

func (s *ImplementFunctionStatementContext) ParameterClauseOut() IParameterClauseOutContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseOutContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseOutContext)
}

func (s *ImplementFunctionStatementContext) Discard() antlr.TerminalNode {
	return s.GetToken(LiteParserDiscard, 0)
}

func (s *ImplementFunctionStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *ImplementFunctionStatementContext) TemplateDefine() ITemplateDefineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateDefineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateDefineContext)
}

func (s *ImplementFunctionStatementContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *ImplementFunctionStatementContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *ImplementFunctionStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *ImplementFunctionStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *ImplementFunctionStatementContext) At() antlr.TerminalNode {
	return s.GetToken(LiteParserAt, 0)
}

func (s *ImplementFunctionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImplementFunctionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImplementFunctionStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitImplementFunctionStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) ImplementFunctionStatement() (localctx IImplementFunctionStatementContext) {
	localctx = NewImplementFunctionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, LiteParserRULE_implementFunctionStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(768)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Paren {
		{
			p.SetState(767)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(770)
		p.Id()
	}
	p.SetState(772)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Brack {
		{
			p.SetState(771)
			p.TemplateDefine()
		}

	}
	{
		p.SetState(774)
		p.Match(LiteParserColon)
	}
	{
		p.SetState(775)
		p.Left_paren()
	}
	{
		p.SetState(776)
		p.ParameterClauseIn()
	}
	{
		p.SetState(777)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*ImplementFunctionStatementContext).t = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == LiteParserRight_Arrow || _la == LiteParserRight_Flow) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*ImplementFunctionStatementContext).t = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(779)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserAt {
		{
			p.SetState(778)

			var _m = p.Match(LiteParserAt)

			localctx.(*ImplementFunctionStatementContext).y = _m
		}

	}
	p.SetState(784)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserNew_Line {
		{
			p.SetState(781)
			p.Match(LiteParserNew_Line)
		}

		p.SetState(786)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(789)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case LiteParserComma, LiteParserLeft_Paren, LiteParserRight_Paren, LiteParserTypeI8, LiteParserTypeU8, LiteParserTypeI16, LiteParserTypeU16, LiteParserTypeI32, LiteParserTypeU32, LiteParserTypeI64, LiteParserTypeU64, LiteParserTypeF32, LiteParserTypeF64, LiteParserTypeChr, LiteParserTypeStr, LiteParserTypeBool, LiteParserTypeInt, LiteParserTypeNum, LiteParserTypeByte, LiteParserTypeAny, LiteParserIDPrivate, LiteParserIDPublic:
		{
			p.SetState(787)
			p.ParameterClauseOut()
		}

	case LiteParserDiscard:
		{
			p.SetState(788)
			p.Match(LiteParserDiscard)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(791)
		p.Right_paren()
	}
	{
		p.SetState(792)
		p.Left_brace()
	}
	p.SetState(796)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 76, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(793)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(798)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 76, p.GetParserRuleContext())
	}
	{
		p.SetState(799)
		p.Right_brace()
	}
	{
		p.SetState(800)
		p.End()
	}

	return localctx
}

// IOverrideVariableStatementContext is an interface to support dynamic dispatch.
type IOverrideVariableStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetN returns the n token.
	GetN() antlr.Token

	// SetN sets the n token.
	SetN(antlr.Token)

	// IsOverrideVariableStatementContext differentiates from other interfaces.
	IsOverrideVariableStatementContext()
}

type OverrideVariableStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	n      antlr.Token
}

func NewEmptyOverrideVariableStatementContext() *OverrideVariableStatementContext {
	var p = new(OverrideVariableStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_overrideVariableStatement
	return p
}

func (*OverrideVariableStatementContext) IsOverrideVariableStatementContext() {}

func NewOverrideVariableStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OverrideVariableStatementContext {
	var p = new(OverrideVariableStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_overrideVariableStatement

	return p
}

func (s *OverrideVariableStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *OverrideVariableStatementContext) GetN() antlr.Token { return s.n }

func (s *OverrideVariableStatementContext) SetN(v antlr.Token) { s.n = v }

func (s *OverrideVariableStatementContext) Cent() antlr.TerminalNode {
	return s.GetToken(LiteParserCent, 0)
}

func (s *OverrideVariableStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *OverrideVariableStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *OverrideVariableStatementContext) Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserEqual, 0)
}

func (s *OverrideVariableStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *OverrideVariableStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *OverrideVariableStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *OverrideVariableStatementContext) Discard() antlr.TerminalNode {
	return s.GetToken(LiteParserDiscard, 0)
}

func (s *OverrideVariableStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OverrideVariableStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OverrideVariableStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitOverrideVariableStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) OverrideVariableStatement() (localctx IOverrideVariableStatementContext) {
	localctx = NewOverrideVariableStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, LiteParserRULE_overrideVariableStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(803)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Paren {
		{
			p.SetState(802)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(805)
		p.Match(LiteParserCent)
	}
	p.SetState(807)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserDiscard {
		{
			p.SetState(806)

			var _m = p.Match(LiteParserDiscard)

			localctx.(*OverrideVariableStatementContext).n = _m
		}

	}
	{
		p.SetState(809)
		p.Id()
	}
	p.SetState(817)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case LiteParserEqual:
		{
			p.SetState(810)
			p.Match(LiteParserEqual)
		}
		{
			p.SetState(811)
			p.expression(0)
		}

	case LiteParserLeft_Paren, LiteParserLeft_Brack, LiteParserQuestion, LiteParserBang, LiteParserTypeI8, LiteParserTypeU8, LiteParserTypeI16, LiteParserTypeU16, LiteParserTypeI32, LiteParserTypeU32, LiteParserTypeI64, LiteParserTypeU64, LiteParserTypeF32, LiteParserTypeF64, LiteParserTypeChr, LiteParserTypeStr, LiteParserTypeBool, LiteParserTypeInt, LiteParserTypeNum, LiteParserTypeByte, LiteParserTypeAny, LiteParserIDPrivate, LiteParserIDPublic:
		{
			p.SetState(812)
			p.TypeType()
		}
		p.SetState(815)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == LiteParserEqual {
			{
				p.SetState(813)
				p.Match(LiteParserEqual)
			}
			{
				p.SetState(814)
				p.expression(0)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(819)
		p.End()
	}

	return localctx
}

// IOverrideFunctionStatementContext is an interface to support dynamic dispatch.
type IOverrideFunctionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetN returns the n token.
	GetN() antlr.Token

	// GetT returns the t token.
	GetT() antlr.Token

	// GetY returns the y token.
	GetY() antlr.Token

	// SetN sets the n token.
	SetN(antlr.Token)

	// SetT sets the t token.
	SetT(antlr.Token)

	// SetY sets the y token.
	SetY(antlr.Token)

	// IsOverrideFunctionStatementContext differentiates from other interfaces.
	IsOverrideFunctionStatementContext()
}

type OverrideFunctionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	n      antlr.Token
	t      antlr.Token
	y      antlr.Token
}

func NewEmptyOverrideFunctionStatementContext() *OverrideFunctionStatementContext {
	var p = new(OverrideFunctionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_overrideFunctionStatement
	return p
}

func (*OverrideFunctionStatementContext) IsOverrideFunctionStatementContext() {}

func NewOverrideFunctionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OverrideFunctionStatementContext {
	var p = new(OverrideFunctionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_overrideFunctionStatement

	return p
}

func (s *OverrideFunctionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *OverrideFunctionStatementContext) GetN() antlr.Token { return s.n }

func (s *OverrideFunctionStatementContext) GetT() antlr.Token { return s.t }

func (s *OverrideFunctionStatementContext) GetY() antlr.Token { return s.y }

func (s *OverrideFunctionStatementContext) SetN(v antlr.Token) { s.n = v }

func (s *OverrideFunctionStatementContext) SetT(v antlr.Token) { s.t = v }

func (s *OverrideFunctionStatementContext) SetY(v antlr.Token) { s.y = v }

func (s *OverrideFunctionStatementContext) Cent() antlr.TerminalNode {
	return s.GetToken(LiteParserCent, 0)
}

func (s *OverrideFunctionStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *OverrideFunctionStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(LiteParserColon, 0)
}

func (s *OverrideFunctionStatementContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *OverrideFunctionStatementContext) ParameterClauseIn() IParameterClauseInContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseInContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseInContext)
}

func (s *OverrideFunctionStatementContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *OverrideFunctionStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *OverrideFunctionStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *OverrideFunctionStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *OverrideFunctionStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *OverrideFunctionStatementContext) Right_Flow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Flow, 0)
}

func (s *OverrideFunctionStatementContext) ParameterClauseOut() IParameterClauseOutContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseOutContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseOutContext)
}

func (s *OverrideFunctionStatementContext) AllDiscard() []antlr.TerminalNode {
	return s.GetTokens(LiteParserDiscard)
}

func (s *OverrideFunctionStatementContext) Discard(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserDiscard, i)
}

func (s *OverrideFunctionStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *OverrideFunctionStatementContext) TemplateDefine() ITemplateDefineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateDefineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateDefineContext)
}

func (s *OverrideFunctionStatementContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *OverrideFunctionStatementContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *OverrideFunctionStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *OverrideFunctionStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *OverrideFunctionStatementContext) At() antlr.TerminalNode {
	return s.GetToken(LiteParserAt, 0)
}

func (s *OverrideFunctionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OverrideFunctionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OverrideFunctionStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitOverrideFunctionStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) OverrideFunctionStatement() (localctx IOverrideFunctionStatementContext) {
	localctx = NewOverrideFunctionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, LiteParserRULE_overrideFunctionStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(822)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Paren {
		{
			p.SetState(821)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(824)
		p.Match(LiteParserCent)
	}
	p.SetState(826)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserDiscard {
		{
			p.SetState(825)

			var _m = p.Match(LiteParserDiscard)

			localctx.(*OverrideFunctionStatementContext).n = _m
		}

	}
	{
		p.SetState(828)
		p.Id()
	}
	p.SetState(830)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Brack {
		{
			p.SetState(829)
			p.TemplateDefine()
		}

	}
	{
		p.SetState(832)
		p.Match(LiteParserColon)
	}
	{
		p.SetState(833)
		p.Left_paren()
	}
	{
		p.SetState(834)
		p.ParameterClauseIn()
	}
	{
		p.SetState(835)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*OverrideFunctionStatementContext).t = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == LiteParserRight_Arrow || _la == LiteParserRight_Flow) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*OverrideFunctionStatementContext).t = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(837)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserAt {
		{
			p.SetState(836)

			var _m = p.Match(LiteParserAt)

			localctx.(*OverrideFunctionStatementContext).y = _m
		}

	}
	p.SetState(842)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserNew_Line {
		{
			p.SetState(839)
			p.Match(LiteParserNew_Line)
		}

		p.SetState(844)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(847)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case LiteParserComma, LiteParserLeft_Paren, LiteParserRight_Paren, LiteParserTypeI8, LiteParserTypeU8, LiteParserTypeI16, LiteParserTypeU16, LiteParserTypeI32, LiteParserTypeU32, LiteParserTypeI64, LiteParserTypeU64, LiteParserTypeF32, LiteParserTypeF64, LiteParserTypeChr, LiteParserTypeStr, LiteParserTypeBool, LiteParserTypeInt, LiteParserTypeNum, LiteParserTypeByte, LiteParserTypeAny, LiteParserIDPrivate, LiteParserIDPublic:
		{
			p.SetState(845)
			p.ParameterClauseOut()
		}

	case LiteParserDiscard:
		{
			p.SetState(846)
			p.Match(LiteParserDiscard)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(849)
		p.Right_paren()
	}
	{
		p.SetState(850)
		p.Left_brace()
	}
	p.SetState(854)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 87, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(851)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(856)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 87, p.GetParserRuleContext())
	}
	{
		p.SetState(857)
		p.Right_brace()
	}
	{
		p.SetState(858)
		p.End()
	}

	return localctx
}

// IProtocolStatementContext is an interface to support dynamic dispatch.
type IProtocolStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetP returns the p token.
	GetP() antlr.Token

	// SetP sets the p token.
	SetP(antlr.Token)

	// IsProtocolStatementContext differentiates from other interfaces.
	IsProtocolStatementContext()
}

type ProtocolStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	p      antlr.Token
}

func NewEmptyProtocolStatementContext() *ProtocolStatementContext {
	var p = new(ProtocolStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_protocolStatement
	return p
}

func (*ProtocolStatementContext) IsProtocolStatementContext() {}

func NewProtocolStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProtocolStatementContext {
	var p = new(ProtocolStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_protocolStatement

	return p
}

func (s *ProtocolStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ProtocolStatementContext) GetP() antlr.Token { return s.p }

func (s *ProtocolStatementContext) SetP(v antlr.Token) { s.p = v }

func (s *ProtocolStatementContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *ProtocolStatementContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *ProtocolStatementContext) Cent() antlr.TerminalNode {
	return s.GetToken(LiteParserCent, 0)
}

func (s *ProtocolStatementContext) Discard() antlr.TerminalNode {
	return s.GetToken(LiteParserDiscard, 0)
}

func (s *ProtocolStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *ProtocolStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *ProtocolStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ProtocolStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(LiteParserColon, 0)
}

func (s *ProtocolStatementContext) Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserEqual, 0)
}

func (s *ProtocolStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *ProtocolStatementContext) TemplateDefine() ITemplateDefineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateDefineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateDefineContext)
}

func (s *ProtocolStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *ProtocolStatementContext) AllProtocolSupportStatement() []IProtocolSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProtocolSupportStatementContext)(nil)).Elem())
	var tst = make([]IProtocolSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProtocolSupportStatementContext)
		}
	}

	return tst
}

func (s *ProtocolStatementContext) ProtocolSupportStatement(i int) IProtocolSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProtocolSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProtocolSupportStatementContext)
}

func (s *ProtocolStatementContext) More() IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *ProtocolStatementContext) Question() antlr.TerminalNode {
	return s.GetToken(LiteParserQuestion, 0)
}

func (s *ProtocolStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProtocolStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProtocolStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitProtocolStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) ProtocolStatement() (localctx IProtocolStatementContext) {
	localctx = NewProtocolStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, LiteParserRULE_protocolStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(861)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Paren {
		{
			p.SetState(860)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(863)
		p.Id()
	}
	p.SetState(865)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Brack {
		{
			p.SetState(864)
			p.TemplateDefine()
		}

	}
	{
		p.SetState(867)
		_la = p.GetTokenStream().LA(1)

		if !(_la == LiteParserEqual || _la == LiteParserColon) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(868)
		p.Match(LiteParserCent)
	}
	{
		p.SetState(869)
		p.Match(LiteParserDiscard)
	}
	p.SetState(880)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserRight_Arrow {
		{
			p.SetState(870)
			p.Match(LiteParserRight_Arrow)
		}
		p.SetState(872)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == LiteParserQuestion {
			{
				p.SetState(871)

				var _m = p.Match(LiteParserQuestion)

				localctx.(*ProtocolStatementContext).p = _m
			}

		}
		{
			p.SetState(874)
			p.Id()
		}
		p.SetState(878)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == LiteParserComma {
			{
				p.SetState(875)
				p.More()
			}
			{
				p.SetState(876)
				p.Id()
			}

		}

	}
	{
		p.SetState(882)
		p.Left_brace()
	}
	p.SetState(886)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 93, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(883)
				p.ProtocolSupportStatement()
			}

		}
		p.SetState(888)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 93, p.GetParserRuleContext())
	}
	{
		p.SetState(889)
		p.Right_brace()
	}
	{
		p.SetState(890)
		p.End()
	}

	return localctx
}

// IProtocolSupportStatementContext is an interface to support dynamic dispatch.
type IProtocolSupportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProtocolSupportStatementContext differentiates from other interfaces.
	IsProtocolSupportStatementContext()
}

type ProtocolSupportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProtocolSupportStatementContext() *ProtocolSupportStatementContext {
	var p = new(ProtocolSupportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_protocolSupportStatement
	return p
}

func (*ProtocolSupportStatementContext) IsProtocolSupportStatementContext() {}

func NewProtocolSupportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProtocolSupportStatementContext {
	var p = new(ProtocolSupportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_protocolSupportStatement

	return p
}

func (s *ProtocolSupportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ProtocolSupportStatementContext) IncludeStatement() IIncludeStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIncludeStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIncludeStatementContext)
}

func (s *ProtocolSupportStatementContext) ProtocolFunctionStatement() IProtocolFunctionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProtocolFunctionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProtocolFunctionStatementContext)
}

func (s *ProtocolSupportStatementContext) ProtocolVariableStatement() IProtocolVariableStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProtocolVariableStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProtocolVariableStatementContext)
}

func (s *ProtocolSupportStatementContext) New_Line() antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, 0)
}

func (s *ProtocolSupportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProtocolSupportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProtocolSupportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitProtocolSupportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) ProtocolSupportStatement() (localctx IProtocolSupportStatementContext) {
	localctx = NewProtocolSupportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, LiteParserRULE_protocolSupportStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(896)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 94, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(892)
			p.IncludeStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(893)
			p.ProtocolFunctionStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(894)
			p.ProtocolVariableStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(895)
			p.Match(LiteParserNew_Line)
		}

	}

	return localctx
}

// IProtocolVariableStatementContext is an interface to support dynamic dispatch.
type IProtocolVariableStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProtocolVariableStatementContext differentiates from other interfaces.
	IsProtocolVariableStatementContext()
}

type ProtocolVariableStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProtocolVariableStatementContext() *ProtocolVariableStatementContext {
	var p = new(ProtocolVariableStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_protocolVariableStatement
	return p
}

func (*ProtocolVariableStatementContext) IsProtocolVariableStatementContext() {}

func NewProtocolVariableStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProtocolVariableStatementContext {
	var p = new(ProtocolVariableStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_protocolVariableStatement

	return p
}

func (s *ProtocolVariableStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ProtocolVariableStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *ProtocolVariableStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ProtocolVariableStatementContext) Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserEqual, 0)
}

func (s *ProtocolVariableStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ProtocolVariableStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *ProtocolVariableStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *ProtocolVariableStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProtocolVariableStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProtocolVariableStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitProtocolVariableStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) ProtocolVariableStatement() (localctx IProtocolVariableStatementContext) {
	localctx = NewProtocolVariableStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, LiteParserRULE_protocolVariableStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(899)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Paren {
		{
			p.SetState(898)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(901)
		p.Id()
	}
	p.SetState(909)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case LiteParserEqual:
		{
			p.SetState(902)
			p.Match(LiteParserEqual)
		}
		{
			p.SetState(903)
			p.expression(0)
		}

	case LiteParserLeft_Paren, LiteParserLeft_Brack, LiteParserQuestion, LiteParserBang, LiteParserTypeI8, LiteParserTypeU8, LiteParserTypeI16, LiteParserTypeU16, LiteParserTypeI32, LiteParserTypeU32, LiteParserTypeI64, LiteParserTypeU64, LiteParserTypeF32, LiteParserTypeF64, LiteParserTypeChr, LiteParserTypeStr, LiteParserTypeBool, LiteParserTypeInt, LiteParserTypeNum, LiteParserTypeByte, LiteParserTypeAny, LiteParserIDPrivate, LiteParserIDPublic:
		{
			p.SetState(904)
			p.TypeType()
		}
		p.SetState(907)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == LiteParserEqual {
			{
				p.SetState(905)
				p.Match(LiteParserEqual)
			}
			{
				p.SetState(906)
				p.expression(0)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(911)
		p.End()
	}

	return localctx
}

// IProtocolFunctionStatementContext is an interface to support dynamic dispatch.
type IProtocolFunctionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// GetY returns the y token.
	GetY() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// SetY sets the y token.
	SetY(antlr.Token)

	// IsProtocolFunctionStatementContext differentiates from other interfaces.
	IsProtocolFunctionStatementContext()
}

type ProtocolFunctionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
	y      antlr.Token
}

func NewEmptyProtocolFunctionStatementContext() *ProtocolFunctionStatementContext {
	var p = new(ProtocolFunctionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_protocolFunctionStatement
	return p
}

func (*ProtocolFunctionStatementContext) IsProtocolFunctionStatementContext() {}

func NewProtocolFunctionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProtocolFunctionStatementContext {
	var p = new(ProtocolFunctionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_protocolFunctionStatement

	return p
}

func (s *ProtocolFunctionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ProtocolFunctionStatementContext) GetT() antlr.Token { return s.t }

func (s *ProtocolFunctionStatementContext) GetY() antlr.Token { return s.y }

func (s *ProtocolFunctionStatementContext) SetT(v antlr.Token) { s.t = v }

func (s *ProtocolFunctionStatementContext) SetY(v antlr.Token) { s.y = v }

func (s *ProtocolFunctionStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *ProtocolFunctionStatementContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *ProtocolFunctionStatementContext) ParameterClauseIn() IParameterClauseInContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseInContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseInContext)
}

func (s *ProtocolFunctionStatementContext) ParameterClauseOut() IParameterClauseOutContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseOutContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseOutContext)
}

func (s *ProtocolFunctionStatementContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *ProtocolFunctionStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ProtocolFunctionStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *ProtocolFunctionStatementContext) Right_Flow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Flow, 0)
}

func (s *ProtocolFunctionStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *ProtocolFunctionStatementContext) TemplateDefine() ITemplateDefineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateDefineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateDefineContext)
}

func (s *ProtocolFunctionStatementContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *ProtocolFunctionStatementContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *ProtocolFunctionStatementContext) At() antlr.TerminalNode {
	return s.GetToken(LiteParserAt, 0)
}

func (s *ProtocolFunctionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProtocolFunctionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProtocolFunctionStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitProtocolFunctionStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) ProtocolFunctionStatement() (localctx IProtocolFunctionStatementContext) {
	localctx = NewProtocolFunctionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, LiteParserRULE_protocolFunctionStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(914)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Paren {
		{
			p.SetState(913)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(916)
		p.Id()
	}
	p.SetState(918)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Brack {
		{
			p.SetState(917)
			p.TemplateDefine()
		}

	}
	{
		p.SetState(920)
		p.Left_paren()
	}
	{
		p.SetState(921)
		p.ParameterClauseIn()
	}
	{
		p.SetState(922)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*ProtocolFunctionStatementContext).t = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == LiteParserRight_Arrow || _la == LiteParserRight_Flow) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*ProtocolFunctionStatementContext).t = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(924)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserAt {
		{
			p.SetState(923)

			var _m = p.Match(LiteParserAt)

			localctx.(*ProtocolFunctionStatementContext).y = _m
		}

	}
	p.SetState(929)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserNew_Line {
		{
			p.SetState(926)
			p.Match(LiteParserNew_Line)
		}

		p.SetState(931)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(932)
		p.ParameterClauseOut()
	}
	{
		p.SetState(933)
		p.Right_paren()
	}
	{
		p.SetState(934)
		p.End()
	}

	return localctx
}

// IFunctionStatementContext is an interface to support dynamic dispatch.
type IFunctionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// GetY returns the y token.
	GetY() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// SetY sets the y token.
	SetY(antlr.Token)

	// IsFunctionStatementContext differentiates from other interfaces.
	IsFunctionStatementContext()
}

type FunctionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
	y      antlr.Token
}

func NewEmptyFunctionStatementContext() *FunctionStatementContext {
	var p = new(FunctionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_functionStatement
	return p
}

func (*FunctionStatementContext) IsFunctionStatementContext() {}

func NewFunctionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionStatementContext {
	var p = new(FunctionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_functionStatement

	return p
}

func (s *FunctionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionStatementContext) GetT() antlr.Token { return s.t }

func (s *FunctionStatementContext) GetY() antlr.Token { return s.y }

func (s *FunctionStatementContext) SetT(v antlr.Token) { s.t = v }

func (s *FunctionStatementContext) SetY(v antlr.Token) { s.y = v }

func (s *FunctionStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *FunctionStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(LiteParserColon, 0)
}

func (s *FunctionStatementContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *FunctionStatementContext) ParameterClauseIn() IParameterClauseInContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseInContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseInContext)
}

func (s *FunctionStatementContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *FunctionStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *FunctionStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *FunctionStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *FunctionStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *FunctionStatementContext) Right_Flow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Flow, 0)
}

func (s *FunctionStatementContext) ParameterClauseOut() IParameterClauseOutContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseOutContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseOutContext)
}

func (s *FunctionStatementContext) Discard() antlr.TerminalNode {
	return s.GetToken(LiteParserDiscard, 0)
}

func (s *FunctionStatementContext) TemplateDefine() ITemplateDefineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateDefineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateDefineContext)
}

func (s *FunctionStatementContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *FunctionStatementContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *FunctionStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *FunctionStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *FunctionStatementContext) At() antlr.TerminalNode {
	return s.GetToken(LiteParserAt, 0)
}

func (s *FunctionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitFunctionStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) FunctionStatement() (localctx IFunctionStatementContext) {
	localctx = NewFunctionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, LiteParserRULE_functionStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(936)
		p.Id()
	}
	p.SetState(938)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Brack {
		{
			p.SetState(937)
			p.TemplateDefine()
		}

	}
	{
		p.SetState(940)
		p.Match(LiteParserColon)
	}
	{
		p.SetState(941)
		p.Left_paren()
	}
	{
		p.SetState(942)
		p.ParameterClauseIn()
	}
	{
		p.SetState(943)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*FunctionStatementContext).t = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == LiteParserRight_Arrow || _la == LiteParserRight_Flow) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*FunctionStatementContext).t = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(945)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserAt {
		{
			p.SetState(944)

			var _m = p.Match(LiteParserAt)

			localctx.(*FunctionStatementContext).y = _m
		}

	}
	p.SetState(950)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserNew_Line {
		{
			p.SetState(947)
			p.Match(LiteParserNew_Line)
		}

		p.SetState(952)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(955)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case LiteParserComma, LiteParserLeft_Paren, LiteParserRight_Paren, LiteParserTypeI8, LiteParserTypeU8, LiteParserTypeI16, LiteParserTypeU16, LiteParserTypeI32, LiteParserTypeU32, LiteParserTypeI64, LiteParserTypeU64, LiteParserTypeF32, LiteParserTypeF64, LiteParserTypeChr, LiteParserTypeStr, LiteParserTypeBool, LiteParserTypeInt, LiteParserTypeNum, LiteParserTypeByte, LiteParserTypeAny, LiteParserIDPrivate, LiteParserIDPublic:
		{
			p.SetState(953)
			p.ParameterClauseOut()
		}

	case LiteParserDiscard:
		{
			p.SetState(954)
			p.Match(LiteParserDiscard)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(957)
		p.Right_paren()
	}
	{
		p.SetState(958)
		p.Left_brace()
	}
	p.SetState(962)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 106, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(959)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(964)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 106, p.GetParserRuleContext())
	}
	{
		p.SetState(965)
		p.Right_brace()
	}
	{
		p.SetState(966)
		p.End()
	}

	return localctx
}

// IReturnStatementContext is an interface to support dynamic dispatch.
type IReturnStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturnStatementContext differentiates from other interfaces.
	IsReturnStatementContext()
}

type ReturnStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturnStatementContext() *ReturnStatementContext {
	var p = new(ReturnStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_returnStatement
	return p
}

func (*ReturnStatementContext) IsReturnStatementContext() {}

func NewReturnStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturnStatementContext {
	var p = new(ReturnStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_returnStatement

	return p
}

func (s *ReturnStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturnStatementContext) Left_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserLeft_Arrow, 0)
}

func (s *ReturnStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ReturnStatementContext) TupleExpression() ITupleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleExpressionContext)
}

func (s *ReturnStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturnStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitReturnStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) ReturnStatement() (localctx IReturnStatementContext) {
	localctx = NewReturnStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, LiteParserRULE_returnStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(968)
		p.Match(LiteParserLeft_Arrow)
	}
	p.SetState(970)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-27)&-(0x1f+1)) == 0 && ((1<<uint((_la-27)))&((1<<(LiteParserLess_Less-27))|(1<<(LiteParserGreater_Greater-27))|(1<<(LiteParserLeft_Paren-27))|(1<<(LiteParserLeft_Brace-27))|(1<<(LiteParserLeft_Brack-27))|(1<<(LiteParserQuestion-27))|(1<<(LiteParserBang-27))|(1<<(LiteParserWave-27))|(1<<(LiteParserAdd-27))|(1<<(LiteParserSub-27))|(1<<(LiteParserGrave-27))|(1<<(LiteParserTypeI8-27))|(1<<(LiteParserTypeU8-27))|(1<<(LiteParserTypeI16-27))|(1<<(LiteParserTypeU16-27))|(1<<(LiteParserTypeI32-27)))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(LiteParserTypeU32-59))|(1<<(LiteParserTypeI64-59))|(1<<(LiteParserTypeU64-59))|(1<<(LiteParserTypeF32-59))|(1<<(LiteParserTypeF64-59))|(1<<(LiteParserTypeChr-59))|(1<<(LiteParserTypeStr-59))|(1<<(LiteParserTypeBool-59))|(1<<(LiteParserTypeInt-59))|(1<<(LiteParserTypeNum-59))|(1<<(LiteParserTypeByte-59))|(1<<(LiteParserTypeAny-59))|(1<<(LiteParserNilLiteral-59))|(1<<(LiteParserTrueLiteral-59))|(1<<(LiteParserFalseLiteral-59))|(1<<(LiteParserUndefinedLiteral-59))|(1<<(LiteParserNumberLiteral-59))|(1<<(LiteParserTextLiteral-59))|(1<<(LiteParserCharLiteral-59))|(1<<(LiteParserIDPrivate-59))|(1<<(LiteParserIDPublic-59))|(1<<(LiteParserDiscard-59)))) != 0) {
		{
			p.SetState(969)
			p.TupleExpression()
		}

	}
	{
		p.SetState(972)
		p.End()
	}

	return localctx
}

// IReturnAwaitStatementContext is an interface to support dynamic dispatch.
type IReturnAwaitStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturnAwaitStatementContext differentiates from other interfaces.
	IsReturnAwaitStatementContext()
}

type ReturnAwaitStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturnAwaitStatementContext() *ReturnAwaitStatementContext {
	var p = new(ReturnAwaitStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_returnAwaitStatement
	return p
}

func (*ReturnAwaitStatementContext) IsReturnAwaitStatementContext() {}

func NewReturnAwaitStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturnAwaitStatementContext {
	var p = new(ReturnAwaitStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_returnAwaitStatement

	return p
}

func (s *ReturnAwaitStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturnAwaitStatementContext) Left_Flow() antlr.TerminalNode {
	return s.GetToken(LiteParserLeft_Flow, 0)
}

func (s *ReturnAwaitStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ReturnAwaitStatementContext) TupleExpression() ITupleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleExpressionContext)
}

func (s *ReturnAwaitStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnAwaitStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturnAwaitStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitReturnAwaitStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) ReturnAwaitStatement() (localctx IReturnAwaitStatementContext) {
	localctx = NewReturnAwaitStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, LiteParserRULE_returnAwaitStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(974)
		p.Match(LiteParserLeft_Flow)
	}
	p.SetState(976)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-27)&-(0x1f+1)) == 0 && ((1<<uint((_la-27)))&((1<<(LiteParserLess_Less-27))|(1<<(LiteParserGreater_Greater-27))|(1<<(LiteParserLeft_Paren-27))|(1<<(LiteParserLeft_Brace-27))|(1<<(LiteParserLeft_Brack-27))|(1<<(LiteParserQuestion-27))|(1<<(LiteParserBang-27))|(1<<(LiteParserWave-27))|(1<<(LiteParserAdd-27))|(1<<(LiteParserSub-27))|(1<<(LiteParserGrave-27))|(1<<(LiteParserTypeI8-27))|(1<<(LiteParserTypeU8-27))|(1<<(LiteParserTypeI16-27))|(1<<(LiteParserTypeU16-27))|(1<<(LiteParserTypeI32-27)))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(LiteParserTypeU32-59))|(1<<(LiteParserTypeI64-59))|(1<<(LiteParserTypeU64-59))|(1<<(LiteParserTypeF32-59))|(1<<(LiteParserTypeF64-59))|(1<<(LiteParserTypeChr-59))|(1<<(LiteParserTypeStr-59))|(1<<(LiteParserTypeBool-59))|(1<<(LiteParserTypeInt-59))|(1<<(LiteParserTypeNum-59))|(1<<(LiteParserTypeByte-59))|(1<<(LiteParserTypeAny-59))|(1<<(LiteParserNilLiteral-59))|(1<<(LiteParserTrueLiteral-59))|(1<<(LiteParserFalseLiteral-59))|(1<<(LiteParserUndefinedLiteral-59))|(1<<(LiteParserNumberLiteral-59))|(1<<(LiteParserTextLiteral-59))|(1<<(LiteParserCharLiteral-59))|(1<<(LiteParserIDPrivate-59))|(1<<(LiteParserIDPublic-59))|(1<<(LiteParserDiscard-59)))) != 0) {
		{
			p.SetState(975)
			p.TupleExpression()
		}

	}
	{
		p.SetState(978)
		p.End()
	}

	return localctx
}

// IYieldReturnStatementContext is an interface to support dynamic dispatch.
type IYieldReturnStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsYieldReturnStatementContext differentiates from other interfaces.
	IsYieldReturnStatementContext()
}

type YieldReturnStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyYieldReturnStatementContext() *YieldReturnStatementContext {
	var p = new(YieldReturnStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_yieldReturnStatement
	return p
}

func (*YieldReturnStatementContext) IsYieldReturnStatementContext() {}

func NewYieldReturnStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *YieldReturnStatementContext {
	var p = new(YieldReturnStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_yieldReturnStatement

	return p
}

func (s *YieldReturnStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *YieldReturnStatementContext) At() antlr.TerminalNode {
	return s.GetToken(LiteParserAt, 0)
}

func (s *YieldReturnStatementContext) Left_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserLeft_Arrow, 0)
}

func (s *YieldReturnStatementContext) TupleExpression() ITupleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleExpressionContext)
}

func (s *YieldReturnStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *YieldReturnStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *YieldReturnStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *YieldReturnStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitYieldReturnStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) YieldReturnStatement() (localctx IYieldReturnStatementContext) {
	localctx = NewYieldReturnStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, LiteParserRULE_yieldReturnStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(980)
		p.Match(LiteParserAt)
	}
	{
		p.SetState(981)
		p.Match(LiteParserLeft_Arrow)
	}
	{
		p.SetState(982)
		p.TupleExpression()
	}
	{
		p.SetState(983)
		p.End()
	}

	return localctx
}

// IYieldBreakStatementContext is an interface to support dynamic dispatch.
type IYieldBreakStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsYieldBreakStatementContext differentiates from other interfaces.
	IsYieldBreakStatementContext()
}

type YieldBreakStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyYieldBreakStatementContext() *YieldBreakStatementContext {
	var p = new(YieldBreakStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_yieldBreakStatement
	return p
}

func (*YieldBreakStatementContext) IsYieldBreakStatementContext() {}

func NewYieldBreakStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *YieldBreakStatementContext {
	var p = new(YieldBreakStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_yieldBreakStatement

	return p
}

func (s *YieldBreakStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *YieldBreakStatementContext) At() antlr.TerminalNode {
	return s.GetToken(LiteParserAt, 0)
}

func (s *YieldBreakStatementContext) Left_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserLeft_Arrow, 0)
}

func (s *YieldBreakStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *YieldBreakStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *YieldBreakStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *YieldBreakStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitYieldBreakStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) YieldBreakStatement() (localctx IYieldBreakStatementContext) {
	localctx = NewYieldBreakStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, LiteParserRULE_yieldBreakStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(985)
		p.Match(LiteParserAt)
	}
	{
		p.SetState(986)
		p.Match(LiteParserLeft_Arrow)
	}
	{
		p.SetState(987)
		p.End()
	}

	return localctx
}

// IParameterClauseInContext is an interface to support dynamic dispatch.
type IParameterClauseInContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameterClauseInContext differentiates from other interfaces.
	IsParameterClauseInContext()
}

type ParameterClauseInContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterClauseInContext() *ParameterClauseInContext {
	var p = new(ParameterClauseInContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_parameterClauseIn
	return p
}

func (*ParameterClauseInContext) IsParameterClauseInContext() {}

func NewParameterClauseInContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterClauseInContext {
	var p = new(ParameterClauseInContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_parameterClauseIn

	return p
}

func (s *ParameterClauseInContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterClauseInContext) AllParameter() []IParameterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParameterContext)(nil)).Elem())
	var tst = make([]IParameterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParameterContext)
		}
	}

	return tst
}

func (s *ParameterClauseInContext) Parameter(i int) IParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParameterContext)
}

func (s *ParameterClauseInContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *ParameterClauseInContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *ParameterClauseInContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterClauseInContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParameterClauseInContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitParameterClauseIn(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) ParameterClauseIn() (localctx IParameterClauseInContext) {
	localctx = NewParameterClauseInContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, LiteParserRULE_parameterClauseIn)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(990)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(LiteParserLeft_Paren-32))|(1<<(LiteParserTypeI8-32))|(1<<(LiteParserTypeU8-32))|(1<<(LiteParserTypeI16-32))|(1<<(LiteParserTypeU16-32))|(1<<(LiteParserTypeI32-32))|(1<<(LiteParserTypeU32-32))|(1<<(LiteParserTypeI64-32))|(1<<(LiteParserTypeU64-32))|(1<<(LiteParserTypeF32-32))|(1<<(LiteParserTypeF64-32)))) != 0) || (((_la-64)&-(0x1f+1)) == 0 && ((1<<uint((_la-64)))&((1<<(LiteParserTypeChr-64))|(1<<(LiteParserTypeStr-64))|(1<<(LiteParserTypeBool-64))|(1<<(LiteParserTypeInt-64))|(1<<(LiteParserTypeNum-64))|(1<<(LiteParserTypeByte-64))|(1<<(LiteParserTypeAny-64))|(1<<(LiteParserIDPrivate-64))|(1<<(LiteParserIDPublic-64)))) != 0) {
		{
			p.SetState(989)
			p.Parameter()
		}

	}
	p.SetState(997)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserComma {
		{
			p.SetState(992)
			p.More()
		}
		{
			p.SetState(993)
			p.Parameter()
		}

		p.SetState(999)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IParameterClauseOutContext is an interface to support dynamic dispatch.
type IParameterClauseOutContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameterClauseOutContext differentiates from other interfaces.
	IsParameterClauseOutContext()
}

type ParameterClauseOutContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterClauseOutContext() *ParameterClauseOutContext {
	var p = new(ParameterClauseOutContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_parameterClauseOut
	return p
}

func (*ParameterClauseOutContext) IsParameterClauseOutContext() {}

func NewParameterClauseOutContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterClauseOutContext {
	var p = new(ParameterClauseOutContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_parameterClauseOut

	return p
}

func (s *ParameterClauseOutContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterClauseOutContext) AllParameter() []IParameterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParameterContext)(nil)).Elem())
	var tst = make([]IParameterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParameterContext)
		}
	}

	return tst
}

func (s *ParameterClauseOutContext) Parameter(i int) IParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParameterContext)
}

func (s *ParameterClauseOutContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *ParameterClauseOutContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *ParameterClauseOutContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterClauseOutContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParameterClauseOutContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitParameterClauseOut(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) ParameterClauseOut() (localctx IParameterClauseOutContext) {
	localctx = NewParameterClauseOutContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, LiteParserRULE_parameterClauseOut)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1001)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(LiteParserLeft_Paren-32))|(1<<(LiteParserTypeI8-32))|(1<<(LiteParserTypeU8-32))|(1<<(LiteParserTypeI16-32))|(1<<(LiteParserTypeU16-32))|(1<<(LiteParserTypeI32-32))|(1<<(LiteParserTypeU32-32))|(1<<(LiteParserTypeI64-32))|(1<<(LiteParserTypeU64-32))|(1<<(LiteParserTypeF32-32))|(1<<(LiteParserTypeF64-32)))) != 0) || (((_la-64)&-(0x1f+1)) == 0 && ((1<<uint((_la-64)))&((1<<(LiteParserTypeChr-64))|(1<<(LiteParserTypeStr-64))|(1<<(LiteParserTypeBool-64))|(1<<(LiteParserTypeInt-64))|(1<<(LiteParserTypeNum-64))|(1<<(LiteParserTypeByte-64))|(1<<(LiteParserTypeAny-64))|(1<<(LiteParserIDPrivate-64))|(1<<(LiteParserIDPublic-64)))) != 0) {
		{
			p.SetState(1000)
			p.Parameter()
		}

	}
	p.SetState(1008)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserComma {
		{
			p.SetState(1003)
			p.More()
		}
		{
			p.SetState(1004)
			p.Parameter()
		}

		p.SetState(1010)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IParameterContext is an interface to support dynamic dispatch.
type IParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameterContext differentiates from other interfaces.
	IsParameterContext()
}

type ParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterContext() *ParameterContext {
	var p = new(ParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_parameter
	return p
}

func (*ParameterContext) IsParameterContext() {}

func NewParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterContext {
	var p = new(ParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_parameter

	return p
}

func (s *ParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *ParameterContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *ParameterContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *ParameterContext) Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserEqual, 0)
}

func (s *ParameterContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ParameterContext) Dot_Dot() antlr.TerminalNode {
	return s.GetToken(LiteParserDot_Dot, 0)
}

func (s *ParameterContext) Dot_Dot_Dot() antlr.TerminalNode {
	return s.GetToken(LiteParserDot_Dot_Dot, 0)
}

func (s *ParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitParameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Parameter() (localctx IParameterContext) {
	localctx = NewParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, LiteParserRULE_parameter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1012)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Paren {
		{
			p.SetState(1011)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(1014)
		p.Id()
	}
	p.SetState(1016)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserDot_Dot_Dot || _la == LiteParserDot_Dot {
		{
			p.SetState(1015)
			_la = p.GetTokenStream().LA(1)

			if !(_la == LiteParserDot_Dot_Dot || _la == LiteParserDot_Dot) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(1018)
		p.TypeType()
	}
	p.SetState(1021)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserEqual {
		{
			p.SetState(1019)
			p.Match(LiteParserEqual)
		}
		{
			p.SetState(1020)
			p.expression(0)
		}

	}

	return localctx
}

// IFunctionSupportStatementContext is an interface to support dynamic dispatch.
type IFunctionSupportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionSupportStatementContext differentiates from other interfaces.
	IsFunctionSupportStatementContext()
}

type FunctionSupportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionSupportStatementContext() *FunctionSupportStatementContext {
	var p = new(FunctionSupportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_functionSupportStatement
	return p
}

func (*FunctionSupportStatementContext) IsFunctionSupportStatementContext() {}

func NewFunctionSupportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionSupportStatementContext {
	var p = new(FunctionSupportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_functionSupportStatement

	return p
}

func (s *FunctionSupportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionSupportStatementContext) ReturnStatement() IReturnStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturnStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturnStatementContext)
}

func (s *FunctionSupportStatementContext) ReturnAwaitStatement() IReturnAwaitStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturnAwaitStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturnAwaitStatementContext)
}

func (s *FunctionSupportStatementContext) YieldReturnStatement() IYieldReturnStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYieldReturnStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IYieldReturnStatementContext)
}

func (s *FunctionSupportStatementContext) YieldBreakStatement() IYieldBreakStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYieldBreakStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IYieldBreakStatementContext)
}

func (s *FunctionSupportStatementContext) JudgeCaseStatement() IJudgeCaseStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJudgeCaseStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJudgeCaseStatementContext)
}

func (s *FunctionSupportStatementContext) JudgeStatement() IJudgeStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJudgeStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJudgeStatementContext)
}

func (s *FunctionSupportStatementContext) LoopStatement() ILoopStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopStatementContext)
}

func (s *FunctionSupportStatementContext) LoopEachStatement() ILoopEachStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopEachStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopEachStatementContext)
}

func (s *FunctionSupportStatementContext) LoopCaseStatement() ILoopCaseStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopCaseStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopCaseStatementContext)
}

func (s *FunctionSupportStatementContext) LoopJumpStatement() ILoopJumpStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopJumpStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopJumpStatementContext)
}

func (s *FunctionSupportStatementContext) LoopContinueStatement() ILoopContinueStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopContinueStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopContinueStatementContext)
}

func (s *FunctionSupportStatementContext) UsingStatement() IUsingStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUsingStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUsingStatementContext)
}

func (s *FunctionSupportStatementContext) CheckStatement() ICheckStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICheckStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICheckStatementContext)
}

func (s *FunctionSupportStatementContext) CheckReportStatement() ICheckReportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICheckReportStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICheckReportStatementContext)
}

func (s *FunctionSupportStatementContext) FunctionStatement() IFunctionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionStatementContext)
}

func (s *FunctionSupportStatementContext) VariableStatement() IVariableStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableStatementContext)
}

func (s *FunctionSupportStatementContext) VariableDeclaredStatement() IVariableDeclaredStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclaredStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclaredStatementContext)
}

func (s *FunctionSupportStatementContext) ChannelAssignStatement() IChannelAssignStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChannelAssignStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChannelAssignStatementContext)
}

func (s *FunctionSupportStatementContext) AssignStatement() IAssignStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignStatementContext)
}

func (s *FunctionSupportStatementContext) ExpressionStatement() IExpressionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionStatementContext)
}

func (s *FunctionSupportStatementContext) New_Line() antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, 0)
}

func (s *FunctionSupportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionSupportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionSupportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitFunctionSupportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) FunctionSupportStatement() (localctx IFunctionSupportStatementContext) {
	localctx = NewFunctionSupportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, LiteParserRULE_functionSupportStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1044)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 116, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1023)
			p.ReturnStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1024)
			p.ReturnAwaitStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1025)
			p.YieldReturnStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1026)
			p.YieldBreakStatement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1027)
			p.JudgeCaseStatement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1028)
			p.JudgeStatement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1029)
			p.LoopStatement()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1030)
			p.LoopEachStatement()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1031)
			p.LoopCaseStatement()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1032)
			p.LoopJumpStatement()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1033)
			p.LoopContinueStatement()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1034)
			p.UsingStatement()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(1035)
			p.CheckStatement()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(1036)
			p.CheckReportStatement()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(1037)
			p.FunctionStatement()
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(1038)
			p.VariableStatement()
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(1039)
			p.VariableDeclaredStatement()
		}

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(1040)
			p.ChannelAssignStatement()
		}

	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(1041)
			p.AssignStatement()
		}

	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(1042)
			p.ExpressionStatement()
		}

	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(1043)
			p.Match(LiteParserNew_Line)
		}

	}

	return localctx
}

// IJudgeCaseStatementContext is an interface to support dynamic dispatch.
type IJudgeCaseStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJudgeCaseStatementContext differentiates from other interfaces.
	IsJudgeCaseStatementContext()
}

type JudgeCaseStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJudgeCaseStatementContext() *JudgeCaseStatementContext {
	var p = new(JudgeCaseStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_judgeCaseStatement
	return p
}

func (*JudgeCaseStatementContext) IsJudgeCaseStatementContext() {}

func NewJudgeCaseStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JudgeCaseStatementContext {
	var p = new(JudgeCaseStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_judgeCaseStatement

	return p
}

func (s *JudgeCaseStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *JudgeCaseStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *JudgeCaseStatementContext) Question() antlr.TerminalNode {
	return s.GetToken(LiteParserQuestion, 0)
}

func (s *JudgeCaseStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *JudgeCaseStatementContext) AllCaseStatement() []ICaseStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICaseStatementContext)(nil)).Elem())
	var tst = make([]ICaseStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICaseStatementContext)
		}
	}

	return tst
}

func (s *JudgeCaseStatementContext) CaseStatement(i int) ICaseStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICaseStatementContext)
}

func (s *JudgeCaseStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JudgeCaseStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JudgeCaseStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitJudgeCaseStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) JudgeCaseStatement() (localctx IJudgeCaseStatementContext) {
	localctx = NewJudgeCaseStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, LiteParserRULE_judgeCaseStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1046)
		p.expression(0)
	}
	{
		p.SetState(1047)
		p.Match(LiteParserQuestion)
	}
	p.SetState(1049)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la-27)&-(0x1f+1)) == 0 && ((1<<uint((_la-27)))&((1<<(LiteParserLess_Less-27))|(1<<(LiteParserGreater_Greater-27))|(1<<(LiteParserLeft_Paren-27))|(1<<(LiteParserLeft_Brace-27))|(1<<(LiteParserLeft_Brack-27))|(1<<(LiteParserQuestion-27))|(1<<(LiteParserBang-27))|(1<<(LiteParserWave-27))|(1<<(LiteParserAdd-27))|(1<<(LiteParserSub-27))|(1<<(LiteParserGrave-27))|(1<<(LiteParserTypeI8-27))|(1<<(LiteParserTypeU8-27))|(1<<(LiteParserTypeI16-27))|(1<<(LiteParserTypeU16-27))|(1<<(LiteParserTypeI32-27)))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(LiteParserTypeU32-59))|(1<<(LiteParserTypeI64-59))|(1<<(LiteParserTypeU64-59))|(1<<(LiteParserTypeF32-59))|(1<<(LiteParserTypeF64-59))|(1<<(LiteParserTypeChr-59))|(1<<(LiteParserTypeStr-59))|(1<<(LiteParserTypeBool-59))|(1<<(LiteParserTypeInt-59))|(1<<(LiteParserTypeNum-59))|(1<<(LiteParserTypeByte-59))|(1<<(LiteParserTypeAny-59))|(1<<(LiteParserNilLiteral-59))|(1<<(LiteParserTrueLiteral-59))|(1<<(LiteParserFalseLiteral-59))|(1<<(LiteParserUndefinedLiteral-59))|(1<<(LiteParserNumberLiteral-59))|(1<<(LiteParserTextLiteral-59))|(1<<(LiteParserCharLiteral-59))|(1<<(LiteParserIDPrivate-59))|(1<<(LiteParserIDPublic-59))|(1<<(LiteParserDiscard-59)))) != 0) {
		{
			p.SetState(1048)
			p.CaseStatement()
		}

		p.SetState(1051)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1053)
		p.End()
	}

	return localctx
}

// ICaseStatementContext is an interface to support dynamic dispatch.
type ICaseStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaseStatementContext differentiates from other interfaces.
	IsCaseStatementContext()
}

type CaseStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaseStatementContext() *CaseStatementContext {
	var p = new(CaseStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_caseStatement
	return p
}

func (*CaseStatementContext) IsCaseStatementContext() {}

func NewCaseStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseStatementContext {
	var p = new(CaseStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_caseStatement

	return p
}

func (s *CaseStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseStatementContext) AllCaseExprStatement() []ICaseExprStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICaseExprStatementContext)(nil)).Elem())
	var tst = make([]ICaseExprStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICaseExprStatementContext)
		}
	}

	return tst
}

func (s *CaseStatementContext) CaseExprStatement(i int) ICaseExprStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseExprStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICaseExprStatementContext)
}

func (s *CaseStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *CaseStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *CaseStatementContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *CaseStatementContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *CaseStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *CaseStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *CaseStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitCaseStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) CaseStatement() (localctx ICaseStatementContext) {
	localctx = NewCaseStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, LiteParserRULE_caseStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1055)
		p.CaseExprStatement()
	}
	p.SetState(1061)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserComma {
		{
			p.SetState(1056)
			p.More()
		}
		{
			p.SetState(1057)
			p.CaseExprStatement()
		}

		p.SetState(1063)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1064)
		p.Left_brace()
	}
	p.SetState(1068)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 119, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1065)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(1070)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 119, p.GetParserRuleContext())
	}
	{
		p.SetState(1071)
		p.Right_brace()
	}

	return localctx
}

// ICaseExprStatementContext is an interface to support dynamic dispatch.
type ICaseExprStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaseExprStatementContext differentiates from other interfaces.
	IsCaseExprStatementContext()
}

type CaseExprStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaseExprStatementContext() *CaseExprStatementContext {
	var p = new(CaseExprStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_caseExprStatement
	return p
}

func (*CaseExprStatementContext) IsCaseExprStatementContext() {}

func NewCaseExprStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseExprStatementContext {
	var p = new(CaseExprStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_caseExprStatement

	return p
}

func (s *CaseExprStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseExprStatementContext) Discard() antlr.TerminalNode {
	return s.GetToken(LiteParserDiscard, 0)
}

func (s *CaseExprStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CaseExprStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *CaseExprStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *CaseExprStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseExprStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseExprStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitCaseExprStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) CaseExprStatement() (localctx ICaseExprStatementContext) {
	localctx = NewCaseExprStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, LiteParserRULE_caseExprStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1080)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 121, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1073)
			p.Match(LiteParserDiscard)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1074)
			p.expression(0)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(1077)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case LiteParserTypeI8, LiteParserTypeU8, LiteParserTypeI16, LiteParserTypeU16, LiteParserTypeI32, LiteParserTypeU32, LiteParserTypeI64, LiteParserTypeU64, LiteParserTypeF32, LiteParserTypeF64, LiteParserTypeChr, LiteParserTypeStr, LiteParserTypeBool, LiteParserTypeInt, LiteParserTypeNum, LiteParserTypeByte, LiteParserTypeAny, LiteParserIDPrivate, LiteParserIDPublic:
			{
				p.SetState(1075)
				p.Id()
			}

		case LiteParserDiscard:
			{
				p.SetState(1076)
				p.Match(LiteParserDiscard)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(1079)
			p.TypeType()
		}

	}

	return localctx
}

// IJudgeStatementContext is an interface to support dynamic dispatch.
type IJudgeStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJudgeStatementContext differentiates from other interfaces.
	IsJudgeStatementContext()
}

type JudgeStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJudgeStatementContext() *JudgeStatementContext {
	var p = new(JudgeStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_judgeStatement
	return p
}

func (*JudgeStatementContext) IsJudgeStatementContext() {}

func NewJudgeStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JudgeStatementContext {
	var p = new(JudgeStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_judgeStatement

	return p
}

func (s *JudgeStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *JudgeStatementContext) JudgeIfStatement() IJudgeIfStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJudgeIfStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJudgeIfStatementContext)
}

func (s *JudgeStatementContext) JudgeElseStatement() IJudgeElseStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJudgeElseStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJudgeElseStatementContext)
}

func (s *JudgeStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *JudgeStatementContext) AllJudgeElseIfStatement() []IJudgeElseIfStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IJudgeElseIfStatementContext)(nil)).Elem())
	var tst = make([]IJudgeElseIfStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IJudgeElseIfStatementContext)
		}
	}

	return tst
}

func (s *JudgeStatementContext) JudgeElseIfStatement(i int) IJudgeElseIfStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJudgeElseIfStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IJudgeElseIfStatementContext)
}

func (s *JudgeStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JudgeStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JudgeStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitJudgeStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) JudgeStatement() (localctx IJudgeStatementContext) {
	localctx = NewJudgeStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, LiteParserRULE_judgeStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(1101)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 124, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1082)
			p.JudgeIfStatement()
		}
		p.SetState(1086)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 122, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1083)
					p.JudgeElseIfStatement()
				}

			}
			p.SetState(1088)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 122, p.GetParserRuleContext())
		}
		{
			p.SetState(1089)
			p.JudgeElseStatement()
		}
		{
			p.SetState(1090)
			p.End()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1092)
			p.JudgeIfStatement()
		}
		p.SetState(1096)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for (((_la-27)&-(0x1f+1)) == 0 && ((1<<uint((_la-27)))&((1<<(LiteParserLess_Less-27))|(1<<(LiteParserGreater_Greater-27))|(1<<(LiteParserLeft_Paren-27))|(1<<(LiteParserLeft_Brace-27))|(1<<(LiteParserLeft_Brack-27))|(1<<(LiteParserQuestion-27))|(1<<(LiteParserBang-27))|(1<<(LiteParserWave-27))|(1<<(LiteParserAdd-27))|(1<<(LiteParserSub-27))|(1<<(LiteParserGrave-27))|(1<<(LiteParserTypeI8-27))|(1<<(LiteParserTypeU8-27))|(1<<(LiteParserTypeI16-27))|(1<<(LiteParserTypeU16-27))|(1<<(LiteParserTypeI32-27)))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(LiteParserTypeU32-59))|(1<<(LiteParserTypeI64-59))|(1<<(LiteParserTypeU64-59))|(1<<(LiteParserTypeF32-59))|(1<<(LiteParserTypeF64-59))|(1<<(LiteParserTypeChr-59))|(1<<(LiteParserTypeStr-59))|(1<<(LiteParserTypeBool-59))|(1<<(LiteParserTypeInt-59))|(1<<(LiteParserTypeNum-59))|(1<<(LiteParserTypeByte-59))|(1<<(LiteParserTypeAny-59))|(1<<(LiteParserNilLiteral-59))|(1<<(LiteParserTrueLiteral-59))|(1<<(LiteParserFalseLiteral-59))|(1<<(LiteParserUndefinedLiteral-59))|(1<<(LiteParserNumberLiteral-59))|(1<<(LiteParserTextLiteral-59))|(1<<(LiteParserCharLiteral-59))|(1<<(LiteParserIDPrivate-59))|(1<<(LiteParserIDPublic-59))|(1<<(LiteParserDiscard-59)))) != 0) {
			{
				p.SetState(1093)
				p.JudgeElseIfStatement()
			}

			p.SetState(1098)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1099)
			p.End()
		}

	}

	return localctx
}

// IJudgeElseStatementContext is an interface to support dynamic dispatch.
type IJudgeElseStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJudgeElseStatementContext differentiates from other interfaces.
	IsJudgeElseStatementContext()
}

type JudgeElseStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJudgeElseStatementContext() *JudgeElseStatementContext {
	var p = new(JudgeElseStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_judgeElseStatement
	return p
}

func (*JudgeElseStatementContext) IsJudgeElseStatementContext() {}

func NewJudgeElseStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JudgeElseStatementContext {
	var p = new(JudgeElseStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_judgeElseStatement

	return p
}

func (s *JudgeElseStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *JudgeElseStatementContext) Discard() antlr.TerminalNode {
	return s.GetToken(LiteParserDiscard, 0)
}

func (s *JudgeElseStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *JudgeElseStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *JudgeElseStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *JudgeElseStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *JudgeElseStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JudgeElseStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JudgeElseStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitJudgeElseStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) JudgeElseStatement() (localctx IJudgeElseStatementContext) {
	localctx = NewJudgeElseStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, LiteParserRULE_judgeElseStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1103)
		p.Match(LiteParserDiscard)
	}
	{
		p.SetState(1104)
		p.Left_brace()
	}
	p.SetState(1108)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 125, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1105)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(1110)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 125, p.GetParserRuleContext())
	}
	{
		p.SetState(1111)
		p.Right_brace()
	}

	return localctx
}

// IJudgeIfStatementContext is an interface to support dynamic dispatch.
type IJudgeIfStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJudgeIfStatementContext differentiates from other interfaces.
	IsJudgeIfStatementContext()
}

type JudgeIfStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJudgeIfStatementContext() *JudgeIfStatementContext {
	var p = new(JudgeIfStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_judgeIfStatement
	return p
}

func (*JudgeIfStatementContext) IsJudgeIfStatementContext() {}

func NewJudgeIfStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JudgeIfStatementContext {
	var p = new(JudgeIfStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_judgeIfStatement

	return p
}

func (s *JudgeIfStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *JudgeIfStatementContext) Question() antlr.TerminalNode {
	return s.GetToken(LiteParserQuestion, 0)
}

func (s *JudgeIfStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *JudgeIfStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *JudgeIfStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *JudgeIfStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *JudgeIfStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *JudgeIfStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JudgeIfStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JudgeIfStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitJudgeIfStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) JudgeIfStatement() (localctx IJudgeIfStatementContext) {
	localctx = NewJudgeIfStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, LiteParserRULE_judgeIfStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1113)
		p.Match(LiteParserQuestion)
	}
	{
		p.SetState(1114)
		p.expression(0)
	}
	{
		p.SetState(1115)
		p.Left_brace()
	}
	p.SetState(1119)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 126, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1116)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(1121)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 126, p.GetParserRuleContext())
	}
	{
		p.SetState(1122)
		p.Right_brace()
	}

	return localctx
}

// IJudgeElseIfStatementContext is an interface to support dynamic dispatch.
type IJudgeElseIfStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJudgeElseIfStatementContext differentiates from other interfaces.
	IsJudgeElseIfStatementContext()
}

type JudgeElseIfStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJudgeElseIfStatementContext() *JudgeElseIfStatementContext {
	var p = new(JudgeElseIfStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_judgeElseIfStatement
	return p
}

func (*JudgeElseIfStatementContext) IsJudgeElseIfStatementContext() {}

func NewJudgeElseIfStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JudgeElseIfStatementContext {
	var p = new(JudgeElseIfStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_judgeElseIfStatement

	return p
}

func (s *JudgeElseIfStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *JudgeElseIfStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *JudgeElseIfStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *JudgeElseIfStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *JudgeElseIfStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *JudgeElseIfStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *JudgeElseIfStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JudgeElseIfStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JudgeElseIfStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitJudgeElseIfStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) JudgeElseIfStatement() (localctx IJudgeElseIfStatementContext) {
	localctx = NewJudgeElseIfStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, LiteParserRULE_judgeElseIfStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1124)
		p.expression(0)
	}
	{
		p.SetState(1125)
		p.Left_brace()
	}
	p.SetState(1129)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 127, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1126)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(1131)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 127, p.GetParserRuleContext())
	}
	{
		p.SetState(1132)
		p.Right_brace()
	}

	return localctx
}

// ILoopStatementContext is an interface to support dynamic dispatch.
type ILoopStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoopStatementContext differentiates from other interfaces.
	IsLoopStatementContext()
}

type LoopStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoopStatementContext() *LoopStatementContext {
	var p = new(LoopStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_loopStatement
	return p
}

func (*LoopStatementContext) IsLoopStatementContext() {}

func NewLoopStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopStatementContext {
	var p = new(LoopStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_loopStatement

	return p
}

func (s *LoopStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *LoopStatementContext) At() antlr.TerminalNode {
	return s.GetToken(LiteParserAt, 0)
}

func (s *LoopStatementContext) IteratorStatement() IIteratorStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIteratorStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIteratorStatementContext)
}

func (s *LoopStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *LoopStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *LoopStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *LoopStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *LoopStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *LoopStatementContext) LoopElseStatement() ILoopElseStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopElseStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopElseStatementContext)
}

func (s *LoopStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitLoopStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) LoopStatement() (localctx ILoopStatementContext) {
	localctx = NewLoopStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, LiteParserRULE_loopStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1134)
		p.Id()
	}
	{
		p.SetState(1135)
		p.Match(LiteParserAt)
	}
	{
		p.SetState(1136)
		p.IteratorStatement()
	}
	{
		p.SetState(1137)
		p.Left_brace()
	}
	p.SetState(1141)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 128, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1138)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(1143)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 128, p.GetParserRuleContext())
	}
	{
		p.SetState(1144)
		p.Right_brace()
	}
	p.SetState(1146)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserDiscard {
		{
			p.SetState(1145)
			p.LoopElseStatement()
		}

	}
	{
		p.SetState(1148)
		p.End()
	}

	return localctx
}

// ILoopEachStatementContext is an interface to support dynamic dispatch.
type ILoopEachStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoopEachStatementContext differentiates from other interfaces.
	IsLoopEachStatementContext()
}

type LoopEachStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoopEachStatementContext() *LoopEachStatementContext {
	var p = new(LoopEachStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_loopEachStatement
	return p
}

func (*LoopEachStatementContext) IsLoopEachStatementContext() {}

func NewLoopEachStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopEachStatementContext {
	var p = new(LoopEachStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_loopEachStatement

	return p
}

func (s *LoopEachStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopEachStatementContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *LoopEachStatementContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *LoopEachStatementContext) At() antlr.TerminalNode {
	return s.GetToken(LiteParserAt, 0)
}

func (s *LoopEachStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LoopEachStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *LoopEachStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *LoopEachStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *LoopEachStatementContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *LoopEachStatementContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *LoopEachStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *LoopEachStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *LoopEachStatementContext) LoopElseStatement() ILoopElseStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopElseStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopElseStatementContext)
}

func (s *LoopEachStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopEachStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopEachStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitLoopEachStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) LoopEachStatement() (localctx ILoopEachStatementContext) {
	localctx = NewLoopEachStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, LiteParserRULE_loopEachStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1154)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Paren {
		{
			p.SetState(1150)
			p.Left_paren()
		}
		{
			p.SetState(1151)
			p.Id()
		}
		{
			p.SetState(1152)
			p.Right_paren()
		}

	}
	{
		p.SetState(1156)
		p.Id()
	}
	{
		p.SetState(1157)
		p.Match(LiteParserAt)
	}
	{
		p.SetState(1158)
		p.expression(0)
	}
	{
		p.SetState(1159)
		p.Left_brace()
	}
	p.SetState(1163)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 131, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1160)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(1165)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 131, p.GetParserRuleContext())
	}
	{
		p.SetState(1166)
		p.Right_brace()
	}
	p.SetState(1168)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserDiscard {
		{
			p.SetState(1167)
			p.LoopElseStatement()
		}

	}
	{
		p.SetState(1170)
		p.End()
	}

	return localctx
}

// ILoopCaseStatementContext is an interface to support dynamic dispatch.
type ILoopCaseStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoopCaseStatementContext differentiates from other interfaces.
	IsLoopCaseStatementContext()
}

type LoopCaseStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoopCaseStatementContext() *LoopCaseStatementContext {
	var p = new(LoopCaseStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_loopCaseStatement
	return p
}

func (*LoopCaseStatementContext) IsLoopCaseStatementContext() {}

func NewLoopCaseStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopCaseStatementContext {
	var p = new(LoopCaseStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_loopCaseStatement

	return p
}

func (s *LoopCaseStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopCaseStatementContext) At() antlr.TerminalNode {
	return s.GetToken(LiteParserAt, 0)
}

func (s *LoopCaseStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LoopCaseStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *LoopCaseStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *LoopCaseStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *LoopCaseStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *LoopCaseStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *LoopCaseStatementContext) LoopElseStatement() ILoopElseStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopElseStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopElseStatementContext)
}

func (s *LoopCaseStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopCaseStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopCaseStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitLoopCaseStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) LoopCaseStatement() (localctx ILoopCaseStatementContext) {
	localctx = NewLoopCaseStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, LiteParserRULE_loopCaseStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1172)
		p.Match(LiteParserAt)
	}
	{
		p.SetState(1173)
		p.expression(0)
	}
	{
		p.SetState(1174)
		p.Left_brace()
	}
	p.SetState(1178)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 133, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1175)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(1180)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 133, p.GetParserRuleContext())
	}
	{
		p.SetState(1181)
		p.Right_brace()
	}
	p.SetState(1183)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserDiscard {
		{
			p.SetState(1182)
			p.LoopElseStatement()
		}

	}
	{
		p.SetState(1185)
		p.End()
	}

	return localctx
}

// ILoopElseStatementContext is an interface to support dynamic dispatch.
type ILoopElseStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoopElseStatementContext differentiates from other interfaces.
	IsLoopElseStatementContext()
}

type LoopElseStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoopElseStatementContext() *LoopElseStatementContext {
	var p = new(LoopElseStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_loopElseStatement
	return p
}

func (*LoopElseStatementContext) IsLoopElseStatementContext() {}

func NewLoopElseStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopElseStatementContext {
	var p = new(LoopElseStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_loopElseStatement

	return p
}

func (s *LoopElseStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopElseStatementContext) Discard() antlr.TerminalNode {
	return s.GetToken(LiteParserDiscard, 0)
}

func (s *LoopElseStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *LoopElseStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *LoopElseStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *LoopElseStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *LoopElseStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopElseStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopElseStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitLoopElseStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) LoopElseStatement() (localctx ILoopElseStatementContext) {
	localctx = NewLoopElseStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, LiteParserRULE_loopElseStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1187)
		p.Match(LiteParserDiscard)
	}
	{
		p.SetState(1188)
		p.Left_brace()
	}
	p.SetState(1192)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 135, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1189)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(1194)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 135, p.GetParserRuleContext())
	}
	{
		p.SetState(1195)
		p.Right_brace()
	}

	return localctx
}

// ILoopJumpStatementContext is an interface to support dynamic dispatch.
type ILoopJumpStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoopJumpStatementContext differentiates from other interfaces.
	IsLoopJumpStatementContext()
}

type LoopJumpStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoopJumpStatementContext() *LoopJumpStatementContext {
	var p = new(LoopJumpStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_loopJumpStatement
	return p
}

func (*LoopJumpStatementContext) IsLoopJumpStatementContext() {}

func NewLoopJumpStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopJumpStatementContext {
	var p = new(LoopJumpStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_loopJumpStatement

	return p
}

func (s *LoopJumpStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopJumpStatementContext) Wave() antlr.TerminalNode {
	return s.GetToken(LiteParserWave, 0)
}

func (s *LoopJumpStatementContext) At() antlr.TerminalNode {
	return s.GetToken(LiteParserAt, 0)
}

func (s *LoopJumpStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *LoopJumpStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopJumpStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopJumpStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitLoopJumpStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) LoopJumpStatement() (localctx ILoopJumpStatementContext) {
	localctx = NewLoopJumpStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, LiteParserRULE_loopJumpStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1197)
		p.Match(LiteParserWave)
	}
	{
		p.SetState(1198)
		p.Match(LiteParserAt)
	}
	{
		p.SetState(1199)
		p.End()
	}

	return localctx
}

// ILoopContinueStatementContext is an interface to support dynamic dispatch.
type ILoopContinueStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoopContinueStatementContext differentiates from other interfaces.
	IsLoopContinueStatementContext()
}

type LoopContinueStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoopContinueStatementContext() *LoopContinueStatementContext {
	var p = new(LoopContinueStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_loopContinueStatement
	return p
}

func (*LoopContinueStatementContext) IsLoopContinueStatementContext() {}

func NewLoopContinueStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopContinueStatementContext {
	var p = new(LoopContinueStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_loopContinueStatement

	return p
}

func (s *LoopContinueStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopContinueStatementContext) Xor() antlr.TerminalNode {
	return s.GetToken(LiteParserXor, 0)
}

func (s *LoopContinueStatementContext) At() antlr.TerminalNode {
	return s.GetToken(LiteParserAt, 0)
}

func (s *LoopContinueStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *LoopContinueStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopContinueStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopContinueStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitLoopContinueStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) LoopContinueStatement() (localctx ILoopContinueStatementContext) {
	localctx = NewLoopContinueStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, LiteParserRULE_loopContinueStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1201)
		p.Match(LiteParserXor)
	}
	{
		p.SetState(1202)
		p.Match(LiteParserAt)
	}
	{
		p.SetState(1203)
		p.End()
	}

	return localctx
}

// ICheckStatementContext is an interface to support dynamic dispatch.
type ICheckStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCheckStatementContext differentiates from other interfaces.
	IsCheckStatementContext()
}

type CheckStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCheckStatementContext() *CheckStatementContext {
	var p = new(CheckStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_checkStatement
	return p
}

func (*CheckStatementContext) IsCheckStatementContext() {}

func NewCheckStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CheckStatementContext {
	var p = new(CheckStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_checkStatement

	return p
}

func (s *CheckStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CheckStatementContext) Bang() antlr.TerminalNode {
	return s.GetToken(LiteParserBang, 0)
}

func (s *CheckStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *CheckStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *CheckStatementContext) CheckFinallyStatment() ICheckFinallyStatmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICheckFinallyStatmentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICheckFinallyStatmentContext)
}

func (s *CheckStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *CheckStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *CheckStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *CheckStatementContext) AllCheckErrorStatement() []ICheckErrorStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICheckErrorStatementContext)(nil)).Elem())
	var tst = make([]ICheckErrorStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICheckErrorStatementContext)
		}
	}

	return tst
}

func (s *CheckStatementContext) CheckErrorStatement(i int) ICheckErrorStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICheckErrorStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICheckErrorStatementContext)
}

func (s *CheckStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CheckStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CheckStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitCheckStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) CheckStatement() (localctx ICheckStatementContext) {
	localctx = NewCheckStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, LiteParserRULE_checkStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(1239)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 140, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1205)
			p.Match(LiteParserBang)
		}
		{
			p.SetState(1206)
			p.Left_brace()
		}
		p.SetState(1210)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 136, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1207)
					p.FunctionSupportStatement()
				}

			}
			p.SetState(1212)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 136, p.GetParserRuleContext())
		}
		{
			p.SetState(1213)
			p.Right_brace()
		}
		p.SetState(1217)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ((_la-54)&-(0x1f+1)) == 0 && ((1<<uint((_la-54)))&((1<<(LiteParserTypeI8-54))|(1<<(LiteParserTypeU8-54))|(1<<(LiteParserTypeI16-54))|(1<<(LiteParserTypeU16-54))|(1<<(LiteParserTypeI32-54))|(1<<(LiteParserTypeU32-54))|(1<<(LiteParserTypeI64-54))|(1<<(LiteParserTypeU64-54))|(1<<(LiteParserTypeF32-54))|(1<<(LiteParserTypeF64-54))|(1<<(LiteParserTypeChr-54))|(1<<(LiteParserTypeStr-54))|(1<<(LiteParserTypeBool-54))|(1<<(LiteParserTypeInt-54))|(1<<(LiteParserTypeNum-54))|(1<<(LiteParserTypeByte-54))|(1<<(LiteParserTypeAny-54))|(1<<(LiteParserIDPrivate-54))|(1<<(LiteParserIDPublic-54)))) != 0 {
			{
				p.SetState(1214)
				p.CheckErrorStatement()
			}

			p.SetState(1219)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1220)
			p.CheckFinallyStatment()
		}
		{
			p.SetState(1221)
			p.End()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1223)
			p.Match(LiteParserBang)
		}
		{
			p.SetState(1224)
			p.Left_brace()
		}
		p.SetState(1228)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 138, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1225)
					p.FunctionSupportStatement()
				}

			}
			p.SetState(1230)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 138, p.GetParserRuleContext())
		}
		{
			p.SetState(1231)
			p.Right_brace()
		}
		p.SetState(1233)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = (((_la-54)&-(0x1f+1)) == 0 && ((1<<uint((_la-54)))&((1<<(LiteParserTypeI8-54))|(1<<(LiteParserTypeU8-54))|(1<<(LiteParserTypeI16-54))|(1<<(LiteParserTypeU16-54))|(1<<(LiteParserTypeI32-54))|(1<<(LiteParserTypeU32-54))|(1<<(LiteParserTypeI64-54))|(1<<(LiteParserTypeU64-54))|(1<<(LiteParserTypeF32-54))|(1<<(LiteParserTypeF64-54))|(1<<(LiteParserTypeChr-54))|(1<<(LiteParserTypeStr-54))|(1<<(LiteParserTypeBool-54))|(1<<(LiteParserTypeInt-54))|(1<<(LiteParserTypeNum-54))|(1<<(LiteParserTypeByte-54))|(1<<(LiteParserTypeAny-54))|(1<<(LiteParserIDPrivate-54))|(1<<(LiteParserIDPublic-54)))) != 0) {
			{
				p.SetState(1232)
				p.CheckErrorStatement()
			}

			p.SetState(1235)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1237)
			p.End()
		}

	}

	return localctx
}

// IUsingStatementContext is an interface to support dynamic dispatch.
type IUsingStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUsingStatementContext differentiates from other interfaces.
	IsUsingStatementContext()
}

type UsingStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUsingStatementContext() *UsingStatementContext {
	var p = new(UsingStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_usingStatement
	return p
}

func (*UsingStatementContext) IsUsingStatementContext() {}

func NewUsingStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UsingStatementContext {
	var p = new(UsingStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_usingStatement

	return p
}

func (s *UsingStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *UsingStatementContext) Bang() antlr.TerminalNode {
	return s.GetToken(LiteParserBang, 0)
}

func (s *UsingStatementContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *UsingStatementContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *UsingStatementContext) Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserEqual, 0)
}

func (s *UsingStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *UsingStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *UsingStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UsingStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UsingStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitUsingStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) UsingStatement() (localctx IUsingStatementContext) {
	localctx = NewUsingStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, LiteParserRULE_usingStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1241)
		p.Match(LiteParserBang)
	}
	{
		p.SetState(1242)
		p.expression(0)
	}
	p.SetState(1244)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(LiteParserLeft_Paren-32))|(1<<(LiteParserLeft_Brack-32))|(1<<(LiteParserQuestion-32))|(1<<(LiteParserBang-32))|(1<<(LiteParserTypeI8-32))|(1<<(LiteParserTypeU8-32))|(1<<(LiteParserTypeI16-32))|(1<<(LiteParserTypeU16-32))|(1<<(LiteParserTypeI32-32))|(1<<(LiteParserTypeU32-32))|(1<<(LiteParserTypeI64-32))|(1<<(LiteParserTypeU64-32))|(1<<(LiteParserTypeF32-32))|(1<<(LiteParserTypeF64-32)))) != 0) || (((_la-64)&-(0x1f+1)) == 0 && ((1<<uint((_la-64)))&((1<<(LiteParserTypeChr-64))|(1<<(LiteParserTypeStr-64))|(1<<(LiteParserTypeBool-64))|(1<<(LiteParserTypeInt-64))|(1<<(LiteParserTypeNum-64))|(1<<(LiteParserTypeByte-64))|(1<<(LiteParserTypeAny-64))|(1<<(LiteParserIDPrivate-64))|(1<<(LiteParserIDPublic-64)))) != 0) {
		{
			p.SetState(1243)
			p.TypeType()
		}

	}
	{
		p.SetState(1246)
		p.Match(LiteParserEqual)
	}
	{
		p.SetState(1247)
		p.expression(0)
	}
	{
		p.SetState(1248)
		p.End()
	}

	return localctx
}

// ICheckErrorStatementContext is an interface to support dynamic dispatch.
type ICheckErrorStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCheckErrorStatementContext differentiates from other interfaces.
	IsCheckErrorStatementContext()
}

type CheckErrorStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCheckErrorStatementContext() *CheckErrorStatementContext {
	var p = new(CheckErrorStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_checkErrorStatement
	return p
}

func (*CheckErrorStatementContext) IsCheckErrorStatementContext() {}

func NewCheckErrorStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CheckErrorStatementContext {
	var p = new(CheckErrorStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_checkErrorStatement

	return p
}

func (s *CheckErrorStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CheckErrorStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *CheckErrorStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *CheckErrorStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *CheckErrorStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *CheckErrorStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *CheckErrorStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *CheckErrorStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CheckErrorStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CheckErrorStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitCheckErrorStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) CheckErrorStatement() (localctx ICheckErrorStatementContext) {
	localctx = NewCheckErrorStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, LiteParserRULE_checkErrorStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1254)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 142, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1250)
			p.Id()
		}

	case 2:
		{
			p.SetState(1251)
			p.Id()
		}
		{
			p.SetState(1252)
			p.TypeType()
		}

	}
	{
		p.SetState(1256)
		p.Left_brace()
	}
	p.SetState(1260)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 143, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1257)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(1262)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 143, p.GetParserRuleContext())
	}
	{
		p.SetState(1263)
		p.Right_brace()
	}

	return localctx
}

// ICheckFinallyStatmentContext is an interface to support dynamic dispatch.
type ICheckFinallyStatmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCheckFinallyStatmentContext differentiates from other interfaces.
	IsCheckFinallyStatmentContext()
}

type CheckFinallyStatmentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCheckFinallyStatmentContext() *CheckFinallyStatmentContext {
	var p = new(CheckFinallyStatmentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_checkFinallyStatment
	return p
}

func (*CheckFinallyStatmentContext) IsCheckFinallyStatmentContext() {}

func NewCheckFinallyStatmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CheckFinallyStatmentContext {
	var p = new(CheckFinallyStatmentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_checkFinallyStatment

	return p
}

func (s *CheckFinallyStatmentContext) GetParser() antlr.Parser { return s.parser }

func (s *CheckFinallyStatmentContext) Discard() antlr.TerminalNode {
	return s.GetToken(LiteParserDiscard, 0)
}

func (s *CheckFinallyStatmentContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *CheckFinallyStatmentContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *CheckFinallyStatmentContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *CheckFinallyStatmentContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *CheckFinallyStatmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CheckFinallyStatmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CheckFinallyStatmentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitCheckFinallyStatment(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) CheckFinallyStatment() (localctx ICheckFinallyStatmentContext) {
	localctx = NewCheckFinallyStatmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, LiteParserRULE_checkFinallyStatment)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1265)
		p.Match(LiteParserDiscard)
	}
	{
		p.SetState(1266)
		p.Left_brace()
	}
	p.SetState(1270)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 144, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1267)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(1272)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 144, p.GetParserRuleContext())
	}
	{
		p.SetState(1273)
		p.Right_brace()
	}

	return localctx
}

// ICheckReportStatementContext is an interface to support dynamic dispatch.
type ICheckReportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCheckReportStatementContext differentiates from other interfaces.
	IsCheckReportStatementContext()
}

type CheckReportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCheckReportStatementContext() *CheckReportStatementContext {
	var p = new(CheckReportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_checkReportStatement
	return p
}

func (*CheckReportStatementContext) IsCheckReportStatementContext() {}

func NewCheckReportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CheckReportStatementContext {
	var p = new(CheckReportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_checkReportStatement

	return p
}

func (s *CheckReportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CheckReportStatementContext) Bang() antlr.TerminalNode {
	return s.GetToken(LiteParserBang, 0)
}

func (s *CheckReportStatementContext) Left_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserLeft_Arrow, 0)
}

func (s *CheckReportStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CheckReportStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *CheckReportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CheckReportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CheckReportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitCheckReportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) CheckReportStatement() (localctx ICheckReportStatementContext) {
	localctx = NewCheckReportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, LiteParserRULE_checkReportStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1275)
		p.Match(LiteParserBang)
	}
	{
		p.SetState(1276)
		p.Match(LiteParserLeft_Arrow)
	}
	{
		p.SetState(1277)
		p.expression(0)
	}
	{
		p.SetState(1278)
		p.End()
	}

	return localctx
}

// IIteratorStatementContext is an interface to support dynamic dispatch.
type IIteratorStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsIteratorStatementContext differentiates from other interfaces.
	IsIteratorStatementContext()
}

type IteratorStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyIteratorStatementContext() *IteratorStatementContext {
	var p = new(IteratorStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_iteratorStatement
	return p
}

func (*IteratorStatementContext) IsIteratorStatementContext() {}

func NewIteratorStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IteratorStatementContext {
	var p = new(IteratorStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_iteratorStatement

	return p
}

func (s *IteratorStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *IteratorStatementContext) GetOp() antlr.Token { return s.op }

func (s *IteratorStatementContext) SetOp(v antlr.Token) { s.op = v }

func (s *IteratorStatementContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *IteratorStatementContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IteratorStatementContext) Xor() antlr.TerminalNode {
	return s.GetToken(LiteParserXor, 0)
}

func (s *IteratorStatementContext) Add_Add() antlr.TerminalNode {
	return s.GetToken(LiteParserAdd_Add, 0)
}

func (s *IteratorStatementContext) Sub_Sub() antlr.TerminalNode {
	return s.GetToken(LiteParserSub_Sub, 0)
}

func (s *IteratorStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IteratorStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IteratorStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitIteratorStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) IteratorStatement() (localctx IIteratorStatementContext) {
	localctx = NewIteratorStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, LiteParserRULE_iteratorStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1290)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 145, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1280)
			p.expression(0)
		}
		{
			p.SetState(1281)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*IteratorStatementContext).op = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == LiteParserAdd_Add || _la == LiteParserSub_Sub) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*IteratorStatementContext).op = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1282)
			p.expression(0)
		}
		{
			p.SetState(1283)
			p.Match(LiteParserXor)
		}
		{
			p.SetState(1284)
			p.expression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1286)
			p.expression(0)
		}
		{
			p.SetState(1287)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*IteratorStatementContext).op = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == LiteParserAdd_Add || _la == LiteParserSub_Sub) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*IteratorStatementContext).op = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1288)
			p.expression(0)
		}

	}

	return localctx
}

// IVariableStatementContext is an interface to support dynamic dispatch.
type IVariableStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableStatementContext differentiates from other interfaces.
	IsVariableStatementContext()
}

type VariableStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableStatementContext() *VariableStatementContext {
	var p = new(VariableStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_variableStatement
	return p
}

func (*VariableStatementContext) IsVariableStatementContext() {}

func NewVariableStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableStatementContext {
	var p = new(VariableStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_variableStatement

	return p
}

func (s *VariableStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableStatementContext) IdExpression() IIdExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdExpressionContext)
}

func (s *VariableStatementContext) Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserEqual, 0)
}

func (s *VariableStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *VariableStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *VariableStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *VariableStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitVariableStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) VariableStatement() (localctx IVariableStatementContext) {
	localctx = NewVariableStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, LiteParserRULE_variableStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1292)
		p.IdExpression()
	}
	p.SetState(1294)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(LiteParserLeft_Paren-32))|(1<<(LiteParserLeft_Brack-32))|(1<<(LiteParserQuestion-32))|(1<<(LiteParserBang-32))|(1<<(LiteParserTypeI8-32))|(1<<(LiteParserTypeU8-32))|(1<<(LiteParserTypeI16-32))|(1<<(LiteParserTypeU16-32))|(1<<(LiteParserTypeI32-32))|(1<<(LiteParserTypeU32-32))|(1<<(LiteParserTypeI64-32))|(1<<(LiteParserTypeU64-32))|(1<<(LiteParserTypeF32-32))|(1<<(LiteParserTypeF64-32)))) != 0) || (((_la-64)&-(0x1f+1)) == 0 && ((1<<uint((_la-64)))&((1<<(LiteParserTypeChr-64))|(1<<(LiteParserTypeStr-64))|(1<<(LiteParserTypeBool-64))|(1<<(LiteParserTypeInt-64))|(1<<(LiteParserTypeNum-64))|(1<<(LiteParserTypeByte-64))|(1<<(LiteParserTypeAny-64))|(1<<(LiteParserIDPrivate-64))|(1<<(LiteParserIDPublic-64)))) != 0) {
		{
			p.SetState(1293)
			p.TypeType()
		}

	}
	{
		p.SetState(1296)
		p.Match(LiteParserEqual)
	}
	{
		p.SetState(1297)
		p.expression(0)
	}
	{
		p.SetState(1298)
		p.End()
	}

	return localctx
}

// IVariableDeclaredStatementContext is an interface to support dynamic dispatch.
type IVariableDeclaredStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableDeclaredStatementContext differentiates from other interfaces.
	IsVariableDeclaredStatementContext()
}

type VariableDeclaredStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableDeclaredStatementContext() *VariableDeclaredStatementContext {
	var p = new(VariableDeclaredStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_variableDeclaredStatement
	return p
}

func (*VariableDeclaredStatementContext) IsVariableDeclaredStatementContext() {}

func NewVariableDeclaredStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDeclaredStatementContext {
	var p = new(VariableDeclaredStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_variableDeclaredStatement

	return p
}

func (s *VariableDeclaredStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDeclaredStatementContext) IdExpression() IIdExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdExpressionContext)
}

func (s *VariableDeclaredStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *VariableDeclaredStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *VariableDeclaredStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDeclaredStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableDeclaredStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitVariableDeclaredStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) VariableDeclaredStatement() (localctx IVariableDeclaredStatementContext) {
	localctx = NewVariableDeclaredStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, LiteParserRULE_variableDeclaredStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1300)
		p.IdExpression()
	}
	{
		p.SetState(1301)
		p.TypeType()
	}
	{
		p.SetState(1302)
		p.End()
	}

	return localctx
}

// IChannelAssignStatementContext is an interface to support dynamic dispatch.
type IChannelAssignStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChannelAssignStatementContext differentiates from other interfaces.
	IsChannelAssignStatementContext()
}

type ChannelAssignStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChannelAssignStatementContext() *ChannelAssignStatementContext {
	var p = new(ChannelAssignStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_channelAssignStatement
	return p
}

func (*ChannelAssignStatementContext) IsChannelAssignStatementContext() {}

func NewChannelAssignStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ChannelAssignStatementContext {
	var p = new(ChannelAssignStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_channelAssignStatement

	return p
}

func (s *ChannelAssignStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ChannelAssignStatementContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ChannelAssignStatementContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ChannelAssignStatementContext) AllDot() []antlr.TerminalNode {
	return s.GetTokens(LiteParserDot)
}

func (s *ChannelAssignStatementContext) Dot(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserDot, i)
}

func (s *ChannelAssignStatementContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *ChannelAssignStatementContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *ChannelAssignStatementContext) Assign() IAssignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignContext)
}

func (s *ChannelAssignStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ChannelAssignStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ChannelAssignStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ChannelAssignStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitChannelAssignStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) ChannelAssignStatement() (localctx IChannelAssignStatementContext) {
	localctx = NewChannelAssignStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, LiteParserRULE_channelAssignStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1304)
		p.expression(0)
	}
	{
		p.SetState(1305)
		p.Match(LiteParserDot)
	}
	{
		p.SetState(1306)
		p.Left_paren()
	}
	{
		p.SetState(1307)
		p.Match(LiteParserDot)
	}
	{
		p.SetState(1308)
		p.Right_paren()
	}
	{
		p.SetState(1309)
		p.Assign()
	}
	{
		p.SetState(1310)
		p.expression(0)
	}
	{
		p.SetState(1311)
		p.End()
	}

	return localctx
}

// IAssignStatementContext is an interface to support dynamic dispatch.
type IAssignStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignStatementContext differentiates from other interfaces.
	IsAssignStatementContext()
}

type AssignStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignStatementContext() *AssignStatementContext {
	var p = new(AssignStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_assignStatement
	return p
}

func (*AssignStatementContext) IsAssignStatementContext() {}

func NewAssignStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignStatementContext {
	var p = new(AssignStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_assignStatement

	return p
}

func (s *AssignStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignStatementContext) AllTupleExpression() []ITupleExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITupleExpressionContext)(nil)).Elem())
	var tst = make([]ITupleExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITupleExpressionContext)
		}
	}

	return tst
}

func (s *AssignStatementContext) TupleExpression(i int) ITupleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITupleExpressionContext)
}

func (s *AssignStatementContext) Assign() IAssignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignContext)
}

func (s *AssignStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *AssignStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitAssignStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) AssignStatement() (localctx IAssignStatementContext) {
	localctx = NewAssignStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, LiteParserRULE_assignStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1313)
		p.TupleExpression()
	}
	{
		p.SetState(1314)
		p.Assign()
	}
	{
		p.SetState(1315)
		p.TupleExpression()
	}
	{
		p.SetState(1316)
		p.End()
	}

	return localctx
}

// IExpressionStatementContext is an interface to support dynamic dispatch.
type IExpressionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionStatementContext differentiates from other interfaces.
	IsExpressionStatementContext()
}

type ExpressionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionStatementContext() *ExpressionStatementContext {
	var p = new(ExpressionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_expressionStatement
	return p
}

func (*ExpressionStatementContext) IsExpressionStatementContext() {}

func NewExpressionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionStatementContext {
	var p = new(ExpressionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_expressionStatement

	return p
}

func (s *ExpressionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ExpressionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitExpressionStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) ExpressionStatement() (localctx IExpressionStatementContext) {
	localctx = NewExpressionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, LiteParserRULE_expressionStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1318)
		p.expression(0)
	}
	{
		p.SetState(1319)
		p.End()
	}

	return localctx
}

// IIdExpressionContext is an interface to support dynamic dispatch.
type IIdExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdExpressionContext differentiates from other interfaces.
	IsIdExpressionContext()
}

type IdExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdExpressionContext() *IdExpressionContext {
	var p = new(IdExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_idExpression
	return p
}

func (*IdExpressionContext) IsIdExpressionContext() {}

func NewIdExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdExpressionContext {
	var p = new(IdExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_idExpression

	return p
}

func (s *IdExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *IdExpressionContext) AllIdExprItem() []IIdExprItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdExprItemContext)(nil)).Elem())
	var tst = make([]IIdExprItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdExprItemContext)
		}
	}

	return tst
}

func (s *IdExpressionContext) IdExprItem(i int) IIdExprItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdExprItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdExprItemContext)
}

func (s *IdExpressionContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *IdExpressionContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *IdExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitIdExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) IdExpression() (localctx IIdExpressionContext) {
	localctx = NewIdExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, LiteParserRULE_idExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1321)
		p.IdExprItem()
	}
	p.SetState(1327)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserComma {
		{
			p.SetState(1322)
			p.More()
		}
		{
			p.SetState(1323)
			p.IdExprItem()
		}

		p.SetState(1329)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IIdExprItemContext is an interface to support dynamic dispatch.
type IIdExprItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdExprItemContext differentiates from other interfaces.
	IsIdExprItemContext()
}

type IdExprItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdExprItemContext() *IdExprItemContext {
	var p = new(IdExprItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_idExprItem
	return p
}

func (*IdExprItemContext) IsIdExprItemContext() {}

func NewIdExprItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdExprItemContext {
	var p = new(IdExprItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_idExprItem

	return p
}

func (s *IdExprItemContext) GetParser() antlr.Parser { return s.parser }

func (s *IdExprItemContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *IdExprItemContext) Discard() antlr.TerminalNode {
	return s.GetToken(LiteParserDiscard, 0)
}

func (s *IdExprItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdExprItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdExprItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitIdExprItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) IdExprItem() (localctx IIdExprItemContext) {
	localctx = NewIdExprItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, LiteParserRULE_idExprItem)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1332)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case LiteParserTypeI8, LiteParserTypeU8, LiteParserTypeI16, LiteParserTypeU16, LiteParserTypeI32, LiteParserTypeU32, LiteParserTypeI64, LiteParserTypeU64, LiteParserTypeF32, LiteParserTypeF64, LiteParserTypeChr, LiteParserTypeStr, LiteParserTypeBool, LiteParserTypeInt, LiteParserTypeNum, LiteParserTypeByte, LiteParserTypeAny, LiteParserIDPrivate, LiteParserIDPublic:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1330)
			p.Id()
		}

	case LiteParserDiscard:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1331)
			p.Match(LiteParserDiscard)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITupleExpressionContext is an interface to support dynamic dispatch.
type ITupleExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTupleExpressionContext differentiates from other interfaces.
	IsTupleExpressionContext()
}

type TupleExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTupleExpressionContext() *TupleExpressionContext {
	var p = new(TupleExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_tupleExpression
	return p
}

func (*TupleExpressionContext) IsTupleExpressionContext() {}

func NewTupleExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TupleExpressionContext {
	var p = new(TupleExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_tupleExpression

	return p
}

func (s *TupleExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *TupleExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *TupleExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TupleExpressionContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *TupleExpressionContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *TupleExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TupleExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTupleExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TupleExpression() (localctx ITupleExpressionContext) {
	localctx = NewTupleExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, LiteParserRULE_tupleExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1334)
		p.expression(0)
	}
	p.SetState(1340)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserComma {
		{
			p.SetState(1335)
			p.More()
		}
		{
			p.SetState(1336)
			p.expression(0)
		}

		p.SetState(1342)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IPrimaryExpressionContext is an interface to support dynamic dispatch.
type IPrimaryExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// IsPrimaryExpressionContext differentiates from other interfaces.
	IsPrimaryExpressionContext()
}

type PrimaryExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
}

func NewEmptyPrimaryExpressionContext() *PrimaryExpressionContext {
	var p = new(PrimaryExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_primaryExpression
	return p
}

func (*PrimaryExpressionContext) IsPrimaryExpressionContext() {}

func NewPrimaryExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimaryExpressionContext {
	var p = new(PrimaryExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_primaryExpression

	return p
}

func (s *PrimaryExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimaryExpressionContext) GetT() antlr.Token { return s.t }

func (s *PrimaryExpressionContext) SetT(v antlr.Token) { s.t = v }

func (s *PrimaryExpressionContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *PrimaryExpressionContext) TemplateCall() ITemplateCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateCallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateCallContext)
}

func (s *PrimaryExpressionContext) Discard() antlr.TerminalNode {
	return s.GetToken(LiteParserDiscard, 0)
}

func (s *PrimaryExpressionContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *PrimaryExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PrimaryExpressionContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *PrimaryExpressionContext) DataStatement() IDataStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDataStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDataStatementContext)
}

func (s *PrimaryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimaryExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitPrimaryExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) PrimaryExpression() (localctx IPrimaryExpressionContext) {
	localctx = NewPrimaryExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, LiteParserRULE_primaryExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1353)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case LiteParserTypeI8, LiteParserTypeU8, LiteParserTypeI16, LiteParserTypeU16, LiteParserTypeI32, LiteParserTypeU32, LiteParserTypeI64, LiteParserTypeU64, LiteParserTypeF32, LiteParserTypeF64, LiteParserTypeChr, LiteParserTypeStr, LiteParserTypeBool, LiteParserTypeInt, LiteParserTypeNum, LiteParserTypeByte, LiteParserTypeAny, LiteParserIDPrivate, LiteParserIDPublic:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1343)
			p.Id()
		}
		p.SetState(1345)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 150, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1344)
				p.TemplateCall()
			}

		}

	case LiteParserDiscard:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1347)

			var _m = p.Match(LiteParserDiscard)

			localctx.(*PrimaryExpressionContext).t = _m
		}

	case LiteParserLeft_Paren:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1348)
			p.Left_paren()
		}
		{
			p.SetState(1349)
			p.expression(0)
		}
		{
			p.SetState(1350)
			p.Right_paren()
		}

	case LiteParserNilLiteral, LiteParserTrueLiteral, LiteParserFalseLiteral, LiteParserUndefinedLiteral, LiteParserNumberLiteral, LiteParserTextLiteral, LiteParserCharLiteral:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1352)
			p.DataStatement()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_expression
	return p
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) GetOp() antlr.Token { return s.op }

func (s *ExpressionContext) SetOp(v antlr.Token) { s.op = v }

func (s *ExpressionContext) Linq() ILinqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILinqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILinqContext)
}

func (s *ExpressionContext) PrimaryExpression() IPrimaryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryExpressionContext)
}

func (s *ExpressionContext) CallNew() ICallNewContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallNewContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallNewContext)
}

func (s *ExpressionContext) CallPkg() ICallPkgContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallPkgContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallPkgContext)
}

func (s *ExpressionContext) CallAwait() ICallAwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallAwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallAwaitContext)
}

func (s *ExpressionContext) CallAsync() ICallAsyncContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallAsyncContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallAsyncContext)
}

func (s *ExpressionContext) List() IListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IListContext)
}

func (s *ExpressionContext) Set() ISetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetContext)
}

func (s *ExpressionContext) Dictionary() IDictionaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDictionaryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDictionaryContext)
}

func (s *ExpressionContext) Lambda() ILambdaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILambdaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILambdaContext)
}

func (s *ExpressionContext) FunctionExpression() IFunctionExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionExpressionContext)
}

func (s *ExpressionContext) PkgAnonymous() IPkgAnonymousContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPkgAnonymousContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPkgAnonymousContext)
}

func (s *ExpressionContext) PlusMinus() IPlusMinusContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPlusMinusContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPlusMinusContext)
}

func (s *ExpressionContext) BitwiseNotExpression() IBitwiseNotExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseNotExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseNotExpressionContext)
}

func (s *ExpressionContext) Negate() INegateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INegateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INegateContext)
}

func (s *ExpressionContext) JudgeExpression() IJudgeExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJudgeExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJudgeExpressionContext)
}

func (s *ExpressionContext) LoopExpression() ILoopExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopExpressionContext)
}

func (s *ExpressionContext) LoopEachExpression() ILoopEachExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopEachExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopEachExpressionContext)
}

func (s *ExpressionContext) CheckExpression() ICheckExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICheckExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICheckExpressionContext)
}

func (s *ExpressionContext) StringExpression() IStringExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringExpressionContext)
}

func (s *ExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionContext) Bitwise() IBitwiseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseContext)
}

func (s *ExpressionContext) JudgeCombine() IJudgeCombineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJudgeCombineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJudgeCombineContext)
}

func (s *ExpressionContext) Judge() IJudgeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJudgeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJudgeContext)
}

func (s *ExpressionContext) Add() IAddContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAddContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAddContext)
}

func (s *ExpressionContext) Mul() IMulContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMulContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMulContext)
}

func (s *ExpressionContext) Pow() IPowContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPowContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPowContext)
}

func (s *ExpressionContext) JudgeCaseExpression() IJudgeCaseExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJudgeCaseExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJudgeCaseExpressionContext)
}

func (s *ExpressionContext) Bang() antlr.TerminalNode {
	return s.GetToken(LiteParserBang, 0)
}

func (s *ExpressionContext) Question() antlr.TerminalNode {
	return s.GetToken(LiteParserQuestion, 0)
}

func (s *ExpressionContext) OrElse() IOrElseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrElseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrElseContext)
}

func (s *ExpressionContext) TypeConversion() ITypeConversionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeConversionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeConversionContext)
}

func (s *ExpressionContext) CallFunc() ICallFuncContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallFuncContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallFuncContext)
}

func (s *ExpressionContext) CallChannel() ICallChannelContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallChannelContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallChannelContext)
}

func (s *ExpressionContext) CallElement() ICallElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallElementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallElementContext)
}

func (s *ExpressionContext) CallExpression() ICallExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallExpressionContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Expression() (localctx IExpressionContext) {
	return p.expression(0)
}

func (p *LiteParser) expression(_p int) (localctx IExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 138
	p.EnterRecursionRule(localctx, 138, LiteParserRULE_expression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1376)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 152, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1356)
			p.Linq()
		}

	case 2:
		{
			p.SetState(1357)
			p.PrimaryExpression()
		}

	case 3:
		{
			p.SetState(1358)
			p.CallNew()
		}

	case 4:
		{
			p.SetState(1359)
			p.CallPkg()
		}

	case 5:
		{
			p.SetState(1360)
			p.CallAwait()
		}

	case 6:
		{
			p.SetState(1361)
			p.CallAsync()
		}

	case 7:
		{
			p.SetState(1362)
			p.List()
		}

	case 8:
		{
			p.SetState(1363)
			p.Set()
		}

	case 9:
		{
			p.SetState(1364)
			p.Dictionary()
		}

	case 10:
		{
			p.SetState(1365)
			p.Lambda()
		}

	case 11:
		{
			p.SetState(1366)
			p.FunctionExpression()
		}

	case 12:
		{
			p.SetState(1367)
			p.PkgAnonymous()
		}

	case 13:
		{
			p.SetState(1368)
			p.PlusMinus()
		}

	case 14:
		{
			p.SetState(1369)
			p.BitwiseNotExpression()
		}

	case 15:
		{
			p.SetState(1370)
			p.Negate()
		}

	case 16:
		{
			p.SetState(1371)
			p.JudgeExpression()
		}

	case 17:
		{
			p.SetState(1372)
			p.LoopExpression()
		}

	case 18:
		{
			p.SetState(1373)
			p.LoopEachExpression()
		}

	case 19:
		{
			p.SetState(1374)
			p.CheckExpression()
		}

	case 20:
		{
			p.SetState(1375)
			p.StringExpression()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1422)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 154, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1420)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 153, p.GetParserRuleContext()) {
			case 1:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, LiteParserRULE_expression)
				p.SetState(1378)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
				}
				{
					p.SetState(1379)
					p.Bitwise()
				}
				{
					p.SetState(1380)
					p.expression(8)
				}

			case 2:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, LiteParserRULE_expression)
				p.SetState(1382)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(1383)
					p.JudgeCombine()
				}
				{
					p.SetState(1384)
					p.expression(7)
				}

			case 3:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, LiteParserRULE_expression)
				p.SetState(1386)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(1387)
					p.Judge()
				}
				{
					p.SetState(1388)
					p.expression(6)
				}

			case 4:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, LiteParserRULE_expression)
				p.SetState(1390)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(1391)
					p.Add()
				}
				{
					p.SetState(1392)
					p.expression(5)
				}

			case 5:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, LiteParserRULE_expression)
				p.SetState(1394)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(1395)
					p.Mul()
				}
				{
					p.SetState(1396)
					p.expression(4)
				}

			case 6:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, LiteParserRULE_expression)
				p.SetState(1398)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(1399)
					p.Pow()
				}
				{
					p.SetState(1400)
					p.expression(3)
				}

			case 7:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, LiteParserRULE_expression)
				p.SetState(1402)

				if !(p.Precpred(p.GetParserRuleContext(), 16)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 16)", ""))
				}
				{
					p.SetState(1403)
					p.JudgeCaseExpression()
				}

			case 8:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, LiteParserRULE_expression)
				p.SetState(1404)

				if !(p.Precpred(p.GetParserRuleContext(), 15)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 15)", ""))
				}
				{
					p.SetState(1405)

					var _m = p.Match(LiteParserBang)

					localctx.(*ExpressionContext).op = _m
				}

			case 9:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, LiteParserRULE_expression)
				p.SetState(1406)

				if !(p.Precpred(p.GetParserRuleContext(), 14)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 14)", ""))
				}
				{
					p.SetState(1407)

					var _m = p.Match(LiteParserQuestion)

					localctx.(*ExpressionContext).op = _m
				}

			case 10:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, LiteParserRULE_expression)
				p.SetState(1408)

				if !(p.Precpred(p.GetParserRuleContext(), 13)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 13)", ""))
				}
				{
					p.SetState(1409)
					p.OrElse()
				}

			case 11:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, LiteParserRULE_expression)
				p.SetState(1410)

				if !(p.Precpred(p.GetParserRuleContext(), 12)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 12)", ""))
				}
				{
					p.SetState(1411)
					p.TypeConversion()
				}

			case 12:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, LiteParserRULE_expression)
				p.SetState(1412)

				if !(p.Precpred(p.GetParserRuleContext(), 11)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 11)", ""))
				}
				{
					p.SetState(1413)
					p.CallFunc()
				}

			case 13:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, LiteParserRULE_expression)
				p.SetState(1414)

				if !(p.Precpred(p.GetParserRuleContext(), 10)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 10)", ""))
				}
				{
					p.SetState(1415)
					p.CallChannel()
				}

			case 14:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, LiteParserRULE_expression)
				p.SetState(1416)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
				}
				{
					p.SetState(1417)
					p.CallElement()
				}

			case 15:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, LiteParserRULE_expression)
				p.SetState(1418)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
				}
				{
					p.SetState(1419)
					p.CallExpression()
				}

			}

		}
		p.SetState(1424)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 154, p.GetParserRuleContext())
	}

	return localctx
}

// ICallExpressionContext is an interface to support dynamic dispatch.
type ICallExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallExpressionContext differentiates from other interfaces.
	IsCallExpressionContext()
}

type CallExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallExpressionContext() *CallExpressionContext {
	var p = new(CallExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_callExpression
	return p
}

func (*CallExpressionContext) IsCallExpressionContext() {}

func NewCallExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallExpressionContext {
	var p = new(CallExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_callExpression

	return p
}

func (s *CallExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *CallExpressionContext) Call() ICallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallContext)
}

func (s *CallExpressionContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *CallExpressionContext) New_Line() antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, 0)
}

func (s *CallExpressionContext) TemplateCall() ITemplateCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateCallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateCallContext)
}

func (s *CallExpressionContext) CallFunc() ICallFuncContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallFuncContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallFuncContext)
}

func (s *CallExpressionContext) CallChannel() ICallChannelContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallChannelContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallChannelContext)
}

func (s *CallExpressionContext) CallElement() ICallElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallElementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallElementContext)
}

func (s *CallExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitCallExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) CallExpression() (localctx ICallExpressionContext) {
	localctx = NewCallExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, LiteParserRULE_callExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1425)
		p.Call()
	}
	p.SetState(1427)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserNew_Line {
		{
			p.SetState(1426)
			p.Match(LiteParserNew_Line)
		}

	}
	{
		p.SetState(1429)
		p.Id()
	}
	p.SetState(1431)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 156, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1430)
			p.TemplateCall()
		}

	}
	p.SetState(1436)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 157, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1433)
			p.CallFunc()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 157, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(1434)
			p.CallChannel()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 157, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(1435)
			p.CallElement()
		}

	}

	return localctx
}

// ITupleContext is an interface to support dynamic dispatch.
type ITupleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTupleContext differentiates from other interfaces.
	IsTupleContext()
}

type TupleContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTupleContext() *TupleContext {
	var p = new(TupleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_tuple
	return p
}

func (*TupleContext) IsTupleContext() {}

func NewTupleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TupleContext {
	var p = new(TupleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_tuple

	return p
}

func (s *TupleContext) GetParser() antlr.Parser { return s.parser }

func (s *TupleContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *TupleContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *TupleContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *TupleContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TupleContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *TupleContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *TupleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TupleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTuple(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Tuple() (localctx ITupleContext) {
	localctx = NewTupleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, LiteParserRULE_tuple)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1438)
		p.Left_paren()
	}
	p.SetState(1448)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-27)&-(0x1f+1)) == 0 && ((1<<uint((_la-27)))&((1<<(LiteParserLess_Less-27))|(1<<(LiteParserGreater_Greater-27))|(1<<(LiteParserLeft_Paren-27))|(1<<(LiteParserLeft_Brace-27))|(1<<(LiteParserLeft_Brack-27))|(1<<(LiteParserQuestion-27))|(1<<(LiteParserBang-27))|(1<<(LiteParserWave-27))|(1<<(LiteParserAdd-27))|(1<<(LiteParserSub-27))|(1<<(LiteParserGrave-27))|(1<<(LiteParserTypeI8-27))|(1<<(LiteParserTypeU8-27))|(1<<(LiteParserTypeI16-27))|(1<<(LiteParserTypeU16-27))|(1<<(LiteParserTypeI32-27)))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(LiteParserTypeU32-59))|(1<<(LiteParserTypeI64-59))|(1<<(LiteParserTypeU64-59))|(1<<(LiteParserTypeF32-59))|(1<<(LiteParserTypeF64-59))|(1<<(LiteParserTypeChr-59))|(1<<(LiteParserTypeStr-59))|(1<<(LiteParserTypeBool-59))|(1<<(LiteParserTypeInt-59))|(1<<(LiteParserTypeNum-59))|(1<<(LiteParserTypeByte-59))|(1<<(LiteParserTypeAny-59))|(1<<(LiteParserNilLiteral-59))|(1<<(LiteParserTrueLiteral-59))|(1<<(LiteParserFalseLiteral-59))|(1<<(LiteParserUndefinedLiteral-59))|(1<<(LiteParserNumberLiteral-59))|(1<<(LiteParserTextLiteral-59))|(1<<(LiteParserCharLiteral-59))|(1<<(LiteParserIDPrivate-59))|(1<<(LiteParserIDPublic-59))|(1<<(LiteParserDiscard-59)))) != 0) {
		{
			p.SetState(1439)
			p.expression(0)
		}
		p.SetState(1445)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == LiteParserComma {
			{
				p.SetState(1440)
				p.More()
			}
			{
				p.SetState(1441)
				p.expression(0)
			}

			p.SetState(1447)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(1450)
		p.Right_paren()
	}

	return localctx
}

// IExpressionListContext is an interface to support dynamic dispatch.
type IExpressionListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionListContext differentiates from other interfaces.
	IsExpressionListContext()
}

type ExpressionListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionListContext() *ExpressionListContext {
	var p = new(ExpressionListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_expressionList
	return p
}

func (*ExpressionListContext) IsExpressionListContext() {}

func NewExpressionListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionListContext {
	var p = new(ExpressionListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_expressionList

	return p
}

func (s *ExpressionListContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionListContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionListContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionListContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *ExpressionListContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *ExpressionListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitExpressionList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) ExpressionList() (localctx IExpressionListContext) {
	localctx = NewExpressionListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, LiteParserRULE_expressionList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1452)
		p.expression(0)
	}
	p.SetState(1458)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserComma {
		{
			p.SetState(1453)
			p.More()
		}
		{
			p.SetState(1454)
			p.expression(0)
		}

		p.SetState(1460)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAnnotationSupportContext is an interface to support dynamic dispatch.
type IAnnotationSupportContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnnotationSupportContext differentiates from other interfaces.
	IsAnnotationSupportContext()
}

type AnnotationSupportContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnnotationSupportContext() *AnnotationSupportContext {
	var p = new(AnnotationSupportContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_annotationSupport
	return p
}

func (*AnnotationSupportContext) IsAnnotationSupportContext() {}

func NewAnnotationSupportContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnnotationSupportContext {
	var p = new(AnnotationSupportContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_annotationSupport

	return p
}

func (s *AnnotationSupportContext) GetParser() antlr.Parser { return s.parser }

func (s *AnnotationSupportContext) Annotation() IAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *AnnotationSupportContext) New_Line() antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, 0)
}

func (s *AnnotationSupportContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnnotationSupportContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnnotationSupportContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitAnnotationSupport(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) AnnotationSupport() (localctx IAnnotationSupportContext) {
	localctx = NewAnnotationSupportContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, LiteParserRULE_annotationSupport)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1461)
		p.Annotation()
	}
	p.SetState(1463)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserNew_Line {
		{
			p.SetState(1462)
			p.Match(LiteParserNew_Line)
		}

	}

	return localctx
}

// IAnnotationContext is an interface to support dynamic dispatch.
type IAnnotationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnnotationContext differentiates from other interfaces.
	IsAnnotationContext()
}

type AnnotationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnnotationContext() *AnnotationContext {
	var p = new(AnnotationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_annotation
	return p
}

func (*AnnotationContext) IsAnnotationContext() {}

func NewAnnotationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnnotationContext {
	var p = new(AnnotationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_annotation

	return p
}

func (s *AnnotationContext) GetParser() antlr.Parser { return s.parser }

func (s *AnnotationContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *AnnotationContext) AnnotationList() IAnnotationListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationListContext)
}

func (s *AnnotationContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *AnnotationContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *AnnotationContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *AnnotationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnnotationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnnotationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitAnnotation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Annotation() (localctx IAnnotationContext) {
	localctx = NewAnnotationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, LiteParserRULE_annotation)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1465)
		p.Left_paren()
	}
	p.SetState(1469)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 162, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1466)
			p.Id()
		}
		{
			p.SetState(1467)
			p.Match(LiteParserRight_Arrow)
		}

	}
	{
		p.SetState(1471)
		p.AnnotationList()
	}
	{
		p.SetState(1472)
		p.Right_paren()
	}

	return localctx
}

// IAnnotationListContext is an interface to support dynamic dispatch.
type IAnnotationListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnnotationListContext differentiates from other interfaces.
	IsAnnotationListContext()
}

type AnnotationListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnnotationListContext() *AnnotationListContext {
	var p = new(AnnotationListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_annotationList
	return p
}

func (*AnnotationListContext) IsAnnotationListContext() {}

func NewAnnotationListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnnotationListContext {
	var p = new(AnnotationListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_annotationList

	return p
}

func (s *AnnotationListContext) GetParser() antlr.Parser { return s.parser }

func (s *AnnotationListContext) AllAnnotationItem() []IAnnotationItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAnnotationItemContext)(nil)).Elem())
	var tst = make([]IAnnotationItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAnnotationItemContext)
		}
	}

	return tst
}

func (s *AnnotationListContext) AnnotationItem(i int) IAnnotationItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAnnotationItemContext)
}

func (s *AnnotationListContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *AnnotationListContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *AnnotationListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnnotationListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnnotationListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitAnnotationList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) AnnotationList() (localctx IAnnotationListContext) {
	localctx = NewAnnotationListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, LiteParserRULE_annotationList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1474)
		p.AnnotationItem()
	}
	p.SetState(1480)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserComma {
		{
			p.SetState(1475)
			p.More()
		}
		{
			p.SetState(1476)
			p.AnnotationItem()
		}

		p.SetState(1482)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAnnotationItemContext is an interface to support dynamic dispatch.
type IAnnotationItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnnotationItemContext differentiates from other interfaces.
	IsAnnotationItemContext()
}

type AnnotationItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnnotationItemContext() *AnnotationItemContext {
	var p = new(AnnotationItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_annotationItem
	return p
}

func (*AnnotationItemContext) IsAnnotationItemContext() {}

func NewAnnotationItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnnotationItemContext {
	var p = new(AnnotationItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_annotationItem

	return p
}

func (s *AnnotationItemContext) GetParser() antlr.Parser { return s.parser }

func (s *AnnotationItemContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *AnnotationItemContext) Tuple() ITupleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleContext)
}

func (s *AnnotationItemContext) Lambda() ILambdaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILambdaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILambdaContext)
}

func (s *AnnotationItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnnotationItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnnotationItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitAnnotationItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) AnnotationItem() (localctx IAnnotationItemContext) {
	localctx = NewAnnotationItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, LiteParserRULE_annotationItem)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1483)
		p.Id()
	}
	p.SetState(1486)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case LiteParserLeft_Paren:
		{
			p.SetState(1484)
			p.Tuple()
		}

	case LiteParserLeft_Brace:
		{
			p.SetState(1485)
			p.Lambda()
		}

	case LiteParserComma, LiteParserRight_Paren:

	default:
	}

	return localctx
}

// ICallFuncContext is an interface to support dynamic dispatch.
type ICallFuncContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallFuncContext differentiates from other interfaces.
	IsCallFuncContext()
}

type CallFuncContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallFuncContext() *CallFuncContext {
	var p = new(CallFuncContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_callFunc
	return p
}

func (*CallFuncContext) IsCallFuncContext() {}

func NewCallFuncContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallFuncContext {
	var p = new(CallFuncContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_callFunc

	return p
}

func (s *CallFuncContext) GetParser() antlr.Parser { return s.parser }

func (s *CallFuncContext) Tuple() ITupleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleContext)
}

func (s *CallFuncContext) Lambda() ILambdaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILambdaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILambdaContext)
}

func (s *CallFuncContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallFuncContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallFuncContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitCallFunc(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) CallFunc() (localctx ICallFuncContext) {
	localctx = NewCallFuncContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, LiteParserRULE_callFunc)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1490)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case LiteParserLeft_Paren:
		{
			p.SetState(1488)
			p.Tuple()
		}

	case LiteParserLeft_Brace:
		{
			p.SetState(1489)
			p.Lambda()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICallChannelContext is an interface to support dynamic dispatch.
type ICallChannelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallChannelContext differentiates from other interfaces.
	IsCallChannelContext()
}

type CallChannelContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallChannelContext() *CallChannelContext {
	var p = new(CallChannelContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_callChannel
	return p
}

func (*CallChannelContext) IsCallChannelContext() {}

func NewCallChannelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallChannelContext {
	var p = new(CallChannelContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_callChannel

	return p
}

func (s *CallChannelContext) GetParser() antlr.Parser { return s.parser }

func (s *CallChannelContext) AllDot() []antlr.TerminalNode {
	return s.GetTokens(LiteParserDot)
}

func (s *CallChannelContext) Dot(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserDot, i)
}

func (s *CallChannelContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *CallChannelContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *CallChannelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallChannelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallChannelContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitCallChannel(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) CallChannel() (localctx ICallChannelContext) {
	localctx = NewCallChannelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, LiteParserRULE_callChannel)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1492)
		p.Match(LiteParserDot)
	}
	{
		p.SetState(1493)
		p.Left_paren()
	}
	{
		p.SetState(1494)
		p.Match(LiteParserDot)
	}
	{
		p.SetState(1495)
		p.Right_paren()
	}

	return localctx
}

// ICallElementContext is an interface to support dynamic dispatch.
type ICallElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallElementContext differentiates from other interfaces.
	IsCallElementContext()
}

type CallElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallElementContext() *CallElementContext {
	var p = new(CallElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_callElement
	return p
}

func (*CallElementContext) IsCallElementContext() {}

func NewCallElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallElementContext {
	var p = new(CallElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_callElement

	return p
}

func (s *CallElementContext) GetParser() antlr.Parser { return s.parser }

func (s *CallElementContext) Dot() antlr.TerminalNode {
	return s.GetToken(LiteParserDot, 0)
}

func (s *CallElementContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *CallElementContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *CallElementContext) Slice() ISliceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISliceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISliceContext)
}

func (s *CallElementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CallElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitCallElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) CallElement() (localctx ICallElementContext) {
	localctx = NewCallElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, LiteParserRULE_callElement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1497)
		p.Match(LiteParserDot)
	}
	{
		p.SetState(1498)
		p.Left_paren()
	}
	p.SetState(1501)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 166, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1499)
			p.Slice()
		}

	case 2:
		{
			p.SetState(1500)
			p.expression(0)
		}

	}
	{
		p.SetState(1503)
		p.Right_paren()
	}

	return localctx
}

// ICallPkgContext is an interface to support dynamic dispatch.
type ICallPkgContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallPkgContext differentiates from other interfaces.
	IsCallPkgContext()
}

type CallPkgContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallPkgContext() *CallPkgContext {
	var p = new(CallPkgContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_callPkg
	return p
}

func (*CallPkgContext) IsCallPkgContext() {}

func NewCallPkgContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallPkgContext {
	var p = new(CallPkgContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_callPkg

	return p
}

func (s *CallPkgContext) GetParser() antlr.Parser { return s.parser }

func (s *CallPkgContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *CallPkgContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *CallPkgContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *CallPkgContext) PkgAssign() IPkgAssignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPkgAssignContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPkgAssignContext)
}

func (s *CallPkgContext) ListAssign() IListAssignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IListAssignContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IListAssignContext)
}

func (s *CallPkgContext) SetAssign() ISetAssignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetAssignContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetAssignContext)
}

func (s *CallPkgContext) DictionaryAssign() IDictionaryAssignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDictionaryAssignContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDictionaryAssignContext)
}

func (s *CallPkgContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallPkgContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallPkgContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitCallPkg(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) CallPkg() (localctx ICallPkgContext) {
	localctx = NewCallPkgContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, LiteParserRULE_callPkg)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1505)
		p.TypeType()
	}
	{
		p.SetState(1506)
		p.Left_brace()
	}
	p.SetState(1511)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 167, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1507)
			p.PkgAssign()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 167, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(1508)
			p.ListAssign()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 167, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(1509)
			p.SetAssign()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 167, p.GetParserRuleContext()) == 4 {
		{
			p.SetState(1510)
			p.DictionaryAssign()
		}

	}
	{
		p.SetState(1513)
		p.Right_brace()
	}

	return localctx
}

// ICallNewContext is an interface to support dynamic dispatch.
type ICallNewContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallNewContext differentiates from other interfaces.
	IsCallNewContext()
}

type CallNewContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallNewContext() *CallNewContext {
	var p = new(CallNewContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_callNew
	return p
}

func (*CallNewContext) IsCallNewContext() {}

func NewCallNewContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallNewContext {
	var p = new(CallNewContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_callNew

	return p
}

func (s *CallNewContext) GetParser() antlr.Parser { return s.parser }

func (s *CallNewContext) Left_brack() ILeft_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_brackContext)
}

func (s *CallNewContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *CallNewContext) Right_brack() IRight_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_brackContext)
}

func (s *CallNewContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *CallNewContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *CallNewContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *CallNewContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *CallNewContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *CallNewContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallNewContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallNewContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitCallNew(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) CallNew() (localctx ICallNewContext) {
	localctx = NewCallNewContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, LiteParserRULE_callNew)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1515)
		p.Left_brack()
	}
	{
		p.SetState(1516)
		p.TypeType()
	}
	{
		p.SetState(1517)
		p.Right_brack()
	}
	{
		p.SetState(1518)
		p.Left_paren()
	}
	p.SetState(1520)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 168, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1519)
			p.Match(LiteParserNew_Line)
		}

	}
	p.SetState(1523)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-27)&-(0x1f+1)) == 0 && ((1<<uint((_la-27)))&((1<<(LiteParserLess_Less-27))|(1<<(LiteParserGreater_Greater-27))|(1<<(LiteParserLeft_Paren-27))|(1<<(LiteParserLeft_Brace-27))|(1<<(LiteParserLeft_Brack-27))|(1<<(LiteParserQuestion-27))|(1<<(LiteParserBang-27))|(1<<(LiteParserWave-27))|(1<<(LiteParserAdd-27))|(1<<(LiteParserSub-27))|(1<<(LiteParserGrave-27))|(1<<(LiteParserTypeI8-27))|(1<<(LiteParserTypeU8-27))|(1<<(LiteParserTypeI16-27))|(1<<(LiteParserTypeU16-27))|(1<<(LiteParserTypeI32-27)))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(LiteParserTypeU32-59))|(1<<(LiteParserTypeI64-59))|(1<<(LiteParserTypeU64-59))|(1<<(LiteParserTypeF32-59))|(1<<(LiteParserTypeF64-59))|(1<<(LiteParserTypeChr-59))|(1<<(LiteParserTypeStr-59))|(1<<(LiteParserTypeBool-59))|(1<<(LiteParserTypeInt-59))|(1<<(LiteParserTypeNum-59))|(1<<(LiteParserTypeByte-59))|(1<<(LiteParserTypeAny-59))|(1<<(LiteParserNilLiteral-59))|(1<<(LiteParserTrueLiteral-59))|(1<<(LiteParserFalseLiteral-59))|(1<<(LiteParserUndefinedLiteral-59))|(1<<(LiteParserNumberLiteral-59))|(1<<(LiteParserTextLiteral-59))|(1<<(LiteParserCharLiteral-59))|(1<<(LiteParserIDPrivate-59))|(1<<(LiteParserIDPublic-59))|(1<<(LiteParserDiscard-59)))) != 0) {
		{
			p.SetState(1522)
			p.ExpressionList()
		}

	}
	p.SetState(1526)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserNew_Line {
		{
			p.SetState(1525)
			p.Match(LiteParserNew_Line)
		}

	}
	{
		p.SetState(1528)
		p.Right_paren()
	}

	return localctx
}

// IOrElseContext is an interface to support dynamic dispatch.
type IOrElseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOrElseContext differentiates from other interfaces.
	IsOrElseContext()
}

type OrElseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrElseContext() *OrElseContext {
	var p = new(OrElseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_orElse
	return p
}

func (*OrElseContext) IsOrElseContext() {}

func NewOrElseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OrElseContext {
	var p = new(OrElseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_orElse

	return p
}

func (s *OrElseContext) GetParser() antlr.Parser { return s.parser }

func (s *OrElseContext) Question() antlr.TerminalNode {
	return s.GetToken(LiteParserQuestion, 0)
}

func (s *OrElseContext) Bang() antlr.TerminalNode {
	return s.GetToken(LiteParserBang, 0)
}

func (s *OrElseContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *OrElseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OrElseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OrElseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitOrElse(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) OrElse() (localctx IOrElseContext) {
	localctx = NewOrElseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, LiteParserRULE_orElse)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1530)
		p.Match(LiteParserQuestion)
	}
	{
		p.SetState(1531)
		p.Match(LiteParserBang)
	}
	{
		p.SetState(1532)
		p.expression(0)
	}

	return localctx
}

// ITypeConversionContext is an interface to support dynamic dispatch.
type ITypeConversionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeConversionContext differentiates from other interfaces.
	IsTypeConversionContext()
}

type TypeConversionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeConversionContext() *TypeConversionContext {
	var p = new(TypeConversionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_typeConversion
	return p
}

func (*TypeConversionContext) IsTypeConversionContext() {}

func NewTypeConversionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeConversionContext {
	var p = new(TypeConversionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_typeConversion

	return p
}

func (s *TypeConversionContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeConversionContext) Dot() antlr.TerminalNode {
	return s.GetToken(LiteParserDot, 0)
}

func (s *TypeConversionContext) Left_brack() ILeft_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_brackContext)
}

func (s *TypeConversionContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeConversionContext) Right_brack() IRight_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_brackContext)
}

func (s *TypeConversionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeConversionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeConversionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTypeConversion(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TypeConversion() (localctx ITypeConversionContext) {
	localctx = NewTypeConversionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, LiteParserRULE_typeConversion)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1534)
		p.Match(LiteParserDot)
	}
	{
		p.SetState(1535)
		p.Left_brack()
	}
	{
		p.SetState(1536)
		p.TypeType()
	}
	{
		p.SetState(1537)
		p.Right_brack()
	}

	return localctx
}

// IPkgAssignContext is an interface to support dynamic dispatch.
type IPkgAssignContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPkgAssignContext differentiates from other interfaces.
	IsPkgAssignContext()
}

type PkgAssignContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPkgAssignContext() *PkgAssignContext {
	var p = new(PkgAssignContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_pkgAssign
	return p
}

func (*PkgAssignContext) IsPkgAssignContext() {}

func NewPkgAssignContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PkgAssignContext {
	var p = new(PkgAssignContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_pkgAssign

	return p
}

func (s *PkgAssignContext) GetParser() antlr.Parser { return s.parser }

func (s *PkgAssignContext) AllPkgAssignElement() []IPkgAssignElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPkgAssignElementContext)(nil)).Elem())
	var tst = make([]IPkgAssignElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPkgAssignElementContext)
		}
	}

	return tst
}

func (s *PkgAssignContext) PkgAssignElement(i int) IPkgAssignElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPkgAssignElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPkgAssignElementContext)
}

func (s *PkgAssignContext) AllEnd() []IEndContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEndContext)(nil)).Elem())
	var tst = make([]IEndContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEndContext)
		}
	}

	return tst
}

func (s *PkgAssignContext) End(i int) IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *PkgAssignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PkgAssignContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PkgAssignContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitPkgAssign(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) PkgAssign() (localctx IPkgAssignContext) {
	localctx = NewPkgAssignContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, LiteParserRULE_pkgAssign)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1544)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 171, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1539)
				p.PkgAssignElement()
			}
			{
				p.SetState(1540)
				p.End()
			}

		}
		p.SetState(1546)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 171, p.GetParserRuleContext())
	}
	{
		p.SetState(1547)
		p.PkgAssignElement()
	}

	return localctx
}

// IPkgAssignElementContext is an interface to support dynamic dispatch.
type IPkgAssignElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPkgAssignElementContext differentiates from other interfaces.
	IsPkgAssignElementContext()
}

type PkgAssignElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPkgAssignElementContext() *PkgAssignElementContext {
	var p = new(PkgAssignElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_pkgAssignElement
	return p
}

func (*PkgAssignElementContext) IsPkgAssignElementContext() {}

func NewPkgAssignElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PkgAssignElementContext {
	var p = new(PkgAssignElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_pkgAssignElement

	return p
}

func (s *PkgAssignElementContext) GetParser() antlr.Parser { return s.parser }

func (s *PkgAssignElementContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *PkgAssignElementContext) Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserEqual, 0)
}

func (s *PkgAssignElementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PkgAssignElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PkgAssignElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PkgAssignElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitPkgAssignElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) PkgAssignElement() (localctx IPkgAssignElementContext) {
	localctx = NewPkgAssignElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, LiteParserRULE_pkgAssignElement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1549)
		p.Name()
	}
	{
		p.SetState(1550)
		p.Match(LiteParserEqual)
	}
	{
		p.SetState(1551)
		p.expression(0)
	}

	return localctx
}

// IListAssignContext is an interface to support dynamic dispatch.
type IListAssignContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsListAssignContext differentiates from other interfaces.
	IsListAssignContext()
}

type ListAssignContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyListAssignContext() *ListAssignContext {
	var p = new(ListAssignContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_listAssign
	return p
}

func (*ListAssignContext) IsListAssignContext() {}

func NewListAssignContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ListAssignContext {
	var p = new(ListAssignContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_listAssign

	return p
}

func (s *ListAssignContext) GetParser() antlr.Parser { return s.parser }

func (s *ListAssignContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ListAssignContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ListAssignContext) AllEnd() []IEndContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEndContext)(nil)).Elem())
	var tst = make([]IEndContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEndContext)
		}
	}

	return tst
}

func (s *ListAssignContext) End(i int) IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ListAssignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ListAssignContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ListAssignContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitListAssign(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) ListAssign() (localctx IListAssignContext) {
	localctx = NewListAssignContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, LiteParserRULE_listAssign)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1558)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 172, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1553)
				p.expression(0)
			}
			{
				p.SetState(1554)
				p.End()
			}

		}
		p.SetState(1560)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 172, p.GetParserRuleContext())
	}
	{
		p.SetState(1561)
		p.expression(0)
	}

	return localctx
}

// ISetAssignContext is an interface to support dynamic dispatch.
type ISetAssignContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSetAssignContext differentiates from other interfaces.
	IsSetAssignContext()
}

type SetAssignContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetAssignContext() *SetAssignContext {
	var p = new(SetAssignContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_setAssign
	return p
}

func (*SetAssignContext) IsSetAssignContext() {}

func NewSetAssignContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetAssignContext {
	var p = new(SetAssignContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_setAssign

	return p
}

func (s *SetAssignContext) GetParser() antlr.Parser { return s.parser }

func (s *SetAssignContext) Colon_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserColon_Arrow, 0)
}

func (s *SetAssignContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *SetAssignContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SetAssignContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *SetAssignContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *SetAssignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetAssignContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetAssignContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitSetAssign(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) SetAssign() (localctx ISetAssignContext) {
	localctx = NewSetAssignContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, LiteParserRULE_setAssign)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1563)
		p.Match(LiteParserColon_Arrow)
	}
	{
		p.SetState(1564)
		p.expression(0)
	}
	p.SetState(1570)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserComma {
		{
			p.SetState(1565)
			p.More()
		}
		{
			p.SetState(1566)
			p.expression(0)
		}

		p.SetState(1572)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IDictionaryAssignContext is an interface to support dynamic dispatch.
type IDictionaryAssignContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDictionaryAssignContext differentiates from other interfaces.
	IsDictionaryAssignContext()
}

type DictionaryAssignContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDictionaryAssignContext() *DictionaryAssignContext {
	var p = new(DictionaryAssignContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_dictionaryAssign
	return p
}

func (*DictionaryAssignContext) IsDictionaryAssignContext() {}

func NewDictionaryAssignContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DictionaryAssignContext {
	var p = new(DictionaryAssignContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_dictionaryAssign

	return p
}

func (s *DictionaryAssignContext) GetParser() antlr.Parser { return s.parser }

func (s *DictionaryAssignContext) AllDictionaryElement() []IDictionaryElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDictionaryElementContext)(nil)).Elem())
	var tst = make([]IDictionaryElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDictionaryElementContext)
		}
	}

	return tst
}

func (s *DictionaryAssignContext) DictionaryElement(i int) IDictionaryElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDictionaryElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDictionaryElementContext)
}

func (s *DictionaryAssignContext) AllEnd() []IEndContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEndContext)(nil)).Elem())
	var tst = make([]IEndContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEndContext)
		}
	}

	return tst
}

func (s *DictionaryAssignContext) End(i int) IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *DictionaryAssignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DictionaryAssignContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DictionaryAssignContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitDictionaryAssign(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) DictionaryAssign() (localctx IDictionaryAssignContext) {
	localctx = NewDictionaryAssignContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, LiteParserRULE_dictionaryAssign)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1578)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 174, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1573)
				p.DictionaryElement()
			}
			{
				p.SetState(1574)
				p.End()
			}

		}
		p.SetState(1580)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 174, p.GetParserRuleContext())
	}
	{
		p.SetState(1581)
		p.DictionaryElement()
	}

	return localctx
}

// ICallAwaitContext is an interface to support dynamic dispatch.
type ICallAwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallAwaitContext differentiates from other interfaces.
	IsCallAwaitContext()
}

type CallAwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallAwaitContext() *CallAwaitContext {
	var p = new(CallAwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_callAwait
	return p
}

func (*CallAwaitContext) IsCallAwaitContext() {}

func NewCallAwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallAwaitContext {
	var p = new(CallAwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_callAwait

	return p
}

func (s *CallAwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *CallAwaitContext) Less_Less() antlr.TerminalNode {
	return s.GetToken(LiteParserLess_Less, 0)
}

func (s *CallAwaitContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CallAwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallAwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallAwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitCallAwait(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) CallAwait() (localctx ICallAwaitContext) {
	localctx = NewCallAwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, LiteParserRULE_callAwait)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1583)
		p.Match(LiteParserLess_Less)
	}
	{
		p.SetState(1584)
		p.expression(0)
	}

	return localctx
}

// ICallAsyncContext is an interface to support dynamic dispatch.
type ICallAsyncContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallAsyncContext differentiates from other interfaces.
	IsCallAsyncContext()
}

type CallAsyncContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallAsyncContext() *CallAsyncContext {
	var p = new(CallAsyncContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_callAsync
	return p
}

func (*CallAsyncContext) IsCallAsyncContext() {}

func NewCallAsyncContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallAsyncContext {
	var p = new(CallAsyncContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_callAsync

	return p
}

func (s *CallAsyncContext) GetParser() antlr.Parser { return s.parser }

func (s *CallAsyncContext) Greater_Greater() antlr.TerminalNode {
	return s.GetToken(LiteParserGreater_Greater, 0)
}

func (s *CallAsyncContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CallAsyncContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallAsyncContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallAsyncContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitCallAsync(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) CallAsync() (localctx ICallAsyncContext) {
	localctx = NewCallAsyncContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, LiteParserRULE_callAsync)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1586)
		p.Match(LiteParserGreater_Greater)
	}
	{
		p.SetState(1587)
		p.expression(0)
	}

	return localctx
}

// IListContext is an interface to support dynamic dispatch.
type IListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsListContext differentiates from other interfaces.
	IsListContext()
}

type ListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyListContext() *ListContext {
	var p = new(ListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_list
	return p
}

func (*ListContext) IsListContext() {}

func NewListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ListContext {
	var p = new(ListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_list

	return p
}

func (s *ListContext) GetParser() antlr.Parser { return s.parser }

func (s *ListContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *ListContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ListContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ListContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *ListContext) AllEnd() []IEndContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEndContext)(nil)).Elem())
	var tst = make([]IEndContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEndContext)
		}
	}

	return tst
}

func (s *ListContext) End(i int) IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) List() (localctx IListContext) {
	localctx = NewListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, LiteParserRULE_list)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1589)
		p.Left_brace()
	}
	p.SetState(1595)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 175, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1590)
				p.expression(0)
			}
			{
				p.SetState(1591)
				p.End()
			}

		}
		p.SetState(1597)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 175, p.GetParserRuleContext())
	}
	{
		p.SetState(1598)
		p.expression(0)
	}
	{
		p.SetState(1599)
		p.Right_brace()
	}

	return localctx
}

// ISetContext is an interface to support dynamic dispatch.
type ISetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSetContext differentiates from other interfaces.
	IsSetContext()
}

type SetContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetContext() *SetContext {
	var p = new(SetContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_set
	return p
}

func (*SetContext) IsSetContext() {}

func NewSetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetContext {
	var p = new(SetContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_set

	return p
}

func (s *SetContext) GetParser() antlr.Parser { return s.parser }

func (s *SetContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *SetContext) Colon_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserColon_Arrow, 0)
}

func (s *SetContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *SetContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SetContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *SetContext) AllEnd() []IEndContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEndContext)(nil)).Elem())
	var tst = make([]IEndContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEndContext)
		}
	}

	return tst
}

func (s *SetContext) End(i int) IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *SetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitSet(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Set() (localctx ISetContext) {
	localctx = NewSetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, LiteParserRULE_set)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1601)
		p.Left_brace()
	}
	{
		p.SetState(1602)
		p.Match(LiteParserColon_Arrow)
	}
	p.SetState(1608)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 176, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1603)
				p.expression(0)
			}
			{
				p.SetState(1604)
				p.End()
			}

		}
		p.SetState(1610)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 176, p.GetParserRuleContext())
	}
	{
		p.SetState(1611)
		p.expression(0)
	}
	{
		p.SetState(1612)
		p.Right_brace()
	}

	return localctx
}

// IDictionaryContext is an interface to support dynamic dispatch.
type IDictionaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDictionaryContext differentiates from other interfaces.
	IsDictionaryContext()
}

type DictionaryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDictionaryContext() *DictionaryContext {
	var p = new(DictionaryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_dictionary
	return p
}

func (*DictionaryContext) IsDictionaryContext() {}

func NewDictionaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DictionaryContext {
	var p = new(DictionaryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_dictionary

	return p
}

func (s *DictionaryContext) GetParser() antlr.Parser { return s.parser }

func (s *DictionaryContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *DictionaryContext) AllDictionaryElement() []IDictionaryElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDictionaryElementContext)(nil)).Elem())
	var tst = make([]IDictionaryElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDictionaryElementContext)
		}
	}

	return tst
}

func (s *DictionaryContext) DictionaryElement(i int) IDictionaryElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDictionaryElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDictionaryElementContext)
}

func (s *DictionaryContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *DictionaryContext) AllEnd() []IEndContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEndContext)(nil)).Elem())
	var tst = make([]IEndContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEndContext)
		}
	}

	return tst
}

func (s *DictionaryContext) End(i int) IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *DictionaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DictionaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DictionaryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitDictionary(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Dictionary() (localctx IDictionaryContext) {
	localctx = NewDictionaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, LiteParserRULE_dictionary)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1614)
		p.Left_brace()
	}
	p.SetState(1620)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 177, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1615)
				p.DictionaryElement()
			}
			{
				p.SetState(1616)
				p.End()
			}

		}
		p.SetState(1622)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 177, p.GetParserRuleContext())
	}
	{
		p.SetState(1623)
		p.DictionaryElement()
	}
	{
		p.SetState(1624)
		p.Right_brace()
	}

	return localctx
}

// IDictionaryElementContext is an interface to support dynamic dispatch.
type IDictionaryElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDictionaryElementContext differentiates from other interfaces.
	IsDictionaryElementContext()
}

type DictionaryElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDictionaryElementContext() *DictionaryElementContext {
	var p = new(DictionaryElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_dictionaryElement
	return p
}

func (*DictionaryElementContext) IsDictionaryElementContext() {}

func NewDictionaryElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DictionaryElementContext {
	var p = new(DictionaryElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_dictionaryElement

	return p
}

func (s *DictionaryElementContext) GetParser() antlr.Parser { return s.parser }

func (s *DictionaryElementContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *DictionaryElementContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *DictionaryElementContext) Equal_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserEqual_Arrow, 0)
}

func (s *DictionaryElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DictionaryElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DictionaryElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitDictionaryElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) DictionaryElement() (localctx IDictionaryElementContext) {
	localctx = NewDictionaryElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, LiteParserRULE_dictionaryElement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1626)
		p.expression(0)
	}
	{
		p.SetState(1627)
		p.Match(LiteParserEqual_Arrow)
	}
	{
		p.SetState(1628)
		p.expression(0)
	}

	return localctx
}

// ISliceContext is an interface to support dynamic dispatch.
type ISliceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSliceContext differentiates from other interfaces.
	IsSliceContext()
}

type SliceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySliceContext() *SliceContext {
	var p = new(SliceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_slice
	return p
}

func (*SliceContext) IsSliceContext() {}

func NewSliceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SliceContext {
	var p = new(SliceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_slice

	return p
}

func (s *SliceContext) GetParser() antlr.Parser { return s.parser }

func (s *SliceContext) SliceFull() ISliceFullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISliceFullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISliceFullContext)
}

func (s *SliceContext) SliceStart() ISliceStartContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISliceStartContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISliceStartContext)
}

func (s *SliceContext) SliceEnd() ISliceEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISliceEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISliceEndContext)
}

func (s *SliceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SliceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitSlice(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Slice() (localctx ISliceContext) {
	localctx = NewSliceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, LiteParserRULE_slice)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1633)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 178, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1630)
			p.SliceFull()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1631)
			p.SliceStart()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1632)
			p.SliceEnd()
		}

	}

	return localctx
}

// ISliceFullContext is an interface to support dynamic dispatch.
type ISliceFullContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsSliceFullContext differentiates from other interfaces.
	IsSliceFullContext()
}

type SliceFullContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptySliceFullContext() *SliceFullContext {
	var p = new(SliceFullContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_sliceFull
	return p
}

func (*SliceFullContext) IsSliceFullContext() {}

func NewSliceFullContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SliceFullContext {
	var p = new(SliceFullContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_sliceFull

	return p
}

func (s *SliceFullContext) GetParser() antlr.Parser { return s.parser }

func (s *SliceFullContext) GetOp() antlr.Token { return s.op }

func (s *SliceFullContext) SetOp(v antlr.Token) { s.op = v }

func (s *SliceFullContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *SliceFullContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SliceFullContext) Add_Add() antlr.TerminalNode {
	return s.GetToken(LiteParserAdd_Add, 0)
}

func (s *SliceFullContext) Sub_Sub() antlr.TerminalNode {
	return s.GetToken(LiteParserSub_Sub, 0)
}

func (s *SliceFullContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceFullContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SliceFullContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitSliceFull(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) SliceFull() (localctx ISliceFullContext) {
	localctx = NewSliceFullContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, LiteParserRULE_sliceFull)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1635)
		p.expression(0)
	}
	{
		p.SetState(1636)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*SliceFullContext).op = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == LiteParserAdd_Add || _la == LiteParserSub_Sub) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*SliceFullContext).op = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1637)
		p.expression(0)
	}

	return localctx
}

// ISliceStartContext is an interface to support dynamic dispatch.
type ISliceStartContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsSliceStartContext differentiates from other interfaces.
	IsSliceStartContext()
}

type SliceStartContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptySliceStartContext() *SliceStartContext {
	var p = new(SliceStartContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_sliceStart
	return p
}

func (*SliceStartContext) IsSliceStartContext() {}

func NewSliceStartContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SliceStartContext {
	var p = new(SliceStartContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_sliceStart

	return p
}

func (s *SliceStartContext) GetParser() antlr.Parser { return s.parser }

func (s *SliceStartContext) GetOp() antlr.Token { return s.op }

func (s *SliceStartContext) SetOp(v antlr.Token) { s.op = v }

func (s *SliceStartContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SliceStartContext) Add_Add() antlr.TerminalNode {
	return s.GetToken(LiteParserAdd_Add, 0)
}

func (s *SliceStartContext) Sub_Sub() antlr.TerminalNode {
	return s.GetToken(LiteParserSub_Sub, 0)
}

func (s *SliceStartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceStartContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SliceStartContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitSliceStart(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) SliceStart() (localctx ISliceStartContext) {
	localctx = NewSliceStartContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, LiteParserRULE_sliceStart)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1639)
		p.expression(0)
	}
	{
		p.SetState(1640)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*SliceStartContext).op = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == LiteParserAdd_Add || _la == LiteParserSub_Sub) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*SliceStartContext).op = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ISliceEndContext is an interface to support dynamic dispatch.
type ISliceEndContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsSliceEndContext differentiates from other interfaces.
	IsSliceEndContext()
}

type SliceEndContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptySliceEndContext() *SliceEndContext {
	var p = new(SliceEndContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_sliceEnd
	return p
}

func (*SliceEndContext) IsSliceEndContext() {}

func NewSliceEndContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SliceEndContext {
	var p = new(SliceEndContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_sliceEnd

	return p
}

func (s *SliceEndContext) GetParser() antlr.Parser { return s.parser }

func (s *SliceEndContext) GetOp() antlr.Token { return s.op }

func (s *SliceEndContext) SetOp(v antlr.Token) { s.op = v }

func (s *SliceEndContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SliceEndContext) Add_Add() antlr.TerminalNode {
	return s.GetToken(LiteParserAdd_Add, 0)
}

func (s *SliceEndContext) Sub_Sub() antlr.TerminalNode {
	return s.GetToken(LiteParserSub_Sub, 0)
}

func (s *SliceEndContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceEndContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SliceEndContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitSliceEnd(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) SliceEnd() (localctx ISliceEndContext) {
	localctx = NewSliceEndContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, LiteParserRULE_sliceEnd)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1642)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*SliceEndContext).op = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == LiteParserAdd_Add || _la == LiteParserSub_Sub) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*SliceEndContext).op = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1643)
		p.expression(0)
	}

	return localctx
}

// INameSpaceItemContext is an interface to support dynamic dispatch.
type INameSpaceItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNameSpaceItemContext differentiates from other interfaces.
	IsNameSpaceItemContext()
}

type NameSpaceItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNameSpaceItemContext() *NameSpaceItemContext {
	var p = new(NameSpaceItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_nameSpaceItem
	return p
}

func (*NameSpaceItemContext) IsNameSpaceItemContext() {}

func NewNameSpaceItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NameSpaceItemContext {
	var p = new(NameSpaceItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_nameSpaceItem

	return p
}

func (s *NameSpaceItemContext) GetParser() antlr.Parser { return s.parser }

func (s *NameSpaceItemContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *NameSpaceItemContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *NameSpaceItemContext) AllCall() []ICallContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICallContext)(nil)).Elem())
	var tst = make([]ICallContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICallContext)
		}
	}

	return tst
}

func (s *NameSpaceItemContext) Call(i int) ICallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICallContext)
}

func (s *NameSpaceItemContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *NameSpaceItemContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *NameSpaceItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NameSpaceItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NameSpaceItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitNameSpaceItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) NameSpaceItem() (localctx INameSpaceItemContext) {
	localctx = NewNameSpaceItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 198, LiteParserRULE_nameSpaceItem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1652)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 180, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1645)
				p.Id()
			}
			{
				p.SetState(1646)
				p.Call()
			}
			p.SetState(1648)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == LiteParserNew_Line {
				{
					p.SetState(1647)
					p.Match(LiteParserNew_Line)
				}

			}

		}
		p.SetState(1654)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 180, p.GetParserRuleContext())
	}
	{
		p.SetState(1655)
		p.Id()
	}

	return localctx
}

// INameContext is an interface to support dynamic dispatch.
type INameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNameContext differentiates from other interfaces.
	IsNameContext()
}

type NameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNameContext() *NameContext {
	var p = new(NameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_name
	return p
}

func (*NameContext) IsNameContext() {}

func NewNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NameContext {
	var p = new(NameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_name

	return p
}

func (s *NameContext) GetParser() antlr.Parser { return s.parser }

func (s *NameContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *NameContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *NameContext) AllCall() []ICallContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICallContext)(nil)).Elem())
	var tst = make([]ICallContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICallContext)
		}
	}

	return tst
}

func (s *NameContext) Call(i int) ICallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICallContext)
}

func (s *NameContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *NameContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *NameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Name() (localctx INameContext) {
	localctx = NewNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 200, LiteParserRULE_name)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1657)
		p.Id()
	}
	p.SetState(1666)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserDot {
		{
			p.SetState(1658)
			p.Call()
		}
		p.SetState(1660)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == LiteParserNew_Line {
			{
				p.SetState(1659)
				p.Match(LiteParserNew_Line)
			}

		}
		{
			p.SetState(1662)
			p.Id()
		}

		p.SetState(1668)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITemplateDefineContext is an interface to support dynamic dispatch.
type ITemplateDefineContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateDefineContext differentiates from other interfaces.
	IsTemplateDefineContext()
}

type TemplateDefineContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateDefineContext() *TemplateDefineContext {
	var p = new(TemplateDefineContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_templateDefine
	return p
}

func (*TemplateDefineContext) IsTemplateDefineContext() {}

func NewTemplateDefineContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateDefineContext {
	var p = new(TemplateDefineContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_templateDefine

	return p
}

func (s *TemplateDefineContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateDefineContext) Left_brack() ILeft_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_brackContext)
}

func (s *TemplateDefineContext) AllTemplateDefineItem() []ITemplateDefineItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITemplateDefineItemContext)(nil)).Elem())
	var tst = make([]ITemplateDefineItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITemplateDefineItemContext)
		}
	}

	return tst
}

func (s *TemplateDefineContext) TemplateDefineItem(i int) ITemplateDefineItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateDefineItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITemplateDefineItemContext)
}

func (s *TemplateDefineContext) Right_brack() IRight_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_brackContext)
}

func (s *TemplateDefineContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *TemplateDefineContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *TemplateDefineContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateDefineContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateDefineContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTemplateDefine(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TemplateDefine() (localctx ITemplateDefineContext) {
	localctx = NewTemplateDefineContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 202, LiteParserRULE_templateDefine)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1669)
		p.Left_brack()
	}
	{
		p.SetState(1670)
		p.TemplateDefineItem()
	}
	p.SetState(1676)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserComma {
		{
			p.SetState(1671)
			p.More()
		}
		{
			p.SetState(1672)
			p.TemplateDefineItem()
		}

		p.SetState(1678)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1679)
		p.Right_brack()
	}

	return localctx
}

// ITemplateDefineItemContext is an interface to support dynamic dispatch.
type ITemplateDefineItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateDefineItemContext differentiates from other interfaces.
	IsTemplateDefineItemContext()
}

type TemplateDefineItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateDefineItemContext() *TemplateDefineItemContext {
	var p = new(TemplateDefineItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_templateDefineItem
	return p
}

func (*TemplateDefineItemContext) IsTemplateDefineItemContext() {}

func NewTemplateDefineItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateDefineItemContext {
	var p = new(TemplateDefineItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_templateDefineItem

	return p
}

func (s *TemplateDefineItemContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateDefineItemContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *TemplateDefineItemContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *TemplateDefineItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateDefineItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateDefineItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTemplateDefineItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TemplateDefineItem() (localctx ITemplateDefineItemContext) {
	localctx = NewTemplateDefineItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 204, LiteParserRULE_templateDefineItem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1681)
		p.Id()
	}
	p.SetState(1683)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la-54)&-(0x1f+1)) == 0 && ((1<<uint((_la-54)))&((1<<(LiteParserTypeI8-54))|(1<<(LiteParserTypeU8-54))|(1<<(LiteParserTypeI16-54))|(1<<(LiteParserTypeU16-54))|(1<<(LiteParserTypeI32-54))|(1<<(LiteParserTypeU32-54))|(1<<(LiteParserTypeI64-54))|(1<<(LiteParserTypeU64-54))|(1<<(LiteParserTypeF32-54))|(1<<(LiteParserTypeF64-54))|(1<<(LiteParserTypeChr-54))|(1<<(LiteParserTypeStr-54))|(1<<(LiteParserTypeBool-54))|(1<<(LiteParserTypeInt-54))|(1<<(LiteParserTypeNum-54))|(1<<(LiteParserTypeByte-54))|(1<<(LiteParserTypeAny-54))|(1<<(LiteParserIDPrivate-54))|(1<<(LiteParserIDPublic-54)))) != 0 {
		{
			p.SetState(1682)
			p.Id()
		}

	}

	return localctx
}

// ITemplateCallContext is an interface to support dynamic dispatch.
type ITemplateCallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateCallContext differentiates from other interfaces.
	IsTemplateCallContext()
}

type TemplateCallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateCallContext() *TemplateCallContext {
	var p = new(TemplateCallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_templateCall
	return p
}

func (*TemplateCallContext) IsTemplateCallContext() {}

func NewTemplateCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateCallContext {
	var p = new(TemplateCallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_templateCall

	return p
}

func (s *TemplateCallContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateCallContext) Left_brack() ILeft_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_brackContext)
}

func (s *TemplateCallContext) AllTypeType() []ITypeTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem())
	var tst = make([]ITypeTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeTypeContext)
		}
	}

	return tst
}

func (s *TemplateCallContext) TypeType(i int) ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TemplateCallContext) Right_brack() IRight_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_brackContext)
}

func (s *TemplateCallContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *TemplateCallContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *TemplateCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateCallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTemplateCall(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TemplateCall() (localctx ITemplateCallContext) {
	localctx = NewTemplateCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 206, LiteParserRULE_templateCall)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1685)
		p.Left_brack()
	}
	{
		p.SetState(1686)
		p.TypeType()
	}
	p.SetState(1692)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserComma {
		{
			p.SetState(1687)
			p.More()
		}
		{
			p.SetState(1688)
			p.TypeType()
		}

		p.SetState(1694)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1695)
		p.Right_brack()
	}

	return localctx
}

// ILambdaContext is an interface to support dynamic dispatch.
type ILambdaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// IsLambdaContext differentiates from other interfaces.
	IsLambdaContext()
}

type LambdaContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
}

func NewEmptyLambdaContext() *LambdaContext {
	var p = new(LambdaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_lambda
	return p
}

func (*LambdaContext) IsLambdaContext() {}

func NewLambdaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LambdaContext {
	var p = new(LambdaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_lambda

	return p
}

func (s *LambdaContext) GetParser() antlr.Parser { return s.parser }

func (s *LambdaContext) GetT() antlr.Token { return s.t }

func (s *LambdaContext) SetT(v antlr.Token) { s.t = v }

func (s *LambdaContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *LambdaContext) TupleExpression() ITupleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleExpressionContext)
}

func (s *LambdaContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *LambdaContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *LambdaContext) Right_Flow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Flow, 0)
}

func (s *LambdaContext) LambdaIn() ILambdaInContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILambdaInContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILambdaInContext)
}

func (s *LambdaContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *LambdaContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *LambdaContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *LambdaContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *LambdaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LambdaContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitLambda(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Lambda() (localctx ILambdaContext) {
	localctx = NewLambdaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 208, LiteParserRULE_lambda)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(1730)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 191, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1697)
			p.Left_brace()
		}
		p.SetState(1699)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if ((_la-54)&-(0x1f+1)) == 0 && ((1<<uint((_la-54)))&((1<<(LiteParserTypeI8-54))|(1<<(LiteParserTypeU8-54))|(1<<(LiteParserTypeI16-54))|(1<<(LiteParserTypeU16-54))|(1<<(LiteParserTypeI32-54))|(1<<(LiteParserTypeU32-54))|(1<<(LiteParserTypeI64-54))|(1<<(LiteParserTypeU64-54))|(1<<(LiteParserTypeF32-54))|(1<<(LiteParserTypeF64-54))|(1<<(LiteParserTypeChr-54))|(1<<(LiteParserTypeStr-54))|(1<<(LiteParserTypeBool-54))|(1<<(LiteParserTypeInt-54))|(1<<(LiteParserTypeNum-54))|(1<<(LiteParserTypeByte-54))|(1<<(LiteParserTypeAny-54))|(1<<(LiteParserIDPrivate-54))|(1<<(LiteParserIDPublic-54)))) != 0 {
			{
				p.SetState(1698)
				p.LambdaIn()
			}

		}
		{
			p.SetState(1701)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*LambdaContext).t = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == LiteParserRight_Arrow || _la == LiteParserRight_Flow) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*LambdaContext).t = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(1705)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == LiteParserNew_Line {
			{
				p.SetState(1702)
				p.Match(LiteParserNew_Line)
			}

			p.SetState(1707)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1708)
			p.TupleExpression()
		}
		{
			p.SetState(1709)
			p.Right_brace()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1711)
			p.Left_brace()
		}
		p.SetState(1713)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if ((_la-54)&-(0x1f+1)) == 0 && ((1<<uint((_la-54)))&((1<<(LiteParserTypeI8-54))|(1<<(LiteParserTypeU8-54))|(1<<(LiteParserTypeI16-54))|(1<<(LiteParserTypeU16-54))|(1<<(LiteParserTypeI32-54))|(1<<(LiteParserTypeU32-54))|(1<<(LiteParserTypeI64-54))|(1<<(LiteParserTypeU64-54))|(1<<(LiteParserTypeF32-54))|(1<<(LiteParserTypeF64-54))|(1<<(LiteParserTypeChr-54))|(1<<(LiteParserTypeStr-54))|(1<<(LiteParserTypeBool-54))|(1<<(LiteParserTypeInt-54))|(1<<(LiteParserTypeNum-54))|(1<<(LiteParserTypeByte-54))|(1<<(LiteParserTypeAny-54))|(1<<(LiteParserIDPrivate-54))|(1<<(LiteParserIDPublic-54)))) != 0 {
			{
				p.SetState(1712)
				p.LambdaIn()
			}

		}
		{
			p.SetState(1715)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*LambdaContext).t = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == LiteParserRight_Arrow || _la == LiteParserRight_Flow) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*LambdaContext).t = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(1719)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 189, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1716)
					p.Match(LiteParserNew_Line)
				}

			}
			p.SetState(1721)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 189, p.GetParserRuleContext())
		}
		p.SetState(1725)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 190, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1722)
					p.FunctionSupportStatement()
				}

			}
			p.SetState(1727)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 190, p.GetParserRuleContext())
		}
		{
			p.SetState(1728)
			p.Right_brace()
		}

	}

	return localctx
}

// ILambdaInContext is an interface to support dynamic dispatch.
type ILambdaInContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLambdaInContext differentiates from other interfaces.
	IsLambdaInContext()
}

type LambdaInContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLambdaInContext() *LambdaInContext {
	var p = new(LambdaInContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_lambdaIn
	return p
}

func (*LambdaInContext) IsLambdaInContext() {}

func NewLambdaInContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LambdaInContext {
	var p = new(LambdaInContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_lambdaIn

	return p
}

func (s *LambdaInContext) GetParser() antlr.Parser { return s.parser }

func (s *LambdaInContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *LambdaInContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *LambdaInContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *LambdaInContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *LambdaInContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdaInContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LambdaInContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitLambdaIn(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) LambdaIn() (localctx ILambdaInContext) {
	localctx = NewLambdaInContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 210, LiteParserRULE_lambdaIn)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1732)
		p.Id()
	}
	p.SetState(1738)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserComma {
		{
			p.SetState(1733)
			p.More()
		}
		{
			p.SetState(1734)
			p.Id()
		}

		p.SetState(1740)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IPkgAnonymousContext is an interface to support dynamic dispatch.
type IPkgAnonymousContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPkgAnonymousContext differentiates from other interfaces.
	IsPkgAnonymousContext()
}

type PkgAnonymousContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPkgAnonymousContext() *PkgAnonymousContext {
	var p = new(PkgAnonymousContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_pkgAnonymous
	return p
}

func (*PkgAnonymousContext) IsPkgAnonymousContext() {}

func NewPkgAnonymousContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PkgAnonymousContext {
	var p = new(PkgAnonymousContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_pkgAnonymous

	return p
}

func (s *PkgAnonymousContext) GetParser() antlr.Parser { return s.parser }

func (s *PkgAnonymousContext) PkgAnonymousAssign() IPkgAnonymousAssignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPkgAnonymousAssignContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPkgAnonymousAssignContext)
}

func (s *PkgAnonymousContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PkgAnonymousContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PkgAnonymousContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitPkgAnonymous(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) PkgAnonymous() (localctx IPkgAnonymousContext) {
	localctx = NewPkgAnonymousContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 212, LiteParserRULE_pkgAnonymous)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1741)
		p.PkgAnonymousAssign()
	}

	return localctx
}

// IPkgAnonymousAssignContext is an interface to support dynamic dispatch.
type IPkgAnonymousAssignContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPkgAnonymousAssignContext differentiates from other interfaces.
	IsPkgAnonymousAssignContext()
}

type PkgAnonymousAssignContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPkgAnonymousAssignContext() *PkgAnonymousAssignContext {
	var p = new(PkgAnonymousAssignContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_pkgAnonymousAssign
	return p
}

func (*PkgAnonymousAssignContext) IsPkgAnonymousAssignContext() {}

func NewPkgAnonymousAssignContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PkgAnonymousAssignContext {
	var p = new(PkgAnonymousAssignContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_pkgAnonymousAssign

	return p
}

func (s *PkgAnonymousAssignContext) GetParser() antlr.Parser { return s.parser }

func (s *PkgAnonymousAssignContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *PkgAnonymousAssignContext) AllPkgAnonymousAssignElement() []IPkgAnonymousAssignElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPkgAnonymousAssignElementContext)(nil)).Elem())
	var tst = make([]IPkgAnonymousAssignElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPkgAnonymousAssignElementContext)
		}
	}

	return tst
}

func (s *PkgAnonymousAssignContext) PkgAnonymousAssignElement(i int) IPkgAnonymousAssignElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPkgAnonymousAssignElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPkgAnonymousAssignElementContext)
}

func (s *PkgAnonymousAssignContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *PkgAnonymousAssignContext) AllEnd() []IEndContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEndContext)(nil)).Elem())
	var tst = make([]IEndContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEndContext)
		}
	}

	return tst
}

func (s *PkgAnonymousAssignContext) End(i int) IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *PkgAnonymousAssignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PkgAnonymousAssignContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PkgAnonymousAssignContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitPkgAnonymousAssign(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) PkgAnonymousAssign() (localctx IPkgAnonymousAssignContext) {
	localctx = NewPkgAnonymousAssignContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 214, LiteParserRULE_pkgAnonymousAssign)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1743)
		p.Left_brace()
	}
	p.SetState(1749)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 193, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1744)
				p.PkgAnonymousAssignElement()
			}
			{
				p.SetState(1745)
				p.End()
			}

		}
		p.SetState(1751)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 193, p.GetParserRuleContext())
	}
	{
		p.SetState(1752)
		p.PkgAnonymousAssignElement()
	}
	{
		p.SetState(1753)
		p.Right_brace()
	}

	return localctx
}

// IPkgAnonymousAssignElementContext is an interface to support dynamic dispatch.
type IPkgAnonymousAssignElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// IsPkgAnonymousAssignElementContext differentiates from other interfaces.
	IsPkgAnonymousAssignElementContext()
}

type PkgAnonymousAssignElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
}

func NewEmptyPkgAnonymousAssignElementContext() *PkgAnonymousAssignElementContext {
	var p = new(PkgAnonymousAssignElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_pkgAnonymousAssignElement
	return p
}

func (*PkgAnonymousAssignElementContext) IsPkgAnonymousAssignElementContext() {}

func NewPkgAnonymousAssignElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PkgAnonymousAssignElementContext {
	var p = new(PkgAnonymousAssignElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_pkgAnonymousAssignElement

	return p
}

func (s *PkgAnonymousAssignElementContext) GetParser() antlr.Parser { return s.parser }

func (s *PkgAnonymousAssignElementContext) GetT() antlr.Token { return s.t }

func (s *PkgAnonymousAssignElementContext) SetT(v antlr.Token) { s.t = v }

func (s *PkgAnonymousAssignElementContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *PkgAnonymousAssignElementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PkgAnonymousAssignElementContext) Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserEqual, 0)
}

func (s *PkgAnonymousAssignElementContext) Colon() antlr.TerminalNode {
	return s.GetToken(LiteParserColon, 0)
}

func (s *PkgAnonymousAssignElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PkgAnonymousAssignElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PkgAnonymousAssignElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitPkgAnonymousAssignElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) PkgAnonymousAssignElement() (localctx IPkgAnonymousAssignElementContext) {
	localctx = NewPkgAnonymousAssignElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 216, LiteParserRULE_pkgAnonymousAssignElement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1755)
		p.Name()
	}
	{
		p.SetState(1756)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*PkgAnonymousAssignElementContext).t = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == LiteParserEqual || _la == LiteParserColon) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*PkgAnonymousAssignElementContext).t = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1757)
		p.expression(0)
	}

	return localctx
}

// IFunctionExpressionContext is an interface to support dynamic dispatch.
type IFunctionExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// GetY returns the y token.
	GetY() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// SetY sets the y token.
	SetY(antlr.Token)

	// IsFunctionExpressionContext differentiates from other interfaces.
	IsFunctionExpressionContext()
}

type FunctionExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
	y      antlr.Token
}

func NewEmptyFunctionExpressionContext() *FunctionExpressionContext {
	var p = new(FunctionExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_functionExpression
	return p
}

func (*FunctionExpressionContext) IsFunctionExpressionContext() {}

func NewFunctionExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionExpressionContext {
	var p = new(FunctionExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_functionExpression

	return p
}

func (s *FunctionExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionExpressionContext) GetT() antlr.Token { return s.t }

func (s *FunctionExpressionContext) GetY() antlr.Token { return s.y }

func (s *FunctionExpressionContext) SetT(v antlr.Token) { s.t = v }

func (s *FunctionExpressionContext) SetY(v antlr.Token) { s.y = v }

func (s *FunctionExpressionContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *FunctionExpressionContext) ParameterClauseIn() IParameterClauseInContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseInContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseInContext)
}

func (s *FunctionExpressionContext) ParameterClauseOut() IParameterClauseOutContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseOutContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseOutContext)
}

func (s *FunctionExpressionContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *FunctionExpressionContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *FunctionExpressionContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *FunctionExpressionContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *FunctionExpressionContext) Right_Flow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Flow, 0)
}

func (s *FunctionExpressionContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *FunctionExpressionContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *FunctionExpressionContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *FunctionExpressionContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *FunctionExpressionContext) At() antlr.TerminalNode {
	return s.GetToken(LiteParserAt, 0)
}

func (s *FunctionExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitFunctionExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) FunctionExpression() (localctx IFunctionExpressionContext) {
	localctx = NewFunctionExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 218, LiteParserRULE_functionExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1759)
		p.Left_paren()
	}
	{
		p.SetState(1760)
		p.ParameterClauseIn()
	}
	{
		p.SetState(1761)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*FunctionExpressionContext).t = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == LiteParserRight_Arrow || _la == LiteParserRight_Flow) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*FunctionExpressionContext).t = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1763)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserAt {
		{
			p.SetState(1762)

			var _m = p.Match(LiteParserAt)

			localctx.(*FunctionExpressionContext).y = _m
		}

	}
	p.SetState(1768)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserNew_Line {
		{
			p.SetState(1765)
			p.Match(LiteParserNew_Line)
		}

		p.SetState(1770)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1771)
		p.ParameterClauseOut()
	}
	{
		p.SetState(1772)
		p.Right_paren()
	}
	{
		p.SetState(1773)
		p.Left_brace()
	}
	p.SetState(1777)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 196, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1774)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(1779)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 196, p.GetParserRuleContext())
	}
	{
		p.SetState(1780)
		p.Right_brace()
	}

	return localctx
}

// IPlusMinusContext is an interface to support dynamic dispatch.
type IPlusMinusContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPlusMinusContext differentiates from other interfaces.
	IsPlusMinusContext()
}

type PlusMinusContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPlusMinusContext() *PlusMinusContext {
	var p = new(PlusMinusContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_plusMinus
	return p
}

func (*PlusMinusContext) IsPlusMinusContext() {}

func NewPlusMinusContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PlusMinusContext {
	var p = new(PlusMinusContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_plusMinus

	return p
}

func (s *PlusMinusContext) GetParser() antlr.Parser { return s.parser }

func (s *PlusMinusContext) Add() IAddContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAddContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAddContext)
}

func (s *PlusMinusContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PlusMinusContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PlusMinusContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PlusMinusContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitPlusMinus(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) PlusMinus() (localctx IPlusMinusContext) {
	localctx = NewPlusMinusContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 220, LiteParserRULE_plusMinus)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1782)
		p.Add()
	}
	{
		p.SetState(1783)
		p.expression(0)
	}

	return localctx
}

// INegateContext is an interface to support dynamic dispatch.
type INegateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNegateContext differentiates from other interfaces.
	IsNegateContext()
}

type NegateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNegateContext() *NegateContext {
	var p = new(NegateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_negate
	return p
}

func (*NegateContext) IsNegateContext() {}

func NewNegateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NegateContext {
	var p = new(NegateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_negate

	return p
}

func (s *NegateContext) GetParser() antlr.Parser { return s.parser }

func (s *NegateContext) Wave() IWaveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWaveContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWaveContext)
}

func (s *NegateContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NegateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NegateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NegateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitNegate(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Negate() (localctx INegateContext) {
	localctx = NewNegateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 222, LiteParserRULE_negate)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1785)
		p.Wave()
	}
	{
		p.SetState(1786)
		p.expression(0)
	}

	return localctx
}

// IBitwiseNotExpressionContext is an interface to support dynamic dispatch.
type IBitwiseNotExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitwiseNotExpressionContext differentiates from other interfaces.
	IsBitwiseNotExpressionContext()
}

type BitwiseNotExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitwiseNotExpressionContext() *BitwiseNotExpressionContext {
	var p = new(BitwiseNotExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_bitwiseNotExpression
	return p
}

func (*BitwiseNotExpressionContext) IsBitwiseNotExpressionContext() {}

func NewBitwiseNotExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitwiseNotExpressionContext {
	var p = new(BitwiseNotExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_bitwiseNotExpression

	return p
}

func (s *BitwiseNotExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *BitwiseNotExpressionContext) BitwiseNot() IBitwiseNotContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseNotContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseNotContext)
}

func (s *BitwiseNotExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *BitwiseNotExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseNotExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitwiseNotExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitBitwiseNotExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) BitwiseNotExpression() (localctx IBitwiseNotExpressionContext) {
	localctx = NewBitwiseNotExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 224, LiteParserRULE_bitwiseNotExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1788)
		p.BitwiseNot()
	}
	{
		p.SetState(1789)
		p.expression(0)
	}

	return localctx
}

// ILinqContext is an interface to support dynamic dispatch.
type ILinqContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLinqContext differentiates from other interfaces.
	IsLinqContext()
}

type LinqContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLinqContext() *LinqContext {
	var p = new(LinqContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_linq
	return p
}

func (*LinqContext) IsLinqContext() {}

func NewLinqContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LinqContext {
	var p = new(LinqContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_linq

	return p
}

func (s *LinqContext) GetParser() antlr.Parser { return s.parser }

func (s *LinqContext) LinqHeadItem() ILinqHeadItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILinqHeadItemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILinqHeadItemContext)
}

func (s *LinqContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *LinqContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *LinqContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LinqContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *LinqContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *LinqContext) AllLinqItem() []ILinqItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILinqItemContext)(nil)).Elem())
	var tst = make([]ILinqItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILinqItemContext)
		}
	}

	return tst
}

func (s *LinqContext) LinqItem(i int) ILinqItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILinqItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILinqItemContext)
}

func (s *LinqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LinqContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LinqContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitLinq(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Linq() (localctx ILinqContext) {
	localctx = NewLinqContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 226, LiteParserRULE_linq)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1791)
		p.LinqHeadItem()
	}
	{
		p.SetState(1792)
		p.Match(LiteParserRight_Arrow)
	}
	p.SetState(1794)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserNew_Line {
		{
			p.SetState(1793)
			p.Match(LiteParserNew_Line)
		}

	}
	p.SetState(1799)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 198, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1796)
				p.LinqItem()
			}

		}
		p.SetState(1801)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 198, p.GetParserRuleContext())
	}
	{
		p.SetState(1802)
		p.Id()
	}
	p.SetState(1804)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserNew_Line {
		{
			p.SetState(1803)
			p.Match(LiteParserNew_Line)
		}

	}
	{
		p.SetState(1806)
		p.expression(0)
	}

	return localctx
}

// ILinqHeadItemContext is an interface to support dynamic dispatch.
type ILinqHeadItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLinqHeadItemContext differentiates from other interfaces.
	IsLinqHeadItemContext()
}

type LinqHeadItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLinqHeadItemContext() *LinqHeadItemContext {
	var p = new(LinqHeadItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_linqHeadItem
	return p
}

func (*LinqHeadItemContext) IsLinqHeadItemContext() {}

func NewLinqHeadItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LinqHeadItemContext {
	var p = new(LinqHeadItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_linqHeadItem

	return p
}

func (s *LinqHeadItemContext) GetParser() antlr.Parser { return s.parser }

func (s *LinqHeadItemContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *LinqHeadItemContext) At() antlr.TerminalNode {
	return s.GetToken(LiteParserAt, 0)
}

func (s *LinqHeadItemContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LinqHeadItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LinqHeadItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LinqHeadItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitLinqHeadItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) LinqHeadItem() (localctx ILinqHeadItemContext) {
	localctx = NewLinqHeadItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 228, LiteParserRULE_linqHeadItem)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1808)
		p.Id()
	}
	{
		p.SetState(1809)
		p.Match(LiteParserAt)
	}
	{
		p.SetState(1810)
		p.expression(0)
	}

	return localctx
}

// ILinqItemContext is an interface to support dynamic dispatch.
type ILinqItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLinqItemContext differentiates from other interfaces.
	IsLinqItemContext()
}

type LinqItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLinqItemContext() *LinqItemContext {
	var p = new(LinqItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_linqItem
	return p
}

func (*LinqItemContext) IsLinqItemContext() {}

func NewLinqItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LinqItemContext {
	var p = new(LinqItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_linqItem

	return p
}

func (s *LinqItemContext) GetParser() antlr.Parser { return s.parser }

func (s *LinqItemContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *LinqItemContext) LinqHeadItem() ILinqHeadItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILinqHeadItemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILinqHeadItemContext)
}

func (s *LinqItemContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *LinqItemContext) New_Line() antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, 0)
}

func (s *LinqItemContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LinqItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LinqItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LinqItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitLinqItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) LinqItem() (localctx ILinqItemContext) {
	localctx = NewLinqItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 230, LiteParserRULE_linqItem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1817)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 201, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1812)
			p.LinqHeadItem()
		}

	case 2:
		{
			p.SetState(1813)
			p.Id()
		}
		p.SetState(1815)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-27)&-(0x1f+1)) == 0 && ((1<<uint((_la-27)))&((1<<(LiteParserLess_Less-27))|(1<<(LiteParserGreater_Greater-27))|(1<<(LiteParserLeft_Paren-27))|(1<<(LiteParserLeft_Brace-27))|(1<<(LiteParserLeft_Brack-27))|(1<<(LiteParserQuestion-27))|(1<<(LiteParserBang-27))|(1<<(LiteParserWave-27))|(1<<(LiteParserAdd-27))|(1<<(LiteParserSub-27))|(1<<(LiteParserGrave-27))|(1<<(LiteParserTypeI8-27))|(1<<(LiteParserTypeU8-27))|(1<<(LiteParserTypeI16-27))|(1<<(LiteParserTypeU16-27))|(1<<(LiteParserTypeI32-27)))) != 0) || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(LiteParserTypeU32-59))|(1<<(LiteParserTypeI64-59))|(1<<(LiteParserTypeU64-59))|(1<<(LiteParserTypeF32-59))|(1<<(LiteParserTypeF64-59))|(1<<(LiteParserTypeChr-59))|(1<<(LiteParserTypeStr-59))|(1<<(LiteParserTypeBool-59))|(1<<(LiteParserTypeInt-59))|(1<<(LiteParserTypeNum-59))|(1<<(LiteParserTypeByte-59))|(1<<(LiteParserTypeAny-59))|(1<<(LiteParserNilLiteral-59))|(1<<(LiteParserTrueLiteral-59))|(1<<(LiteParserFalseLiteral-59))|(1<<(LiteParserUndefinedLiteral-59))|(1<<(LiteParserNumberLiteral-59))|(1<<(LiteParserTextLiteral-59))|(1<<(LiteParserCharLiteral-59))|(1<<(LiteParserIDPrivate-59))|(1<<(LiteParserIDPublic-59))|(1<<(LiteParserDiscard-59)))) != 0) {
			{
				p.SetState(1814)
				p.expression(0)
			}

		}

	}
	{
		p.SetState(1819)
		p.Match(LiteParserRight_Arrow)
	}
	p.SetState(1821)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserNew_Line {
		{
			p.SetState(1820)
			p.Match(LiteParserNew_Line)
		}

	}

	return localctx
}

// IStringExpressionContext is an interface to support dynamic dispatch.
type IStringExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStringExpressionContext differentiates from other interfaces.
	IsStringExpressionContext()
}

type StringExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStringExpressionContext() *StringExpressionContext {
	var p = new(StringExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_stringExpression
	return p
}

func (*StringExpressionContext) IsStringExpressionContext() {}

func NewStringExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StringExpressionContext {
	var p = new(StringExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_stringExpression

	return p
}

func (s *StringExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *StringExpressionContext) TextLiteral() antlr.TerminalNode {
	return s.GetToken(LiteParserTextLiteral, 0)
}

func (s *StringExpressionContext) AllStringExpressionElement() []IStringExpressionElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStringExpressionElementContext)(nil)).Elem())
	var tst = make([]IStringExpressionElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStringExpressionElementContext)
		}
	}

	return tst
}

func (s *StringExpressionContext) StringExpressionElement(i int) IStringExpressionElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringExpressionElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStringExpressionElementContext)
}

func (s *StringExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StringExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitStringExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) StringExpression() (localctx IStringExpressionContext) {
	localctx = NewStringExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 232, LiteParserRULE_stringExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1823)
		p.Match(LiteParserTextLiteral)
	}
	p.SetState(1825)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(1824)
				p.StringExpressionElement()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1827)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 203, p.GetParserRuleContext())
	}

	return localctx
}

// IStringExpressionElementContext is an interface to support dynamic dispatch.
type IStringExpressionElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStringExpressionElementContext differentiates from other interfaces.
	IsStringExpressionElementContext()
}

type StringExpressionElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStringExpressionElementContext() *StringExpressionElementContext {
	var p = new(StringExpressionElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_stringExpressionElement
	return p
}

func (*StringExpressionElementContext) IsStringExpressionElementContext() {}

func NewStringExpressionElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StringExpressionElementContext {
	var p = new(StringExpressionElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_stringExpressionElement

	return p
}

func (s *StringExpressionElementContext) GetParser() antlr.Parser { return s.parser }

func (s *StringExpressionElementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *StringExpressionElementContext) TextLiteral() antlr.TerminalNode {
	return s.GetToken(LiteParserTextLiteral, 0)
}

func (s *StringExpressionElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringExpressionElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StringExpressionElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitStringExpressionElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) StringExpressionElement() (localctx IStringExpressionElementContext) {
	localctx = NewStringExpressionElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 234, LiteParserRULE_stringExpressionElement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1829)
		p.expression(0)
	}
	{
		p.SetState(1830)
		p.Match(LiteParserTextLiteral)
	}

	return localctx
}

// IJudgeExpressionContext is an interface to support dynamic dispatch.
type IJudgeExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJudgeExpressionContext differentiates from other interfaces.
	IsJudgeExpressionContext()
}

type JudgeExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJudgeExpressionContext() *JudgeExpressionContext {
	var p = new(JudgeExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_judgeExpression
	return p
}

func (*JudgeExpressionContext) IsJudgeExpressionContext() {}

func NewJudgeExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JudgeExpressionContext {
	var p = new(JudgeExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_judgeExpression

	return p
}

func (s *JudgeExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *JudgeExpressionContext) JudgeExpressionIfStatement() IJudgeExpressionIfStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJudgeExpressionIfStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJudgeExpressionIfStatementContext)
}

func (s *JudgeExpressionContext) JudgeExpressionElseStatement() IJudgeExpressionElseStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJudgeExpressionElseStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJudgeExpressionElseStatementContext)
}

func (s *JudgeExpressionContext) AllJudgeExpressionElseIfStatement() []IJudgeExpressionElseIfStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IJudgeExpressionElseIfStatementContext)(nil)).Elem())
	var tst = make([]IJudgeExpressionElseIfStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IJudgeExpressionElseIfStatementContext)
		}
	}

	return tst
}

func (s *JudgeExpressionContext) JudgeExpressionElseIfStatement(i int) IJudgeExpressionElseIfStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJudgeExpressionElseIfStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IJudgeExpressionElseIfStatementContext)
}

func (s *JudgeExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JudgeExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JudgeExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitJudgeExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) JudgeExpression() (localctx IJudgeExpressionContext) {
	localctx = NewJudgeExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 236, LiteParserRULE_judgeExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1832)
		p.JudgeExpressionIfStatement()
	}
	p.SetState(1836)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 204, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1833)
				p.JudgeExpressionElseIfStatement()
			}

		}
		p.SetState(1838)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 204, p.GetParserRuleContext())
	}
	{
		p.SetState(1839)
		p.JudgeExpressionElseStatement()
	}

	return localctx
}

// IJudgeExpressionElseStatementContext is an interface to support dynamic dispatch.
type IJudgeExpressionElseStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJudgeExpressionElseStatementContext differentiates from other interfaces.
	IsJudgeExpressionElseStatementContext()
}

type JudgeExpressionElseStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJudgeExpressionElseStatementContext() *JudgeExpressionElseStatementContext {
	var p = new(JudgeExpressionElseStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_judgeExpressionElseStatement
	return p
}

func (*JudgeExpressionElseStatementContext) IsJudgeExpressionElseStatementContext() {}

func NewJudgeExpressionElseStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JudgeExpressionElseStatementContext {
	var p = new(JudgeExpressionElseStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_judgeExpressionElseStatement

	return p
}

func (s *JudgeExpressionElseStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *JudgeExpressionElseStatementContext) Discard() antlr.TerminalNode {
	return s.GetToken(LiteParserDiscard, 0)
}

func (s *JudgeExpressionElseStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *JudgeExpressionElseStatementContext) TupleExpression() ITupleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleExpressionContext)
}

func (s *JudgeExpressionElseStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *JudgeExpressionElseStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *JudgeExpressionElseStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *JudgeExpressionElseStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JudgeExpressionElseStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JudgeExpressionElseStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitJudgeExpressionElseStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) JudgeExpressionElseStatement() (localctx IJudgeExpressionElseStatementContext) {
	localctx = NewJudgeExpressionElseStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 238, LiteParserRULE_judgeExpressionElseStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1841)
		p.Match(LiteParserDiscard)
	}
	{
		p.SetState(1842)
		p.Left_brace()
	}
	p.SetState(1846)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 205, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1843)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(1848)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 205, p.GetParserRuleContext())
	}
	{
		p.SetState(1849)
		p.TupleExpression()
	}
	{
		p.SetState(1850)
		p.Right_brace()
	}

	return localctx
}

// IJudgeExpressionIfStatementContext is an interface to support dynamic dispatch.
type IJudgeExpressionIfStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJudgeExpressionIfStatementContext differentiates from other interfaces.
	IsJudgeExpressionIfStatementContext()
}

type JudgeExpressionIfStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJudgeExpressionIfStatementContext() *JudgeExpressionIfStatementContext {
	var p = new(JudgeExpressionIfStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_judgeExpressionIfStatement
	return p
}

func (*JudgeExpressionIfStatementContext) IsJudgeExpressionIfStatementContext() {}

func NewJudgeExpressionIfStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JudgeExpressionIfStatementContext {
	var p = new(JudgeExpressionIfStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_judgeExpressionIfStatement

	return p
}

func (s *JudgeExpressionIfStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *JudgeExpressionIfStatementContext) Question() antlr.TerminalNode {
	return s.GetToken(LiteParserQuestion, 0)
}

func (s *JudgeExpressionIfStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *JudgeExpressionIfStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *JudgeExpressionIfStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *JudgeExpressionIfStatementContext) TupleExpression() ITupleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleExpressionContext)
}

func (s *JudgeExpressionIfStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *JudgeExpressionIfStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *JudgeExpressionIfStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *JudgeExpressionIfStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JudgeExpressionIfStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JudgeExpressionIfStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitJudgeExpressionIfStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) JudgeExpressionIfStatement() (localctx IJudgeExpressionIfStatementContext) {
	localctx = NewJudgeExpressionIfStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 240, LiteParserRULE_judgeExpressionIfStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1852)
		p.Match(LiteParserQuestion)
	}
	{
		p.SetState(1853)
		p.Match(LiteParserRight_Arrow)
	}
	{
		p.SetState(1854)
		p.expression(0)
	}
	{
		p.SetState(1855)
		p.Left_brace()
	}
	p.SetState(1859)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 206, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1856)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(1861)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 206, p.GetParserRuleContext())
	}
	{
		p.SetState(1862)
		p.TupleExpression()
	}
	{
		p.SetState(1863)
		p.Right_brace()
	}

	return localctx
}

// IJudgeExpressionElseIfStatementContext is an interface to support dynamic dispatch.
type IJudgeExpressionElseIfStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJudgeExpressionElseIfStatementContext differentiates from other interfaces.
	IsJudgeExpressionElseIfStatementContext()
}

type JudgeExpressionElseIfStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJudgeExpressionElseIfStatementContext() *JudgeExpressionElseIfStatementContext {
	var p = new(JudgeExpressionElseIfStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_judgeExpressionElseIfStatement
	return p
}

func (*JudgeExpressionElseIfStatementContext) IsJudgeExpressionElseIfStatementContext() {}

func NewJudgeExpressionElseIfStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JudgeExpressionElseIfStatementContext {
	var p = new(JudgeExpressionElseIfStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_judgeExpressionElseIfStatement

	return p
}

func (s *JudgeExpressionElseIfStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *JudgeExpressionElseIfStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *JudgeExpressionElseIfStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *JudgeExpressionElseIfStatementContext) TupleExpression() ITupleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleExpressionContext)
}

func (s *JudgeExpressionElseIfStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *JudgeExpressionElseIfStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *JudgeExpressionElseIfStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *JudgeExpressionElseIfStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JudgeExpressionElseIfStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JudgeExpressionElseIfStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitJudgeExpressionElseIfStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) JudgeExpressionElseIfStatement() (localctx IJudgeExpressionElseIfStatementContext) {
	localctx = NewJudgeExpressionElseIfStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 242, LiteParserRULE_judgeExpressionElseIfStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1865)
		p.expression(0)
	}
	{
		p.SetState(1866)
		p.Left_brace()
	}
	p.SetState(1870)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 207, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1867)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(1872)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 207, p.GetParserRuleContext())
	}
	{
		p.SetState(1873)
		p.TupleExpression()
	}
	{
		p.SetState(1874)
		p.Right_brace()
	}

	return localctx
}

// IJudgeCaseExpressionContext is an interface to support dynamic dispatch.
type IJudgeCaseExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJudgeCaseExpressionContext differentiates from other interfaces.
	IsJudgeCaseExpressionContext()
}

type JudgeCaseExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJudgeCaseExpressionContext() *JudgeCaseExpressionContext {
	var p = new(JudgeCaseExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_judgeCaseExpression
	return p
}

func (*JudgeCaseExpressionContext) IsJudgeCaseExpressionContext() {}

func NewJudgeCaseExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JudgeCaseExpressionContext {
	var p = new(JudgeCaseExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_judgeCaseExpression

	return p
}

func (s *JudgeCaseExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *JudgeCaseExpressionContext) Question() antlr.TerminalNode {
	return s.GetToken(LiteParserQuestion, 0)
}

func (s *JudgeCaseExpressionContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *JudgeCaseExpressionContext) AllCaseExpressionStatement() []ICaseExpressionStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICaseExpressionStatementContext)(nil)).Elem())
	var tst = make([]ICaseExpressionStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICaseExpressionStatementContext)
		}
	}

	return tst
}

func (s *JudgeCaseExpressionContext) CaseExpressionStatement(i int) ICaseExpressionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseExpressionStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICaseExpressionStatementContext)
}

func (s *JudgeCaseExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JudgeCaseExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JudgeCaseExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitJudgeCaseExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) JudgeCaseExpression() (localctx IJudgeCaseExpressionContext) {
	localctx = NewJudgeCaseExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 244, LiteParserRULE_judgeCaseExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1876)
		p.Match(LiteParserQuestion)
	}
	{
		p.SetState(1877)
		p.Match(LiteParserRight_Arrow)
	}
	p.SetState(1879)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(1878)
				p.CaseExpressionStatement()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1881)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 208, p.GetParserRuleContext())
	}

	return localctx
}

// ICaseExpressionStatementContext is an interface to support dynamic dispatch.
type ICaseExpressionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaseExpressionStatementContext differentiates from other interfaces.
	IsCaseExpressionStatementContext()
}

type CaseExpressionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaseExpressionStatementContext() *CaseExpressionStatementContext {
	var p = new(CaseExpressionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_caseExpressionStatement
	return p
}

func (*CaseExpressionStatementContext) IsCaseExpressionStatementContext() {}

func NewCaseExpressionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseExpressionStatementContext {
	var p = new(CaseExpressionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_caseExpressionStatement

	return p
}

func (s *CaseExpressionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseExpressionStatementContext) AllCaseExprStatement() []ICaseExprStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICaseExprStatementContext)(nil)).Elem())
	var tst = make([]ICaseExprStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICaseExprStatementContext)
		}
	}

	return tst
}

func (s *CaseExpressionStatementContext) CaseExprStatement(i int) ICaseExprStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseExprStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICaseExprStatementContext)
}

func (s *CaseExpressionStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *CaseExpressionStatementContext) TupleExpression() ITupleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleExpressionContext)
}

func (s *CaseExpressionStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *CaseExpressionStatementContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *CaseExpressionStatementContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *CaseExpressionStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *CaseExpressionStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *CaseExpressionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseExpressionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseExpressionStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitCaseExpressionStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) CaseExpressionStatement() (localctx ICaseExpressionStatementContext) {
	localctx = NewCaseExpressionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 246, LiteParserRULE_caseExpressionStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1883)
		p.CaseExprStatement()
	}
	p.SetState(1889)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserComma {
		{
			p.SetState(1884)
			p.More()
		}
		{
			p.SetState(1885)
			p.CaseExprStatement()
		}

		p.SetState(1891)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1892)
		p.Left_brace()
	}
	p.SetState(1896)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 210, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1893)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(1898)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 210, p.GetParserRuleContext())
	}
	{
		p.SetState(1899)
		p.TupleExpression()
	}
	{
		p.SetState(1900)
		p.Right_brace()
	}

	return localctx
}

// ILoopExpressionContext is an interface to support dynamic dispatch.
type ILoopExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoopExpressionContext differentiates from other interfaces.
	IsLoopExpressionContext()
}

type LoopExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoopExpressionContext() *LoopExpressionContext {
	var p = new(LoopExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_loopExpression
	return p
}

func (*LoopExpressionContext) IsLoopExpressionContext() {}

func NewLoopExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopExpressionContext {
	var p = new(LoopExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_loopExpression

	return p
}

func (s *LoopExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopExpressionContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *LoopExpressionContext) At() antlr.TerminalNode {
	return s.GetToken(LiteParserAt, 0)
}

func (s *LoopExpressionContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *LoopExpressionContext) IteratorStatement() IIteratorStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIteratorStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIteratorStatementContext)
}

func (s *LoopExpressionContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *LoopExpressionContext) TupleExpression() ITupleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleExpressionContext)
}

func (s *LoopExpressionContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *LoopExpressionContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *LoopExpressionContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *LoopExpressionContext) LoopElseExpression() ILoopElseExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopElseExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopElseExpressionContext)
}

func (s *LoopExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitLoopExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) LoopExpression() (localctx ILoopExpressionContext) {
	localctx = NewLoopExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 248, LiteParserRULE_loopExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1902)
		p.Id()
	}
	{
		p.SetState(1903)
		p.Match(LiteParserAt)
	}
	{
		p.SetState(1904)
		p.Match(LiteParserRight_Arrow)
	}
	{
		p.SetState(1905)
		p.IteratorStatement()
	}
	{
		p.SetState(1906)
		p.Left_brace()
	}
	p.SetState(1910)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 211, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1907)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(1912)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 211, p.GetParserRuleContext())
	}
	{
		p.SetState(1913)
		p.TupleExpression()
	}
	{
		p.SetState(1914)
		p.Right_brace()
	}
	p.SetState(1916)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 212, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1915)
			p.LoopElseExpression()
		}

	}

	return localctx
}

// ILoopEachExpressionContext is an interface to support dynamic dispatch.
type ILoopEachExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoopEachExpressionContext differentiates from other interfaces.
	IsLoopEachExpressionContext()
}

type LoopEachExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoopEachExpressionContext() *LoopEachExpressionContext {
	var p = new(LoopEachExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_loopEachExpression
	return p
}

func (*LoopEachExpressionContext) IsLoopEachExpressionContext() {}

func NewLoopEachExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopEachExpressionContext {
	var p = new(LoopEachExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_loopEachExpression

	return p
}

func (s *LoopEachExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopEachExpressionContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *LoopEachExpressionContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *LoopEachExpressionContext) At() antlr.TerminalNode {
	return s.GetToken(LiteParserAt, 0)
}

func (s *LoopEachExpressionContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *LoopEachExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LoopEachExpressionContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *LoopEachExpressionContext) TupleExpression() ITupleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleExpressionContext)
}

func (s *LoopEachExpressionContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *LoopEachExpressionContext) Colon() antlr.TerminalNode {
	return s.GetToken(LiteParserColon, 0)
}

func (s *LoopEachExpressionContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *LoopEachExpressionContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *LoopEachExpressionContext) LoopElseExpression() ILoopElseExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopElseExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopElseExpressionContext)
}

func (s *LoopEachExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopEachExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopEachExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitLoopEachExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) LoopEachExpression() (localctx ILoopEachExpressionContext) {
	localctx = NewLoopEachExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 250, LiteParserRULE_loopEachExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1921)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 213, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1918)
			p.Id()
		}
		{
			p.SetState(1919)
			p.Match(LiteParserColon)
		}

	}
	{
		p.SetState(1923)
		p.Id()
	}
	{
		p.SetState(1924)
		p.Match(LiteParserAt)
	}
	{
		p.SetState(1925)
		p.Match(LiteParserRight_Arrow)
	}
	{
		p.SetState(1926)
		p.expression(0)
	}
	{
		p.SetState(1927)
		p.Left_brace()
	}
	p.SetState(1931)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 214, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1928)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(1933)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 214, p.GetParserRuleContext())
	}
	{
		p.SetState(1934)
		p.TupleExpression()
	}
	{
		p.SetState(1935)
		p.Right_brace()
	}
	p.SetState(1937)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 215, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1936)
			p.LoopElseExpression()
		}

	}

	return localctx
}

// ILoopElseExpressionContext is an interface to support dynamic dispatch.
type ILoopElseExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoopElseExpressionContext differentiates from other interfaces.
	IsLoopElseExpressionContext()
}

type LoopElseExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoopElseExpressionContext() *LoopElseExpressionContext {
	var p = new(LoopElseExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_loopElseExpression
	return p
}

func (*LoopElseExpressionContext) IsLoopElseExpressionContext() {}

func NewLoopElseExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopElseExpressionContext {
	var p = new(LoopElseExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_loopElseExpression

	return p
}

func (s *LoopElseExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopElseExpressionContext) Discard() antlr.TerminalNode {
	return s.GetToken(LiteParserDiscard, 0)
}

func (s *LoopElseExpressionContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *LoopElseExpressionContext) TupleExpression() ITupleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleExpressionContext)
}

func (s *LoopElseExpressionContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *LoopElseExpressionContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *LoopElseExpressionContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *LoopElseExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopElseExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopElseExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitLoopElseExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) LoopElseExpression() (localctx ILoopElseExpressionContext) {
	localctx = NewLoopElseExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 252, LiteParserRULE_loopElseExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1939)
		p.Match(LiteParserDiscard)
	}
	{
		p.SetState(1940)
		p.Left_brace()
	}
	p.SetState(1944)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 216, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1941)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(1946)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 216, p.GetParserRuleContext())
	}
	{
		p.SetState(1947)
		p.TupleExpression()
	}
	{
		p.SetState(1948)
		p.Right_brace()
	}

	return localctx
}

// ICheckExpressionContext is an interface to support dynamic dispatch.
type ICheckExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCheckExpressionContext differentiates from other interfaces.
	IsCheckExpressionContext()
}

type CheckExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCheckExpressionContext() *CheckExpressionContext {
	var p = new(CheckExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_checkExpression
	return p
}

func (*CheckExpressionContext) IsCheckExpressionContext() {}

func NewCheckExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CheckExpressionContext {
	var p = new(CheckExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_checkExpression

	return p
}

func (s *CheckExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *CheckExpressionContext) Bang() antlr.TerminalNode {
	return s.GetToken(LiteParserBang, 0)
}

func (s *CheckExpressionContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *CheckExpressionContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *CheckExpressionContext) TupleExpression() ITupleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleExpressionContext)
}

func (s *CheckExpressionContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *CheckExpressionContext) CheckFinallyStatment() ICheckFinallyStatmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICheckFinallyStatmentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICheckFinallyStatmentContext)
}

func (s *CheckExpressionContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *CheckExpressionContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *CheckExpressionContext) AllCheckErrorExpression() []ICheckErrorExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICheckErrorExpressionContext)(nil)).Elem())
	var tst = make([]ICheckErrorExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICheckErrorExpressionContext)
		}
	}

	return tst
}

func (s *CheckExpressionContext) CheckErrorExpression(i int) ICheckErrorExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICheckErrorExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICheckErrorExpressionContext)
}

func (s *CheckExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CheckExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CheckExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitCheckExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) CheckExpression() (localctx ICheckExpressionContext) {
	localctx = NewCheckExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 254, LiteParserRULE_checkExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(1985)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 221, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1950)
			p.Match(LiteParserBang)
		}
		{
			p.SetState(1951)
			p.Match(LiteParserRight_Arrow)
		}
		{
			p.SetState(1952)
			p.Left_brace()
		}
		p.SetState(1956)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 217, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1953)
					p.FunctionSupportStatement()
				}

			}
			p.SetState(1958)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 217, p.GetParserRuleContext())
		}
		{
			p.SetState(1959)
			p.TupleExpression()
		}
		{
			p.SetState(1960)
			p.Right_brace()
		}
		p.SetState(1964)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ((_la-54)&-(0x1f+1)) == 0 && ((1<<uint((_la-54)))&((1<<(LiteParserTypeI8-54))|(1<<(LiteParserTypeU8-54))|(1<<(LiteParserTypeI16-54))|(1<<(LiteParserTypeU16-54))|(1<<(LiteParserTypeI32-54))|(1<<(LiteParserTypeU32-54))|(1<<(LiteParserTypeI64-54))|(1<<(LiteParserTypeU64-54))|(1<<(LiteParserTypeF32-54))|(1<<(LiteParserTypeF64-54))|(1<<(LiteParserTypeChr-54))|(1<<(LiteParserTypeStr-54))|(1<<(LiteParserTypeBool-54))|(1<<(LiteParserTypeInt-54))|(1<<(LiteParserTypeNum-54))|(1<<(LiteParserTypeByte-54))|(1<<(LiteParserTypeAny-54))|(1<<(LiteParserIDPrivate-54))|(1<<(LiteParserIDPublic-54)))) != 0 {
			{
				p.SetState(1961)
				p.CheckErrorExpression()
			}

			p.SetState(1966)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1967)
			p.CheckFinallyStatment()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1969)
			p.Match(LiteParserBang)
		}
		{
			p.SetState(1970)
			p.Match(LiteParserRight_Arrow)
		}
		{
			p.SetState(1971)
			p.Left_brace()
		}
		p.SetState(1975)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 219, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1972)
					p.FunctionSupportStatement()
				}

			}
			p.SetState(1977)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 219, p.GetParserRuleContext())
		}
		{
			p.SetState(1978)
			p.TupleExpression()
		}
		{
			p.SetState(1979)
			p.Right_brace()
		}
		p.SetState(1981)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(1980)
					p.CheckErrorExpression()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(1983)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 220, p.GetParserRuleContext())
		}

	}

	return localctx
}

// ICheckErrorExpressionContext is an interface to support dynamic dispatch.
type ICheckErrorExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCheckErrorExpressionContext differentiates from other interfaces.
	IsCheckErrorExpressionContext()
}

type CheckErrorExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCheckErrorExpressionContext() *CheckErrorExpressionContext {
	var p = new(CheckErrorExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_checkErrorExpression
	return p
}

func (*CheckErrorExpressionContext) IsCheckErrorExpressionContext() {}

func NewCheckErrorExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CheckErrorExpressionContext {
	var p = new(CheckErrorExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_checkErrorExpression

	return p
}

func (s *CheckErrorExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *CheckErrorExpressionContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *CheckErrorExpressionContext) TupleExpression() ITupleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleExpressionContext)
}

func (s *CheckErrorExpressionContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *CheckErrorExpressionContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *CheckErrorExpressionContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *CheckErrorExpressionContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *CheckErrorExpressionContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *CheckErrorExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CheckErrorExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CheckErrorExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitCheckErrorExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) CheckErrorExpression() (localctx ICheckErrorExpressionContext) {
	localctx = NewCheckErrorExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 256, LiteParserRULE_checkErrorExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1991)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 222, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1987)
			p.Id()
		}

	case 2:
		{
			p.SetState(1988)
			p.Id()
		}
		{
			p.SetState(1989)
			p.TypeType()
		}

	}
	{
		p.SetState(1993)
		p.Left_brace()
	}
	p.SetState(1997)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 223, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1994)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(1999)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 223, p.GetParserRuleContext())
	}
	{
		p.SetState(2000)
		p.TupleExpression()
	}
	{
		p.SetState(2001)
		p.Right_brace()
	}

	return localctx
}

// IDataStatementContext is an interface to support dynamic dispatch.
type IDataStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// IsDataStatementContext differentiates from other interfaces.
	IsDataStatementContext()
}

type DataStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
}

func NewEmptyDataStatementContext() *DataStatementContext {
	var p = new(DataStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_dataStatement
	return p
}

func (*DataStatementContext) IsDataStatementContext() {}

func NewDataStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DataStatementContext {
	var p = new(DataStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_dataStatement

	return p
}

func (s *DataStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DataStatementContext) GetT() antlr.Token { return s.t }

func (s *DataStatementContext) SetT(v antlr.Token) { s.t = v }

func (s *DataStatementContext) FloatExpr() IFloatExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFloatExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFloatExprContext)
}

func (s *DataStatementContext) IntegerExpr() IIntegerExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntegerExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntegerExprContext)
}

func (s *DataStatementContext) TextLiteral() antlr.TerminalNode {
	return s.GetToken(LiteParserTextLiteral, 0)
}

func (s *DataStatementContext) CharLiteral() antlr.TerminalNode {
	return s.GetToken(LiteParserCharLiteral, 0)
}

func (s *DataStatementContext) TrueLiteral() antlr.TerminalNode {
	return s.GetToken(LiteParserTrueLiteral, 0)
}

func (s *DataStatementContext) FalseLiteral() antlr.TerminalNode {
	return s.GetToken(LiteParserFalseLiteral, 0)
}

func (s *DataStatementContext) NilExpr() INilExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INilExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INilExprContext)
}

func (s *DataStatementContext) UndefinedLiteral() antlr.TerminalNode {
	return s.GetToken(LiteParserUndefinedLiteral, 0)
}

func (s *DataStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DataStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DataStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitDataStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) DataStatement() (localctx IDataStatementContext) {
	localctx = NewDataStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 258, LiteParserRULE_dataStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2011)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 224, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2003)
			p.FloatExpr()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2004)
			p.IntegerExpr()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2005)

			var _m = p.Match(LiteParserTextLiteral)

			localctx.(*DataStatementContext).t = _m
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2006)

			var _m = p.Match(LiteParserCharLiteral)

			localctx.(*DataStatementContext).t = _m
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2007)

			var _m = p.Match(LiteParserTrueLiteral)

			localctx.(*DataStatementContext).t = _m
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2008)

			var _m = p.Match(LiteParserFalseLiteral)

			localctx.(*DataStatementContext).t = _m
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2009)
			p.NilExpr()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2010)

			var _m = p.Match(LiteParserUndefinedLiteral)

			localctx.(*DataStatementContext).t = _m
		}

	}

	return localctx
}

// IFloatExprContext is an interface to support dynamic dispatch.
type IFloatExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFloatExprContext differentiates from other interfaces.
	IsFloatExprContext()
}

type FloatExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFloatExprContext() *FloatExprContext {
	var p = new(FloatExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_floatExpr
	return p
}

func (*FloatExprContext) IsFloatExprContext() {}

func NewFloatExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FloatExprContext {
	var p = new(FloatExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_floatExpr

	return p
}

func (s *FloatExprContext) GetParser() antlr.Parser { return s.parser }

func (s *FloatExprContext) AllIntegerExpr() []IIntegerExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIntegerExprContext)(nil)).Elem())
	var tst = make([]IIntegerExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIntegerExprContext)
		}
	}

	return tst
}

func (s *FloatExprContext) IntegerExpr(i int) IIntegerExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntegerExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIntegerExprContext)
}

func (s *FloatExprContext) Call() ICallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallContext)
}

func (s *FloatExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FloatExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FloatExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitFloatExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) FloatExpr() (localctx IFloatExprContext) {
	localctx = NewFloatExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 260, LiteParserRULE_floatExpr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2013)
		p.IntegerExpr()
	}
	{
		p.SetState(2014)
		p.Call()
	}
	{
		p.SetState(2015)
		p.IntegerExpr()
	}

	return localctx
}

// IIntegerExprContext is an interface to support dynamic dispatch.
type IIntegerExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIntegerExprContext differentiates from other interfaces.
	IsIntegerExprContext()
}

type IntegerExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIntegerExprContext() *IntegerExprContext {
	var p = new(IntegerExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_integerExpr
	return p
}

func (*IntegerExprContext) IsIntegerExprContext() {}

func NewIntegerExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IntegerExprContext {
	var p = new(IntegerExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_integerExpr

	return p
}

func (s *IntegerExprContext) GetParser() antlr.Parser { return s.parser }

func (s *IntegerExprContext) NumberLiteral() antlr.TerminalNode {
	return s.GetToken(LiteParserNumberLiteral, 0)
}

func (s *IntegerExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntegerExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IntegerExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitIntegerExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) IntegerExpr() (localctx IIntegerExprContext) {
	localctx = NewIntegerExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 262, LiteParserRULE_integerExpr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2017)
		p.Match(LiteParserNumberLiteral)
	}

	return localctx
}

// ITypeNotNullContext is an interface to support dynamic dispatch.
type ITypeNotNullContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeNotNullContext differentiates from other interfaces.
	IsTypeNotNullContext()
}

type TypeNotNullContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeNotNullContext() *TypeNotNullContext {
	var p = new(TypeNotNullContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_typeNotNull
	return p
}

func (*TypeNotNullContext) IsTypeNotNullContext() {}

func NewTypeNotNullContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeNotNullContext {
	var p = new(TypeNotNullContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_typeNotNull

	return p
}

func (s *TypeNotNullContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeNotNullContext) TypeAny() ITypeAnyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAnyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAnyContext)
}

func (s *TypeNotNullContext) TypeArray() ITypeArrayContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeArrayContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeArrayContext)
}

func (s *TypeNotNullContext) TypeList() ITypeListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeListContext)
}

func (s *TypeNotNullContext) TypeSet() ITypeSetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeSetContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeSetContext)
}

func (s *TypeNotNullContext) TypeDictionary() ITypeDictionaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeDictionaryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeDictionaryContext)
}

func (s *TypeNotNullContext) TypeStack() ITypeStackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeStackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeStackContext)
}

func (s *TypeNotNullContext) TypeQueue() ITypeQueueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeQueueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeQueueContext)
}

func (s *TypeNotNullContext) TypeChannel() ITypeChannelContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeChannelContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeChannelContext)
}

func (s *TypeNotNullContext) TypeBasic() ITypeBasicContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeBasicContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeBasicContext)
}

func (s *TypeNotNullContext) TypePackage() ITypePackageContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypePackageContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypePackageContext)
}

func (s *TypeNotNullContext) TypeFunction() ITypeFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeFunctionContext)
}

func (s *TypeNotNullContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeNotNullContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeNotNullContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTypeNotNull(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TypeNotNull() (localctx ITypeNotNullContext) {
	localctx = NewTypeNotNullContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 264, LiteParserRULE_typeNotNull)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2030)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 225, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2019)
			p.TypeAny()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2020)
			p.TypeArray()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2021)
			p.TypeList()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2022)
			p.TypeSet()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2023)
			p.TypeDictionary()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2024)
			p.TypeStack()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2025)
			p.TypeQueue()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2026)
			p.TypeChannel()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(2027)
			p.TypeBasic()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(2028)
			p.TypePackage()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(2029)
			p.TypeFunction()
		}

	}

	return localctx
}

// ITypeTypeContext is an interface to support dynamic dispatch.
type ITypeTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeTypeContext differentiates from other interfaces.
	IsTypeTypeContext()
}

type TypeTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeTypeContext() *TypeTypeContext {
	var p = new(TypeTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_typeType
	return p
}

func (*TypeTypeContext) IsTypeTypeContext() {}

func NewTypeTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeTypeContext {
	var p = new(TypeTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_typeType

	return p
}

func (s *TypeTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeTypeContext) TypeNotNull() ITypeNotNullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNotNullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNotNullContext)
}

func (s *TypeTypeContext) TypeNullable() ITypeNullableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNullableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNullableContext)
}

func (s *TypeTypeContext) TypeReference() ITypeReferenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeReferenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeReferenceContext)
}

func (s *TypeTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTypeType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TypeType() (localctx ITypeTypeContext) {
	localctx = NewTypeTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 266, LiteParserRULE_typeType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2035)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case LiteParserLeft_Paren, LiteParserLeft_Brack, LiteParserTypeI8, LiteParserTypeU8, LiteParserTypeI16, LiteParserTypeU16, LiteParserTypeI32, LiteParserTypeU32, LiteParserTypeI64, LiteParserTypeU64, LiteParserTypeF32, LiteParserTypeF64, LiteParserTypeChr, LiteParserTypeStr, LiteParserTypeBool, LiteParserTypeInt, LiteParserTypeNum, LiteParserTypeByte, LiteParserTypeAny, LiteParserIDPrivate, LiteParserIDPublic:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2032)
			p.TypeNotNull()
		}

	case LiteParserQuestion:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2033)
			p.TypeNullable()
		}

	case LiteParserBang:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2034)
			p.TypeReference()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITypeReferenceContext is an interface to support dynamic dispatch.
type ITypeReferenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeReferenceContext differentiates from other interfaces.
	IsTypeReferenceContext()
}

type TypeReferenceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeReferenceContext() *TypeReferenceContext {
	var p = new(TypeReferenceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_typeReference
	return p
}

func (*TypeReferenceContext) IsTypeReferenceContext() {}

func NewTypeReferenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeReferenceContext {
	var p = new(TypeReferenceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_typeReference

	return p
}

func (s *TypeReferenceContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeReferenceContext) Bang() antlr.TerminalNode {
	return s.GetToken(LiteParserBang, 0)
}

func (s *TypeReferenceContext) TypeNotNull() ITypeNotNullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNotNullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNotNullContext)
}

func (s *TypeReferenceContext) TypeNullable() ITypeNullableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNullableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNullableContext)
}

func (s *TypeReferenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeReferenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeReferenceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTypeReference(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TypeReference() (localctx ITypeReferenceContext) {
	localctx = NewTypeReferenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 268, LiteParserRULE_typeReference)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2037)
		p.Match(LiteParserBang)
	}
	p.SetState(2040)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case LiteParserLeft_Paren, LiteParserLeft_Brack, LiteParserTypeI8, LiteParserTypeU8, LiteParserTypeI16, LiteParserTypeU16, LiteParserTypeI32, LiteParserTypeU32, LiteParserTypeI64, LiteParserTypeU64, LiteParserTypeF32, LiteParserTypeF64, LiteParserTypeChr, LiteParserTypeStr, LiteParserTypeBool, LiteParserTypeInt, LiteParserTypeNum, LiteParserTypeByte, LiteParserTypeAny, LiteParserIDPrivate, LiteParserIDPublic:
		{
			p.SetState(2038)
			p.TypeNotNull()
		}

	case LiteParserQuestion:
		{
			p.SetState(2039)
			p.TypeNullable()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITypeNullableContext is an interface to support dynamic dispatch.
type ITypeNullableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeNullableContext differentiates from other interfaces.
	IsTypeNullableContext()
}

type TypeNullableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeNullableContext() *TypeNullableContext {
	var p = new(TypeNullableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_typeNullable
	return p
}

func (*TypeNullableContext) IsTypeNullableContext() {}

func NewTypeNullableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeNullableContext {
	var p = new(TypeNullableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_typeNullable

	return p
}

func (s *TypeNullableContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeNullableContext) Question() antlr.TerminalNode {
	return s.GetToken(LiteParserQuestion, 0)
}

func (s *TypeNullableContext) TypeNotNull() ITypeNotNullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNotNullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNotNullContext)
}

func (s *TypeNullableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeNullableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeNullableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTypeNullable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TypeNullable() (localctx ITypeNullableContext) {
	localctx = NewTypeNullableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 270, LiteParserRULE_typeNullable)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2042)
		p.Match(LiteParserQuestion)
	}
	{
		p.SetState(2043)
		p.TypeNotNull()
	}

	return localctx
}

// ITypeArrayContext is an interface to support dynamic dispatch.
type ITypeArrayContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeArrayContext differentiates from other interfaces.
	IsTypeArrayContext()
}

type TypeArrayContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeArrayContext() *TypeArrayContext {
	var p = new(TypeArrayContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_typeArray
	return p
}

func (*TypeArrayContext) IsTypeArrayContext() {}

func NewTypeArrayContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeArrayContext {
	var p = new(TypeArrayContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_typeArray

	return p
}

func (s *TypeArrayContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeArrayContext) Left_brack() ILeft_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_brackContext)
}

func (s *TypeArrayContext) Dot_Dot_Dot() antlr.TerminalNode {
	return s.GetToken(LiteParserDot_Dot_Dot, 0)
}

func (s *TypeArrayContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeArrayContext) Right_brack() IRight_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_brackContext)
}

func (s *TypeArrayContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeArrayContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeArrayContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTypeArray(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TypeArray() (localctx ITypeArrayContext) {
	localctx = NewTypeArrayContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 272, LiteParserRULE_typeArray)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2045)
		p.Left_brack()
	}
	{
		p.SetState(2046)
		p.Match(LiteParserDot_Dot_Dot)
	}
	{
		p.SetState(2047)
		p.TypeType()
	}
	{
		p.SetState(2048)
		p.Right_brack()
	}

	return localctx
}

// ITypeListContext is an interface to support dynamic dispatch.
type ITypeListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeListContext differentiates from other interfaces.
	IsTypeListContext()
}

type TypeListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeListContext() *TypeListContext {
	var p = new(TypeListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_typeList
	return p
}

func (*TypeListContext) IsTypeListContext() {}

func NewTypeListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeListContext {
	var p = new(TypeListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_typeList

	return p
}

func (s *TypeListContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeListContext) Left_brack() ILeft_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_brackContext)
}

func (s *TypeListContext) Dot_Dot() antlr.TerminalNode {
	return s.GetToken(LiteParserDot_Dot, 0)
}

func (s *TypeListContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeListContext) Right_brack() IRight_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_brackContext)
}

func (s *TypeListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTypeList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TypeList() (localctx ITypeListContext) {
	localctx = NewTypeListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 274, LiteParserRULE_typeList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2050)
		p.Left_brack()
	}
	{
		p.SetState(2051)
		p.Match(LiteParserDot_Dot)
	}
	{
		p.SetState(2052)
		p.TypeType()
	}
	{
		p.SetState(2053)
		p.Right_brack()
	}

	return localctx
}

// ITypeSetContext is an interface to support dynamic dispatch.
type ITypeSetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeSetContext differentiates from other interfaces.
	IsTypeSetContext()
}

type TypeSetContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeSetContext() *TypeSetContext {
	var p = new(TypeSetContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_typeSet
	return p
}

func (*TypeSetContext) IsTypeSetContext() {}

func NewTypeSetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeSetContext {
	var p = new(TypeSetContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_typeSet

	return p
}

func (s *TypeSetContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeSetContext) Left_brack() ILeft_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_brackContext)
}

func (s *TypeSetContext) Colon_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserColon_Arrow, 0)
}

func (s *TypeSetContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeSetContext) Right_brack() IRight_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_brackContext)
}

func (s *TypeSetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeSetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeSetContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTypeSet(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TypeSet() (localctx ITypeSetContext) {
	localctx = NewTypeSetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 276, LiteParserRULE_typeSet)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2055)
		p.Left_brack()
	}
	{
		p.SetState(2056)
		p.Match(LiteParserColon_Arrow)
	}
	{
		p.SetState(2057)
		p.TypeType()
	}
	{
		p.SetState(2058)
		p.Right_brack()
	}

	return localctx
}

// ITypeDictionaryContext is an interface to support dynamic dispatch.
type ITypeDictionaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeDictionaryContext differentiates from other interfaces.
	IsTypeDictionaryContext()
}

type TypeDictionaryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeDictionaryContext() *TypeDictionaryContext {
	var p = new(TypeDictionaryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_typeDictionary
	return p
}

func (*TypeDictionaryContext) IsTypeDictionaryContext() {}

func NewTypeDictionaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeDictionaryContext {
	var p = new(TypeDictionaryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_typeDictionary

	return p
}

func (s *TypeDictionaryContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeDictionaryContext) Left_brack() ILeft_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_brackContext)
}

func (s *TypeDictionaryContext) AllTypeType() []ITypeTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem())
	var tst = make([]ITypeTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeTypeContext)
		}
	}

	return tst
}

func (s *TypeDictionaryContext) TypeType(i int) ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeDictionaryContext) Equal_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserEqual_Arrow, 0)
}

func (s *TypeDictionaryContext) Right_brack() IRight_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_brackContext)
}

func (s *TypeDictionaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeDictionaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeDictionaryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTypeDictionary(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TypeDictionary() (localctx ITypeDictionaryContext) {
	localctx = NewTypeDictionaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 278, LiteParserRULE_typeDictionary)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2060)
		p.Left_brack()
	}
	{
		p.SetState(2061)
		p.TypeType()
	}
	{
		p.SetState(2062)
		p.Match(LiteParserEqual_Arrow)
	}
	{
		p.SetState(2063)
		p.TypeType()
	}
	{
		p.SetState(2064)
		p.Right_brack()
	}

	return localctx
}

// ITypeStackContext is an interface to support dynamic dispatch.
type ITypeStackContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeStackContext differentiates from other interfaces.
	IsTypeStackContext()
}

type TypeStackContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeStackContext() *TypeStackContext {
	var p = new(TypeStackContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_typeStack
	return p
}

func (*TypeStackContext) IsTypeStackContext() {}

func NewTypeStackContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeStackContext {
	var p = new(TypeStackContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_typeStack

	return p
}

func (s *TypeStackContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeStackContext) Left_brack() ILeft_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_brackContext)
}

func (s *TypeStackContext) Dot() antlr.TerminalNode {
	return s.GetToken(LiteParserDot, 0)
}

func (s *TypeStackContext) Greater() antlr.TerminalNode {
	return s.GetToken(LiteParserGreater, 0)
}

func (s *TypeStackContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeStackContext) Right_brack() IRight_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_brackContext)
}

func (s *TypeStackContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeStackContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeStackContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTypeStack(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TypeStack() (localctx ITypeStackContext) {
	localctx = NewTypeStackContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 280, LiteParserRULE_typeStack)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2066)
		p.Left_brack()
	}
	{
		p.SetState(2067)
		p.Match(LiteParserDot)
	}
	{
		p.SetState(2068)
		p.Match(LiteParserGreater)
	}
	{
		p.SetState(2069)
		p.TypeType()
	}
	{
		p.SetState(2070)
		p.Right_brack()
	}

	return localctx
}

// ITypeQueueContext is an interface to support dynamic dispatch.
type ITypeQueueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeQueueContext differentiates from other interfaces.
	IsTypeQueueContext()
}

type TypeQueueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeQueueContext() *TypeQueueContext {
	var p = new(TypeQueueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_typeQueue
	return p
}

func (*TypeQueueContext) IsTypeQueueContext() {}

func NewTypeQueueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeQueueContext {
	var p = new(TypeQueueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_typeQueue

	return p
}

func (s *TypeQueueContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeQueueContext) Left_brack() ILeft_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_brackContext)
}

func (s *TypeQueueContext) Dot() antlr.TerminalNode {
	return s.GetToken(LiteParserDot, 0)
}

func (s *TypeQueueContext) Less() antlr.TerminalNode {
	return s.GetToken(LiteParserLess, 0)
}

func (s *TypeQueueContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeQueueContext) Right_brack() IRight_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_brackContext)
}

func (s *TypeQueueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeQueueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeQueueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTypeQueue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TypeQueue() (localctx ITypeQueueContext) {
	localctx = NewTypeQueueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 282, LiteParserRULE_typeQueue)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2072)
		p.Left_brack()
	}
	{
		p.SetState(2073)
		p.Match(LiteParserDot)
	}
	{
		p.SetState(2074)
		p.Match(LiteParserLess)
	}
	{
		p.SetState(2075)
		p.TypeType()
	}
	{
		p.SetState(2076)
		p.Right_brack()
	}

	return localctx
}

// ITypeChannelContext is an interface to support dynamic dispatch.
type ITypeChannelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeChannelContext differentiates from other interfaces.
	IsTypeChannelContext()
}

type TypeChannelContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeChannelContext() *TypeChannelContext {
	var p = new(TypeChannelContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_typeChannel
	return p
}

func (*TypeChannelContext) IsTypeChannelContext() {}

func NewTypeChannelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeChannelContext {
	var p = new(TypeChannelContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_typeChannel

	return p
}

func (s *TypeChannelContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeChannelContext) Left_brack() ILeft_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_brackContext)
}

func (s *TypeChannelContext) Dot_Dot() antlr.TerminalNode {
	return s.GetToken(LiteParserDot_Dot, 0)
}

func (s *TypeChannelContext) Less() antlr.TerminalNode {
	return s.GetToken(LiteParserLess, 0)
}

func (s *TypeChannelContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeChannelContext) Right_brack() IRight_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_brackContext)
}

func (s *TypeChannelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeChannelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeChannelContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTypeChannel(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TypeChannel() (localctx ITypeChannelContext) {
	localctx = NewTypeChannelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 284, LiteParserRULE_typeChannel)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2078)
		p.Left_brack()
	}
	{
		p.SetState(2079)
		p.Match(LiteParserDot_Dot)
	}
	{
		p.SetState(2080)
		p.Match(LiteParserLess)
	}
	{
		p.SetState(2081)
		p.TypeType()
	}
	{
		p.SetState(2082)
		p.Right_brack()
	}

	return localctx
}

// ITypePackageContext is an interface to support dynamic dispatch.
type ITypePackageContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypePackageContext differentiates from other interfaces.
	IsTypePackageContext()
}

type TypePackageContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypePackageContext() *TypePackageContext {
	var p = new(TypePackageContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_typePackage
	return p
}

func (*TypePackageContext) IsTypePackageContext() {}

func NewTypePackageContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypePackageContext {
	var p = new(TypePackageContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_typePackage

	return p
}

func (s *TypePackageContext) GetParser() antlr.Parser { return s.parser }

func (s *TypePackageContext) NameSpaceItem() INameSpaceItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameSpaceItemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameSpaceItemContext)
}

func (s *TypePackageContext) TemplateCall() ITemplateCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateCallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateCallContext)
}

func (s *TypePackageContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypePackageContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypePackageContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTypePackage(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TypePackage() (localctx ITypePackageContext) {
	localctx = NewTypePackageContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 286, LiteParserRULE_typePackage)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2084)
		p.NameSpaceItem()
	}
	p.SetState(2086)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserLeft_Brack {
		{
			p.SetState(2085)
			p.TemplateCall()
		}

	}

	return localctx
}

// ITypeFunctionContext is an interface to support dynamic dispatch.
type ITypeFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// GetY returns the y token.
	GetY() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// SetY sets the y token.
	SetY(antlr.Token)

	// IsTypeFunctionContext differentiates from other interfaces.
	IsTypeFunctionContext()
}

type TypeFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
	y      antlr.Token
}

func NewEmptyTypeFunctionContext() *TypeFunctionContext {
	var p = new(TypeFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_typeFunction
	return p
}

func (*TypeFunctionContext) IsTypeFunctionContext() {}

func NewTypeFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeFunctionContext {
	var p = new(TypeFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_typeFunction

	return p
}

func (s *TypeFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeFunctionContext) GetT() antlr.Token { return s.t }

func (s *TypeFunctionContext) GetY() antlr.Token { return s.y }

func (s *TypeFunctionContext) SetT(v antlr.Token) { s.t = v }

func (s *TypeFunctionContext) SetY(v antlr.Token) { s.y = v }

func (s *TypeFunctionContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *TypeFunctionContext) AllTypeFunctionParameterClause() []ITypeFunctionParameterClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeFunctionParameterClauseContext)(nil)).Elem())
	var tst = make([]ITypeFunctionParameterClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeFunctionParameterClauseContext)
		}
	}

	return tst
}

func (s *TypeFunctionContext) TypeFunctionParameterClause(i int) ITypeFunctionParameterClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeFunctionParameterClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeFunctionParameterClauseContext)
}

func (s *TypeFunctionContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *TypeFunctionContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Arrow, 0)
}

func (s *TypeFunctionContext) Right_Flow() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Flow, 0)
}

func (s *TypeFunctionContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *TypeFunctionContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *TypeFunctionContext) At() antlr.TerminalNode {
	return s.GetToken(LiteParserAt, 0)
}

func (s *TypeFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTypeFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TypeFunction() (localctx ITypeFunctionContext) {
	localctx = NewTypeFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 288, LiteParserRULE_typeFunction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2088)
		p.Left_paren()
	}
	{
		p.SetState(2089)
		p.TypeFunctionParameterClause()
	}
	{
		p.SetState(2090)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*TypeFunctionContext).t = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == LiteParserRight_Arrow || _la == LiteParserRight_Flow) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*TypeFunctionContext).t = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(2092)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserAt {
		{
			p.SetState(2091)

			var _m = p.Match(LiteParserAt)

			localctx.(*TypeFunctionContext).y = _m
		}

	}
	p.SetState(2097)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserNew_Line {
		{
			p.SetState(2094)
			p.Match(LiteParserNew_Line)
		}

		p.SetState(2099)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2100)
		p.TypeFunctionParameterClause()
	}
	{
		p.SetState(2101)
		p.Right_paren()
	}

	return localctx
}

// ITypeAnyContext is an interface to support dynamic dispatch.
type ITypeAnyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeAnyContext differentiates from other interfaces.
	IsTypeAnyContext()
}

type TypeAnyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeAnyContext() *TypeAnyContext {
	var p = new(TypeAnyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_typeAny
	return p
}

func (*TypeAnyContext) IsTypeAnyContext() {}

func NewTypeAnyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeAnyContext {
	var p = new(TypeAnyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_typeAny

	return p
}

func (s *TypeAnyContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeAnyContext) TypeAny() antlr.TerminalNode {
	return s.GetToken(LiteParserTypeAny, 0)
}

func (s *TypeAnyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeAnyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeAnyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTypeAny(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TypeAny() (localctx ITypeAnyContext) {
	localctx = NewTypeAnyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 290, LiteParserRULE_typeAny)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2103)
		p.Match(LiteParserTypeAny)
	}

	return localctx
}

// ITypeFunctionParameterClauseContext is an interface to support dynamic dispatch.
type ITypeFunctionParameterClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeFunctionParameterClauseContext differentiates from other interfaces.
	IsTypeFunctionParameterClauseContext()
}

type TypeFunctionParameterClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeFunctionParameterClauseContext() *TypeFunctionParameterClauseContext {
	var p = new(TypeFunctionParameterClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_typeFunctionParameterClause
	return p
}

func (*TypeFunctionParameterClauseContext) IsTypeFunctionParameterClauseContext() {}

func NewTypeFunctionParameterClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeFunctionParameterClauseContext {
	var p = new(TypeFunctionParameterClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_typeFunctionParameterClause

	return p
}

func (s *TypeFunctionParameterClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeFunctionParameterClauseContext) AllTypeType() []ITypeTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem())
	var tst = make([]ITypeTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeTypeContext)
		}
	}

	return tst
}

func (s *TypeFunctionParameterClauseContext) TypeType(i int) ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeFunctionParameterClauseContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *TypeFunctionParameterClauseContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *TypeFunctionParameterClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeFunctionParameterClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeFunctionParameterClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTypeFunctionParameterClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TypeFunctionParameterClause() (localctx ITypeFunctionParameterClauseContext) {
	localctx = NewTypeFunctionParameterClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 292, LiteParserRULE_typeFunctionParameterClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2106)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(LiteParserLeft_Paren-32))|(1<<(LiteParserLeft_Brack-32))|(1<<(LiteParserQuestion-32))|(1<<(LiteParserBang-32))|(1<<(LiteParserTypeI8-32))|(1<<(LiteParserTypeU8-32))|(1<<(LiteParserTypeI16-32))|(1<<(LiteParserTypeU16-32))|(1<<(LiteParserTypeI32-32))|(1<<(LiteParserTypeU32-32))|(1<<(LiteParserTypeI64-32))|(1<<(LiteParserTypeU64-32))|(1<<(LiteParserTypeF32-32))|(1<<(LiteParserTypeF64-32)))) != 0) || (((_la-64)&-(0x1f+1)) == 0 && ((1<<uint((_la-64)))&((1<<(LiteParserTypeChr-64))|(1<<(LiteParserTypeStr-64))|(1<<(LiteParserTypeBool-64))|(1<<(LiteParserTypeInt-64))|(1<<(LiteParserTypeNum-64))|(1<<(LiteParserTypeByte-64))|(1<<(LiteParserTypeAny-64))|(1<<(LiteParserIDPrivate-64))|(1<<(LiteParserIDPublic-64)))) != 0) {
		{
			p.SetState(2105)
			p.TypeType()
		}

	}
	p.SetState(2113)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserComma {
		{
			p.SetState(2108)
			p.More()
		}
		{
			p.SetState(2109)
			p.TypeType()
		}

		p.SetState(2115)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITypeBasicContext is an interface to support dynamic dispatch.
type ITypeBasicContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// IsTypeBasicContext differentiates from other interfaces.
	IsTypeBasicContext()
}

type TypeBasicContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
}

func NewEmptyTypeBasicContext() *TypeBasicContext {
	var p = new(TypeBasicContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_typeBasic
	return p
}

func (*TypeBasicContext) IsTypeBasicContext() {}

func NewTypeBasicContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeBasicContext {
	var p = new(TypeBasicContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_typeBasic

	return p
}

func (s *TypeBasicContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeBasicContext) GetT() antlr.Token { return s.t }

func (s *TypeBasicContext) SetT(v antlr.Token) { s.t = v }

func (s *TypeBasicContext) TypeI8() antlr.TerminalNode {
	return s.GetToken(LiteParserTypeI8, 0)
}

func (s *TypeBasicContext) TypeU8() antlr.TerminalNode {
	return s.GetToken(LiteParserTypeU8, 0)
}

func (s *TypeBasicContext) TypeI16() antlr.TerminalNode {
	return s.GetToken(LiteParserTypeI16, 0)
}

func (s *TypeBasicContext) TypeU16() antlr.TerminalNode {
	return s.GetToken(LiteParserTypeU16, 0)
}

func (s *TypeBasicContext) TypeI32() antlr.TerminalNode {
	return s.GetToken(LiteParserTypeI32, 0)
}

func (s *TypeBasicContext) TypeU32() antlr.TerminalNode {
	return s.GetToken(LiteParserTypeU32, 0)
}

func (s *TypeBasicContext) TypeI64() antlr.TerminalNode {
	return s.GetToken(LiteParserTypeI64, 0)
}

func (s *TypeBasicContext) TypeU64() antlr.TerminalNode {
	return s.GetToken(LiteParserTypeU64, 0)
}

func (s *TypeBasicContext) TypeF32() antlr.TerminalNode {
	return s.GetToken(LiteParserTypeF32, 0)
}

func (s *TypeBasicContext) TypeF64() antlr.TerminalNode {
	return s.GetToken(LiteParserTypeF64, 0)
}

func (s *TypeBasicContext) TypeChr() antlr.TerminalNode {
	return s.GetToken(LiteParserTypeChr, 0)
}

func (s *TypeBasicContext) TypeStr() antlr.TerminalNode {
	return s.GetToken(LiteParserTypeStr, 0)
}

func (s *TypeBasicContext) TypeBool() antlr.TerminalNode {
	return s.GetToken(LiteParserTypeBool, 0)
}

func (s *TypeBasicContext) TypeInt() antlr.TerminalNode {
	return s.GetToken(LiteParserTypeInt, 0)
}

func (s *TypeBasicContext) TypeNum() antlr.TerminalNode {
	return s.GetToken(LiteParserTypeNum, 0)
}

func (s *TypeBasicContext) TypeByte() antlr.TerminalNode {
	return s.GetToken(LiteParserTypeByte, 0)
}

func (s *TypeBasicContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeBasicContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeBasicContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitTypeBasic(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) TypeBasic() (localctx ITypeBasicContext) {
	localctx = NewTypeBasicContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 294, LiteParserRULE_typeBasic)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2132)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case LiteParserTypeI8:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2116)

			var _m = p.Match(LiteParserTypeI8)

			localctx.(*TypeBasicContext).t = _m
		}

	case LiteParserTypeU8:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2117)

			var _m = p.Match(LiteParserTypeU8)

			localctx.(*TypeBasicContext).t = _m
		}

	case LiteParserTypeI16:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2118)

			var _m = p.Match(LiteParserTypeI16)

			localctx.(*TypeBasicContext).t = _m
		}

	case LiteParserTypeU16:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2119)

			var _m = p.Match(LiteParserTypeU16)

			localctx.(*TypeBasicContext).t = _m
		}

	case LiteParserTypeI32:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2120)

			var _m = p.Match(LiteParserTypeI32)

			localctx.(*TypeBasicContext).t = _m
		}

	case LiteParserTypeU32:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2121)

			var _m = p.Match(LiteParserTypeU32)

			localctx.(*TypeBasicContext).t = _m
		}

	case LiteParserTypeI64:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2122)

			var _m = p.Match(LiteParserTypeI64)

			localctx.(*TypeBasicContext).t = _m
		}

	case LiteParserTypeU64:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2123)

			var _m = p.Match(LiteParserTypeU64)

			localctx.(*TypeBasicContext).t = _m
		}

	case LiteParserTypeF32:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(2124)

			var _m = p.Match(LiteParserTypeF32)

			localctx.(*TypeBasicContext).t = _m
		}

	case LiteParserTypeF64:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(2125)

			var _m = p.Match(LiteParserTypeF64)

			localctx.(*TypeBasicContext).t = _m
		}

	case LiteParserTypeChr:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(2126)

			var _m = p.Match(LiteParserTypeChr)

			localctx.(*TypeBasicContext).t = _m
		}

	case LiteParserTypeStr:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(2127)

			var _m = p.Match(LiteParserTypeStr)

			localctx.(*TypeBasicContext).t = _m
		}

	case LiteParserTypeBool:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(2128)

			var _m = p.Match(LiteParserTypeBool)

			localctx.(*TypeBasicContext).t = _m
		}

	case LiteParserTypeInt:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(2129)

			var _m = p.Match(LiteParserTypeInt)

			localctx.(*TypeBasicContext).t = _m
		}

	case LiteParserTypeNum:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(2130)

			var _m = p.Match(LiteParserTypeNum)

			localctx.(*TypeBasicContext).t = _m
		}

	case LiteParserTypeByte:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(2131)

			var _m = p.Match(LiteParserTypeByte)

			localctx.(*TypeBasicContext).t = _m
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// INilExprContext is an interface to support dynamic dispatch.
type INilExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNilExprContext differentiates from other interfaces.
	IsNilExprContext()
}

type NilExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNilExprContext() *NilExprContext {
	var p = new(NilExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_nilExpr
	return p
}

func (*NilExprContext) IsNilExprContext() {}

func NewNilExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NilExprContext {
	var p = new(NilExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_nilExpr

	return p
}

func (s *NilExprContext) GetParser() antlr.Parser { return s.parser }

func (s *NilExprContext) NilLiteral() antlr.TerminalNode {
	return s.GetToken(LiteParserNilLiteral, 0)
}

func (s *NilExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NilExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NilExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitNilExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) NilExpr() (localctx INilExprContext) {
	localctx = NewNilExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 296, LiteParserRULE_nilExpr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2134)
		p.Match(LiteParserNilLiteral)
	}

	return localctx
}

// IBoolExprContext is an interface to support dynamic dispatch.
type IBoolExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// IsBoolExprContext differentiates from other interfaces.
	IsBoolExprContext()
}

type BoolExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
}

func NewEmptyBoolExprContext() *BoolExprContext {
	var p = new(BoolExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_boolExpr
	return p
}

func (*BoolExprContext) IsBoolExprContext() {}

func NewBoolExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BoolExprContext {
	var p = new(BoolExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_boolExpr

	return p
}

func (s *BoolExprContext) GetParser() antlr.Parser { return s.parser }

func (s *BoolExprContext) GetT() antlr.Token { return s.t }

func (s *BoolExprContext) SetT(v antlr.Token) { s.t = v }

func (s *BoolExprContext) TrueLiteral() antlr.TerminalNode {
	return s.GetToken(LiteParserTrueLiteral, 0)
}

func (s *BoolExprContext) FalseLiteral() antlr.TerminalNode {
	return s.GetToken(LiteParserFalseLiteral, 0)
}

func (s *BoolExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BoolExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BoolExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitBoolExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) BoolExpr() (localctx IBoolExprContext) {
	localctx = NewBoolExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 298, LiteParserRULE_boolExpr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2138)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case LiteParserTrueLiteral:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2136)

			var _m = p.Match(LiteParserTrueLiteral)

			localctx.(*BoolExprContext).t = _m
		}

	case LiteParserFalseLiteral:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2137)

			var _m = p.Match(LiteParserFalseLiteral)

			localctx.(*BoolExprContext).t = _m
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBitwiseContext is an interface to support dynamic dispatch.
type IBitwiseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitwiseContext differentiates from other interfaces.
	IsBitwiseContext()
}

type BitwiseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitwiseContext() *BitwiseContext {
	var p = new(BitwiseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_bitwise
	return p
}

func (*BitwiseContext) IsBitwiseContext() {}

func NewBitwiseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitwiseContext {
	var p = new(BitwiseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_bitwise

	return p
}

func (s *BitwiseContext) GetParser() antlr.Parser { return s.parser }

func (s *BitwiseContext) BitwiseAnd() IBitwiseAndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseAndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseAndContext)
}

func (s *BitwiseContext) BitwiseOr() IBitwiseOrContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseOrContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseOrContext)
}

func (s *BitwiseContext) BitwiseXor() IBitwiseXorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseXorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseXorContext)
}

func (s *BitwiseContext) BitwiseLeftShift() IBitwiseLeftShiftContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseLeftShiftContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseLeftShiftContext)
}

func (s *BitwiseContext) BitwiseRightShift() IBitwiseRightShiftContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBitwiseRightShiftContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBitwiseRightShiftContext)
}

func (s *BitwiseContext) New_Line() antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, 0)
}

func (s *BitwiseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitwiseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitBitwise(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Bitwise() (localctx IBitwiseContext) {
	localctx = NewBitwiseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 300, LiteParserRULE_bitwise)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2145)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 235, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(2140)
			p.BitwiseAnd()
		}

	case 2:
		{
			p.SetState(2141)
			p.BitwiseOr()
		}

	case 3:
		{
			p.SetState(2142)
			p.BitwiseXor()
		}

	case 4:
		{
			p.SetState(2143)
			p.BitwiseLeftShift()
		}

	case 5:
		{
			p.SetState(2144)
			p.BitwiseRightShift()
		}

	}
	p.SetState(2148)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserNew_Line {
		{
			p.SetState(2147)
			p.Match(LiteParserNew_Line)
		}

	}

	return localctx
}

// IBitwiseAndContext is an interface to support dynamic dispatch.
type IBitwiseAndContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitwiseAndContext differentiates from other interfaces.
	IsBitwiseAndContext()
}

type BitwiseAndContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitwiseAndContext() *BitwiseAndContext {
	var p = new(BitwiseAndContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_bitwiseAnd
	return p
}

func (*BitwiseAndContext) IsBitwiseAndContext() {}

func NewBitwiseAndContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitwiseAndContext {
	var p = new(BitwiseAndContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_bitwiseAnd

	return p
}

func (s *BitwiseAndContext) GetParser() antlr.Parser { return s.parser }

func (s *BitwiseAndContext) AllGrave() []antlr.TerminalNode {
	return s.GetTokens(LiteParserGrave)
}

func (s *BitwiseAndContext) Grave(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserGrave, i)
}

func (s *BitwiseAndContext) And() antlr.TerminalNode {
	return s.GetToken(LiteParserAnd, 0)
}

func (s *BitwiseAndContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseAndContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitwiseAndContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitBitwiseAnd(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) BitwiseAnd() (localctx IBitwiseAndContext) {
	localctx = NewBitwiseAndContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 302, LiteParserRULE_bitwiseAnd)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2150)
		p.Match(LiteParserGrave)
	}
	{
		p.SetState(2151)
		p.Match(LiteParserAnd)
	}
	{
		p.SetState(2152)
		p.Match(LiteParserGrave)
	}

	return localctx
}

// IBitwiseOrContext is an interface to support dynamic dispatch.
type IBitwiseOrContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitwiseOrContext differentiates from other interfaces.
	IsBitwiseOrContext()
}

type BitwiseOrContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitwiseOrContext() *BitwiseOrContext {
	var p = new(BitwiseOrContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_bitwiseOr
	return p
}

func (*BitwiseOrContext) IsBitwiseOrContext() {}

func NewBitwiseOrContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitwiseOrContext {
	var p = new(BitwiseOrContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_bitwiseOr

	return p
}

func (s *BitwiseOrContext) GetParser() antlr.Parser { return s.parser }

func (s *BitwiseOrContext) AllGrave() []antlr.TerminalNode {
	return s.GetTokens(LiteParserGrave)
}

func (s *BitwiseOrContext) Grave(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserGrave, i)
}

func (s *BitwiseOrContext) Or() antlr.TerminalNode {
	return s.GetToken(LiteParserOr, 0)
}

func (s *BitwiseOrContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseOrContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitwiseOrContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitBitwiseOr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) BitwiseOr() (localctx IBitwiseOrContext) {
	localctx = NewBitwiseOrContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 304, LiteParserRULE_bitwiseOr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2154)
		p.Match(LiteParserGrave)
	}
	{
		p.SetState(2155)
		p.Match(LiteParserOr)
	}
	{
		p.SetState(2156)
		p.Match(LiteParserGrave)
	}

	return localctx
}

// IBitwiseNotContext is an interface to support dynamic dispatch.
type IBitwiseNotContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitwiseNotContext differentiates from other interfaces.
	IsBitwiseNotContext()
}

type BitwiseNotContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitwiseNotContext() *BitwiseNotContext {
	var p = new(BitwiseNotContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_bitwiseNot
	return p
}

func (*BitwiseNotContext) IsBitwiseNotContext() {}

func NewBitwiseNotContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitwiseNotContext {
	var p = new(BitwiseNotContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_bitwiseNot

	return p
}

func (s *BitwiseNotContext) GetParser() antlr.Parser { return s.parser }

func (s *BitwiseNotContext) AllGrave() []antlr.TerminalNode {
	return s.GetTokens(LiteParserGrave)
}

func (s *BitwiseNotContext) Grave(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserGrave, i)
}

func (s *BitwiseNotContext) Wave() antlr.TerminalNode {
	return s.GetToken(LiteParserWave, 0)
}

func (s *BitwiseNotContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseNotContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitwiseNotContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitBitwiseNot(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) BitwiseNot() (localctx IBitwiseNotContext) {
	localctx = NewBitwiseNotContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 306, LiteParserRULE_bitwiseNot)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2158)
		p.Match(LiteParserGrave)
	}
	{
		p.SetState(2159)
		p.Match(LiteParserWave)
	}
	{
		p.SetState(2160)
		p.Match(LiteParserGrave)
	}

	return localctx
}

// IBitwiseXorContext is an interface to support dynamic dispatch.
type IBitwiseXorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitwiseXorContext differentiates from other interfaces.
	IsBitwiseXorContext()
}

type BitwiseXorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitwiseXorContext() *BitwiseXorContext {
	var p = new(BitwiseXorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_bitwiseXor
	return p
}

func (*BitwiseXorContext) IsBitwiseXorContext() {}

func NewBitwiseXorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitwiseXorContext {
	var p = new(BitwiseXorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_bitwiseXor

	return p
}

func (s *BitwiseXorContext) GetParser() antlr.Parser { return s.parser }

func (s *BitwiseXorContext) AllGrave() []antlr.TerminalNode {
	return s.GetTokens(LiteParserGrave)
}

func (s *BitwiseXorContext) Grave(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserGrave, i)
}

func (s *BitwiseXorContext) Xor() antlr.TerminalNode {
	return s.GetToken(LiteParserXor, 0)
}

func (s *BitwiseXorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseXorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitwiseXorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitBitwiseXor(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) BitwiseXor() (localctx IBitwiseXorContext) {
	localctx = NewBitwiseXorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 308, LiteParserRULE_bitwiseXor)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2162)
		p.Match(LiteParserGrave)
	}
	{
		p.SetState(2163)
		p.Match(LiteParserXor)
	}
	{
		p.SetState(2164)
		p.Match(LiteParserGrave)
	}

	return localctx
}

// IBitwiseLeftShiftContext is an interface to support dynamic dispatch.
type IBitwiseLeftShiftContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitwiseLeftShiftContext differentiates from other interfaces.
	IsBitwiseLeftShiftContext()
}

type BitwiseLeftShiftContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitwiseLeftShiftContext() *BitwiseLeftShiftContext {
	var p = new(BitwiseLeftShiftContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_bitwiseLeftShift
	return p
}

func (*BitwiseLeftShiftContext) IsBitwiseLeftShiftContext() {}

func NewBitwiseLeftShiftContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitwiseLeftShiftContext {
	var p = new(BitwiseLeftShiftContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_bitwiseLeftShift

	return p
}

func (s *BitwiseLeftShiftContext) GetParser() antlr.Parser { return s.parser }

func (s *BitwiseLeftShiftContext) AllGrave() []antlr.TerminalNode {
	return s.GetTokens(LiteParserGrave)
}

func (s *BitwiseLeftShiftContext) Grave(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserGrave, i)
}

func (s *BitwiseLeftShiftContext) Less() antlr.TerminalNode {
	return s.GetToken(LiteParserLess, 0)
}

func (s *BitwiseLeftShiftContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseLeftShiftContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitwiseLeftShiftContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitBitwiseLeftShift(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) BitwiseLeftShift() (localctx IBitwiseLeftShiftContext) {
	localctx = NewBitwiseLeftShiftContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 310, LiteParserRULE_bitwiseLeftShift)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2166)
		p.Match(LiteParserGrave)
	}
	{
		p.SetState(2167)
		p.Match(LiteParserLess)
	}
	{
		p.SetState(2168)
		p.Match(LiteParserGrave)
	}

	return localctx
}

// IBitwiseRightShiftContext is an interface to support dynamic dispatch.
type IBitwiseRightShiftContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBitwiseRightShiftContext differentiates from other interfaces.
	IsBitwiseRightShiftContext()
}

type BitwiseRightShiftContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitwiseRightShiftContext() *BitwiseRightShiftContext {
	var p = new(BitwiseRightShiftContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_bitwiseRightShift
	return p
}

func (*BitwiseRightShiftContext) IsBitwiseRightShiftContext() {}

func NewBitwiseRightShiftContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitwiseRightShiftContext {
	var p = new(BitwiseRightShiftContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_bitwiseRightShift

	return p
}

func (s *BitwiseRightShiftContext) GetParser() antlr.Parser { return s.parser }

func (s *BitwiseRightShiftContext) AllGrave() []antlr.TerminalNode {
	return s.GetTokens(LiteParserGrave)
}

func (s *BitwiseRightShiftContext) Grave(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserGrave, i)
}

func (s *BitwiseRightShiftContext) Greater() antlr.TerminalNode {
	return s.GetToken(LiteParserGreater, 0)
}

func (s *BitwiseRightShiftContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseRightShiftContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitwiseRightShiftContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitBitwiseRightShift(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) BitwiseRightShift() (localctx IBitwiseRightShiftContext) {
	localctx = NewBitwiseRightShiftContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 312, LiteParserRULE_bitwiseRightShift)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2170)
		p.Match(LiteParserGrave)
	}
	{
		p.SetState(2171)
		p.Match(LiteParserGreater)
	}
	{
		p.SetState(2172)
		p.Match(LiteParserGrave)
	}

	return localctx
}

// IJudgeCombineContext is an interface to support dynamic dispatch.
type IJudgeCombineContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJudgeCombineContext differentiates from other interfaces.
	IsJudgeCombineContext()
}

type JudgeCombineContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJudgeCombineContext() *JudgeCombineContext {
	var p = new(JudgeCombineContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_judgeCombine
	return p
}

func (*JudgeCombineContext) IsJudgeCombineContext() {}

func NewJudgeCombineContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JudgeCombineContext {
	var p = new(JudgeCombineContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_judgeCombine

	return p
}

func (s *JudgeCombineContext) GetParser() antlr.Parser { return s.parser }

func (s *JudgeCombineContext) Combine_Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserCombine_Equal, 0)
}

func (s *JudgeCombineContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JudgeCombineContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JudgeCombineContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitJudgeCombine(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) JudgeCombine() (localctx IJudgeCombineContext) {
	localctx = NewJudgeCombineContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 314, LiteParserRULE_judgeCombine)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2174)
		p.Match(LiteParserCombine_Equal)
	}

	return localctx
}

// IJudgeContext is an interface to support dynamic dispatch.
type IJudgeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsJudgeContext differentiates from other interfaces.
	IsJudgeContext()
}

type JudgeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyJudgeContext() *JudgeContext {
	var p = new(JudgeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_judge
	return p
}

func (*JudgeContext) IsJudgeContext() {}

func NewJudgeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JudgeContext {
	var p = new(JudgeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_judge

	return p
}

func (s *JudgeContext) GetParser() antlr.Parser { return s.parser }

func (s *JudgeContext) GetOp() antlr.Token { return s.op }

func (s *JudgeContext) SetOp(v antlr.Token) { s.op = v }

func (s *JudgeContext) Or() antlr.TerminalNode {
	return s.GetToken(LiteParserOr, 0)
}

func (s *JudgeContext) And() antlr.TerminalNode {
	return s.GetToken(LiteParserAnd, 0)
}

func (s *JudgeContext) Equal_Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserEqual_Equal, 0)
}

func (s *JudgeContext) Not_Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserNot_Equal, 0)
}

func (s *JudgeContext) Less_Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserLess_Equal, 0)
}

func (s *JudgeContext) Greater_Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserGreater_Equal, 0)
}

func (s *JudgeContext) Less() antlr.TerminalNode {
	return s.GetToken(LiteParserLess, 0)
}

func (s *JudgeContext) Greater() antlr.TerminalNode {
	return s.GetToken(LiteParserGreater, 0)
}

func (s *JudgeContext) New_Line() antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, 0)
}

func (s *JudgeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JudgeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JudgeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitJudge(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Judge() (localctx IJudgeContext) {
	localctx = NewJudgeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 316, LiteParserRULE_judge)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2176)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*JudgeContext).op = _lt

		_la = p.GetTokenStream().LA(1)

		if !((((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<LiteParserEqual_Equal)|(1<<LiteParserLess_Equal)|(1<<LiteParserGreater_Equal)|(1<<LiteParserNot_Equal)|(1<<LiteParserLess)|(1<<LiteParserGreater))) != 0) || _la == LiteParserAnd || _la == LiteParserOr) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*JudgeContext).op = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(2178)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserNew_Line {
		{
			p.SetState(2177)
			p.Match(LiteParserNew_Line)
		}

	}

	return localctx
}

// IAssignContext is an interface to support dynamic dispatch.
type IAssignContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsAssignContext differentiates from other interfaces.
	IsAssignContext()
}

type AssignContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyAssignContext() *AssignContext {
	var p = new(AssignContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_assign
	return p
}

func (*AssignContext) IsAssignContext() {}

func NewAssignContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignContext {
	var p = new(AssignContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_assign

	return p
}

func (s *AssignContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignContext) GetOp() antlr.Token { return s.op }

func (s *AssignContext) SetOp(v antlr.Token) { s.op = v }

func (s *AssignContext) Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserEqual, 0)
}

func (s *AssignContext) Add_Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserAdd_Equal, 0)
}

func (s *AssignContext) Sub_Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserSub_Equal, 0)
}

func (s *AssignContext) Mul_Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserMul_Equal, 0)
}

func (s *AssignContext) Div_Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserDiv_Equal, 0)
}

func (s *AssignContext) Mod_Equal() antlr.TerminalNode {
	return s.GetToken(LiteParserMod_Equal, 0)
}

func (s *AssignContext) New_Line() antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, 0)
}

func (s *AssignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitAssign(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Assign() (localctx IAssignContext) {
	localctx = NewAssignContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 318, LiteParserRULE_assign)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2180)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*AssignContext).op = _lt

		_la = p.GetTokenStream().LA(1)

		if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<LiteParserAdd_Equal)|(1<<LiteParserSub_Equal)|(1<<LiteParserMul_Equal)|(1<<LiteParserDiv_Equal)|(1<<LiteParserMod_Equal)|(1<<LiteParserEqual))) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*AssignContext).op = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(2182)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserNew_Line {
		{
			p.SetState(2181)
			p.Match(LiteParserNew_Line)
		}

	}

	return localctx
}

// IAddContext is an interface to support dynamic dispatch.
type IAddContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsAddContext differentiates from other interfaces.
	IsAddContext()
}

type AddContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyAddContext() *AddContext {
	var p = new(AddContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_add
	return p
}

func (*AddContext) IsAddContext() {}

func NewAddContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AddContext {
	var p = new(AddContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_add

	return p
}

func (s *AddContext) GetParser() antlr.Parser { return s.parser }

func (s *AddContext) GetOp() antlr.Token { return s.op }

func (s *AddContext) SetOp(v antlr.Token) { s.op = v }

func (s *AddContext) Add() antlr.TerminalNode {
	return s.GetToken(LiteParserAdd, 0)
}

func (s *AddContext) Sub() antlr.TerminalNode {
	return s.GetToken(LiteParserSub, 0)
}

func (s *AddContext) New_Line() antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, 0)
}

func (s *AddContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AddContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AddContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitAdd(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Add() (localctx IAddContext) {
	localctx = NewAddContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 320, LiteParserRULE_add)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2184)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*AddContext).op = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == LiteParserAdd || _la == LiteParserSub) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*AddContext).op = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(2186)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserNew_Line {
		{
			p.SetState(2185)
			p.Match(LiteParserNew_Line)
		}

	}

	return localctx
}

// IMulContext is an interface to support dynamic dispatch.
type IMulContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsMulContext differentiates from other interfaces.
	IsMulContext()
}

type MulContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyMulContext() *MulContext {
	var p = new(MulContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_mul
	return p
}

func (*MulContext) IsMulContext() {}

func NewMulContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MulContext {
	var p = new(MulContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_mul

	return p
}

func (s *MulContext) GetParser() antlr.Parser { return s.parser }

func (s *MulContext) GetOp() antlr.Token { return s.op }

func (s *MulContext) SetOp(v antlr.Token) { s.op = v }

func (s *MulContext) Mul() antlr.TerminalNode {
	return s.GetToken(LiteParserMul, 0)
}

func (s *MulContext) Div() antlr.TerminalNode {
	return s.GetToken(LiteParserDiv, 0)
}

func (s *MulContext) Mod() antlr.TerminalNode {
	return s.GetToken(LiteParserMod, 0)
}

func (s *MulContext) New_Line() antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, 0)
}

func (s *MulContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MulContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MulContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitMul(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Mul() (localctx IMulContext) {
	localctx = NewMulContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 322, LiteParserRULE_mul)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2188)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*MulContext).op = _lt

		_la = p.GetTokenStream().LA(1)

		if !(((_la-47)&-(0x1f+1)) == 0 && ((1<<uint((_la-47)))&((1<<(LiteParserMul-47))|(1<<(LiteParserDiv-47))|(1<<(LiteParserMod-47)))) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*MulContext).op = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(2190)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserNew_Line {
		{
			p.SetState(2189)
			p.Match(LiteParserNew_Line)
		}

	}

	return localctx
}

// IPowContext is an interface to support dynamic dispatch.
type IPowContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsPowContext differentiates from other interfaces.
	IsPowContext()
}

type PowContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyPowContext() *PowContext {
	var p = new(PowContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_pow
	return p
}

func (*PowContext) IsPowContext() {}

func NewPowContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PowContext {
	var p = new(PowContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_pow

	return p
}

func (s *PowContext) GetParser() antlr.Parser { return s.parser }

func (s *PowContext) GetOp() antlr.Token { return s.op }

func (s *PowContext) SetOp(v antlr.Token) { s.op = v }

func (s *PowContext) Pow() antlr.TerminalNode {
	return s.GetToken(LiteParserPow, 0)
}

func (s *PowContext) Root() antlr.TerminalNode {
	return s.GetToken(LiteParserRoot, 0)
}

func (s *PowContext) Log() antlr.TerminalNode {
	return s.GetToken(LiteParserLog, 0)
}

func (s *PowContext) New_Line() antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, 0)
}

func (s *PowContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PowContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PowContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitPow(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Pow() (localctx IPowContext) {
	localctx = NewPowContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 324, LiteParserRULE_pow)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2192)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*PowContext).op = _lt

		_la = p.GetTokenStream().LA(1)

		if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<LiteParserPow)|(1<<LiteParserRoot)|(1<<LiteParserLog))) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*PowContext).op = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(2194)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == LiteParserNew_Line {
		{
			p.SetState(2193)
			p.Match(LiteParserNew_Line)
		}

	}

	return localctx
}

// ICallContext is an interface to support dynamic dispatch.
type ICallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsCallContext differentiates from other interfaces.
	IsCallContext()
}

type CallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyCallContext() *CallContext {
	var p = new(CallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_call
	return p
}

func (*CallContext) IsCallContext() {}

func NewCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallContext {
	var p = new(CallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_call

	return p
}

func (s *CallContext) GetParser() antlr.Parser { return s.parser }

func (s *CallContext) GetOp() antlr.Token { return s.op }

func (s *CallContext) SetOp(v antlr.Token) { s.op = v }

func (s *CallContext) Dot() antlr.TerminalNode {
	return s.GetToken(LiteParserDot, 0)
}

func (s *CallContext) New_Line() antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, 0)
}

func (s *CallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitCall(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Call() (localctx ICallContext) {
	localctx = NewCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 326, LiteParserRULE_call)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2196)

		var _m = p.Match(LiteParserDot)

		localctx.(*CallContext).op = _m
	}
	p.SetState(2198)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 242, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2197)
			p.Match(LiteParserNew_Line)
		}

	}

	return localctx
}

// IWaveContext is an interface to support dynamic dispatch.
type IWaveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsWaveContext differentiates from other interfaces.
	IsWaveContext()
}

type WaveContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyWaveContext() *WaveContext {
	var p = new(WaveContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_wave
	return p
}

func (*WaveContext) IsWaveContext() {}

func NewWaveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WaveContext {
	var p = new(WaveContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_wave

	return p
}

func (s *WaveContext) GetParser() antlr.Parser { return s.parser }

func (s *WaveContext) GetOp() antlr.Token { return s.op }

func (s *WaveContext) SetOp(v antlr.Token) { s.op = v }

func (s *WaveContext) Wave() antlr.TerminalNode {
	return s.GetToken(LiteParserWave, 0)
}

func (s *WaveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WaveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WaveContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitWave(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Wave() (localctx IWaveContext) {
	localctx = NewWaveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 328, LiteParserRULE_wave)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2200)

		var _m = p.Match(LiteParserWave)

		localctx.(*WaveContext).op = _m
	}

	return localctx
}

// IIdContext is an interface to support dynamic dispatch.
type IIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdContext differentiates from other interfaces.
	IsIdContext()
}

type IdContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdContext() *IdContext {
	var p = new(IdContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_id
	return p
}

func (*IdContext) IsIdContext() {}

func NewIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdContext {
	var p = new(IdContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_id

	return p
}

func (s *IdContext) GetParser() antlr.Parser { return s.parser }

func (s *IdContext) IdItem() IIdItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdItemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdItemContext)
}

func (s *IdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitId(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Id() (localctx IIdContext) {
	localctx = NewIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 330, LiteParserRULE_id)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2202)
		p.IdItem()
	}

	return localctx
}

// IIdItemContext is an interface to support dynamic dispatch.
type IIdItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsIdItemContext differentiates from other interfaces.
	IsIdItemContext()
}

type IdItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyIdItemContext() *IdItemContext {
	var p = new(IdItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_idItem
	return p
}

func (*IdItemContext) IsIdItemContext() {}

func NewIdItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdItemContext {
	var p = new(IdItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_idItem

	return p
}

func (s *IdItemContext) GetParser() antlr.Parser { return s.parser }

func (s *IdItemContext) GetOp() antlr.Token { return s.op }

func (s *IdItemContext) SetOp(v antlr.Token) { s.op = v }

func (s *IdItemContext) IDPublic() antlr.TerminalNode {
	return s.GetToken(LiteParserIDPublic, 0)
}

func (s *IdItemContext) IDPrivate() antlr.TerminalNode {
	return s.GetToken(LiteParserIDPrivate, 0)
}

func (s *IdItemContext) TypeBasic() ITypeBasicContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeBasicContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeBasicContext)
}

func (s *IdItemContext) TypeAny() ITypeAnyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAnyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAnyContext)
}

func (s *IdItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitIdItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) IdItem() (localctx IIdItemContext) {
	localctx = NewIdItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 332, LiteParserRULE_idItem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2207)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case LiteParserIDPrivate, LiteParserIDPublic:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2204)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*IdItemContext).op = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == LiteParserIDPrivate || _la == LiteParserIDPublic) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*IdItemContext).op = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case LiteParserTypeI8, LiteParserTypeU8, LiteParserTypeI16, LiteParserTypeU16, LiteParserTypeI32, LiteParserTypeU32, LiteParserTypeI64, LiteParserTypeU64, LiteParserTypeF32, LiteParserTypeF64, LiteParserTypeChr, LiteParserTypeStr, LiteParserTypeBool, LiteParserTypeInt, LiteParserTypeNum, LiteParserTypeByte:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2205)
			p.TypeBasic()
		}

	case LiteParserTypeAny:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2206)
			p.TypeAny()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IEndContext is an interface to support dynamic dispatch.
type IEndContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEndContext differentiates from other interfaces.
	IsEndContext()
}

type EndContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEndContext() *EndContext {
	var p = new(EndContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_end
	return p
}

func (*EndContext) IsEndContext() {}

func NewEndContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EndContext {
	var p = new(EndContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_end

	return p
}

func (s *EndContext) GetParser() antlr.Parser { return s.parser }

func (s *EndContext) Semi() antlr.TerminalNode {
	return s.GetToken(LiteParserSemi, 0)
}

func (s *EndContext) New_Line() antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, 0)
}

func (s *EndContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EndContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EndContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitEnd(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) End() (localctx IEndContext) {
	localctx = NewEndContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 334, LiteParserRULE_end)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2209)
		_la = p.GetTokenStream().LA(1)

		if !(_la == LiteParserSemi || _la == LiteParserNew_Line) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IMoreContext is an interface to support dynamic dispatch.
type IMoreContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMoreContext differentiates from other interfaces.
	IsMoreContext()
}

type MoreContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMoreContext() *MoreContext {
	var p = new(MoreContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_more
	return p
}

func (*MoreContext) IsMoreContext() {}

func NewMoreContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MoreContext {
	var p = new(MoreContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_more

	return p
}

func (s *MoreContext) GetParser() antlr.Parser { return s.parser }

func (s *MoreContext) Comma() antlr.TerminalNode {
	return s.GetToken(LiteParserComma, 0)
}

func (s *MoreContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *MoreContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *MoreContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MoreContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MoreContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitMore(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) More() (localctx IMoreContext) {
	localctx = NewMoreContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 336, LiteParserRULE_more)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2211)
		p.Match(LiteParserComma)
	}
	p.SetState(2215)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserNew_Line {
		{
			p.SetState(2212)
			p.Match(LiteParserNew_Line)
		}

		p.SetState(2217)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ILeft_braceContext is an interface to support dynamic dispatch.
type ILeft_braceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLeft_braceContext differentiates from other interfaces.
	IsLeft_braceContext()
}

type Left_braceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLeft_braceContext() *Left_braceContext {
	var p = new(Left_braceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_left_brace
	return p
}

func (*Left_braceContext) IsLeft_braceContext() {}

func NewLeft_braceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Left_braceContext {
	var p = new(Left_braceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_left_brace

	return p
}

func (s *Left_braceContext) GetParser() antlr.Parser { return s.parser }

func (s *Left_braceContext) Left_Brace() antlr.TerminalNode {
	return s.GetToken(LiteParserLeft_Brace, 0)
}

func (s *Left_braceContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *Left_braceContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *Left_braceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Left_braceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Left_braceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitLeft_brace(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Left_brace() (localctx ILeft_braceContext) {
	localctx = NewLeft_braceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 338, LiteParserRULE_left_brace)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2218)
		p.Match(LiteParserLeft_Brace)
	}
	p.SetState(2222)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 245, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2219)
				p.Match(LiteParserNew_Line)
			}

		}
		p.SetState(2224)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 245, p.GetParserRuleContext())
	}

	return localctx
}

// IRight_braceContext is an interface to support dynamic dispatch.
type IRight_braceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRight_braceContext differentiates from other interfaces.
	IsRight_braceContext()
}

type Right_braceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRight_braceContext() *Right_braceContext {
	var p = new(Right_braceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_right_brace
	return p
}

func (*Right_braceContext) IsRight_braceContext() {}

func NewRight_braceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Right_braceContext {
	var p = new(Right_braceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_right_brace

	return p
}

func (s *Right_braceContext) GetParser() antlr.Parser { return s.parser }

func (s *Right_braceContext) Right_Brace() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Brace, 0)
}

func (s *Right_braceContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *Right_braceContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *Right_braceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Right_braceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Right_braceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitRight_brace(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Right_brace() (localctx IRight_braceContext) {
	localctx = NewRight_braceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 340, LiteParserRULE_right_brace)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2228)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserNew_Line {
		{
			p.SetState(2225)
			p.Match(LiteParserNew_Line)
		}

		p.SetState(2230)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2231)
		p.Match(LiteParserRight_Brace)
	}

	return localctx
}

// ILeft_parenContext is an interface to support dynamic dispatch.
type ILeft_parenContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLeft_parenContext differentiates from other interfaces.
	IsLeft_parenContext()
}

type Left_parenContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLeft_parenContext() *Left_parenContext {
	var p = new(Left_parenContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_left_paren
	return p
}

func (*Left_parenContext) IsLeft_parenContext() {}

func NewLeft_parenContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Left_parenContext {
	var p = new(Left_parenContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_left_paren

	return p
}

func (s *Left_parenContext) GetParser() antlr.Parser { return s.parser }

func (s *Left_parenContext) Left_Paren() antlr.TerminalNode {
	return s.GetToken(LiteParserLeft_Paren, 0)
}

func (s *Left_parenContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Left_parenContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Left_parenContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitLeft_paren(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Left_paren() (localctx ILeft_parenContext) {
	localctx = NewLeft_parenContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 342, LiteParserRULE_left_paren)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2233)
		p.Match(LiteParserLeft_Paren)
	}

	return localctx
}

// IRight_parenContext is an interface to support dynamic dispatch.
type IRight_parenContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRight_parenContext differentiates from other interfaces.
	IsRight_parenContext()
}

type Right_parenContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRight_parenContext() *Right_parenContext {
	var p = new(Right_parenContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_right_paren
	return p
}

func (*Right_parenContext) IsRight_parenContext() {}

func NewRight_parenContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Right_parenContext {
	var p = new(Right_parenContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_right_paren

	return p
}

func (s *Right_parenContext) GetParser() antlr.Parser { return s.parser }

func (s *Right_parenContext) Right_Paren() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Paren, 0)
}

func (s *Right_parenContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Right_parenContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Right_parenContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitRight_paren(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Right_paren() (localctx IRight_parenContext) {
	localctx = NewRight_parenContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 344, LiteParserRULE_right_paren)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2235)
		p.Match(LiteParserRight_Paren)
	}

	return localctx
}

// ILeft_brackContext is an interface to support dynamic dispatch.
type ILeft_brackContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLeft_brackContext differentiates from other interfaces.
	IsLeft_brackContext()
}

type Left_brackContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLeft_brackContext() *Left_brackContext {
	var p = new(Left_brackContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_left_brack
	return p
}

func (*Left_brackContext) IsLeft_brackContext() {}

func NewLeft_brackContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Left_brackContext {
	var p = new(Left_brackContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_left_brack

	return p
}

func (s *Left_brackContext) GetParser() antlr.Parser { return s.parser }

func (s *Left_brackContext) Left_Brack() antlr.TerminalNode {
	return s.GetToken(LiteParserLeft_Brack, 0)
}

func (s *Left_brackContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *Left_brackContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *Left_brackContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Left_brackContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Left_brackContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitLeft_brack(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Left_brack() (localctx ILeft_brackContext) {
	localctx = NewLeft_brackContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 346, LiteParserRULE_left_brack)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2237)
		p.Match(LiteParserLeft_Brack)
	}
	p.SetState(2241)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserNew_Line {
		{
			p.SetState(2238)
			p.Match(LiteParserNew_Line)
		}

		p.SetState(2243)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IRight_brackContext is an interface to support dynamic dispatch.
type IRight_brackContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRight_brackContext differentiates from other interfaces.
	IsRight_brackContext()
}

type Right_brackContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRight_brackContext() *Right_brackContext {
	var p = new(Right_brackContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = LiteParserRULE_right_brack
	return p
}

func (*Right_brackContext) IsRight_brackContext() {}

func NewRight_brackContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Right_brackContext {
	var p = new(Right_brackContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = LiteParserRULE_right_brack

	return p
}

func (s *Right_brackContext) GetParser() antlr.Parser { return s.parser }

func (s *Right_brackContext) Right_Brack() antlr.TerminalNode {
	return s.GetToken(LiteParserRight_Brack, 0)
}

func (s *Right_brackContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(LiteParserNew_Line)
}

func (s *Right_brackContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(LiteParserNew_Line, i)
}

func (s *Right_brackContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Right_brackContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Right_brackContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case LiteParserVisitor:
		return t.VisitRight_brack(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *LiteParser) Right_brack() (localctx IRight_brackContext) {
	localctx = NewRight_brackContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 348, LiteParserRULE_right_brack)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2247)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == LiteParserNew_Line {
		{
			p.SetState(2244)
			p.Match(LiteParserNew_Line)
		}

		p.SetState(2249)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2250)
		p.Match(LiteParserRight_Brack)
	}

	return localctx
}

func (p *LiteParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 69:
		var t *ExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ExpressionContext)
		}
		return p.Expression_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *LiteParser) Expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 1:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 16)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 15)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 14)

	case 9:
		return p.Precpred(p.GetParserRuleContext(), 13)

	case 10:
		return p.Precpred(p.GetParserRuleContext(), 12)

	case 11:
		return p.Precpred(p.GetParserRuleContext(), 11)

	case 12:
		return p.Precpred(p.GetParserRuleContext(), 10)

	case 13:
		return p.Precpred(p.GetParserRuleContext(), 9)

	case 14:
		return p.Precpred(p.GetParserRuleContext(), 8)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
