"main" {
    # "./project/package path" package. #
    "fmt" fmt.
}

main() -> () {
    testGo()
    test(1, "2")
    testJudge()
    testLoop()
    m := man{}
    testProtocol(m?)
    testLambda((a:Int) -> (b:Str) {
        <- ("")
    })
}

pi :: 3.14
eight: Int: 8

num1 := 1
num2: Num = 12.345678

work => (Str)->()
doWork -> (Str)->()

test(x:Int, y:Str) -> (r1:Str, r2:Int) {
    a := x * 3
    b: Int = 2
    <- ("hello", a+b)
}

testJudge() -> () {
    ? 1 + 1 == 2 {

    } 2 * 3 == 6 {

    } _ {

    }
    a := 5
    a ? 1 {
        a += 1
    } 2 {
        a += 2
    } _ {
        a += 0
    }
}

testLoop() -> () {
    a := 0
    arr := []Int{1,2,3,4,5}
    arr @ i {
        a += i
    }
    arr @ [i]v {
        a += i + v
    }
    dic := [Str]Int{["1"]1,["2"]2}
    dic @ i {
        a += i
    }
    [0 <= 10] @ i {
        a += i
        ? i == 7 {
            -> @
        }
    }
    [5 > 0] @ i {
        a += i
    }
    @ a > 0 {
        a -= 1
    }
    @ {
        <- @
    }
}

human -> {
    name: Str
}

(me: ?human) -> {
    sayName() -> (n: Str) {
        <- (me.name)
    }
} 

man -> {
    :human
    age: Int
}

(me: ?man) -> {
    doSomething(work: Str) -> () {
        Println(work)
    }
}

person <- {
    sayName() -> (n:Str)
}

worker <- {
    :person
    doSomething(work: Str) -> ()
}

testProtocol(w: worker) -> (i:Any) {
    w.doSomething("protocol")
    <- (w)
}

testGo() -> (v:Int) {
    async := () -> () {
        Println("async")
    }
    async() <~
    channel := <[->]Int>(1)
    channel[<-] = 2
    <- (channel[<-]) 
}

testLambda(fn:(Int)->(Str)) -> () {
    fn(1)
}